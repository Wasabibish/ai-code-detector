coding_problem_id,llm_answer_id,plagiarism_score,json_content,llm_content,human_content,question
source_code_000,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 75}, 'ica_id': {0: 688}, 'question': {0: 'Write a program to find the largest element in an array.'}, 'rules': {0: ['The array can have duplicate elements.']}, 'examples': {0: 'Input: [1, 4, 2, 9, 5]\nOutput: 9'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 405}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class LargestElementFinder {
    public static void main(String[] args) {
        int[] array = {1, 4, 2, 9, 5};
        int largest = array[0];
        
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        System.out.println(""Input: "" + java.util.Arrays.toString(array));
        System.out.println(""Output: "" + largest);
    }
}
","fun findLargestElement(array: IntArray) : Int {
  if (array.isEmpty()) {
    return -1
  }

  var maximum = array[0]

  for (item in array) {
    if (item > maximum) {
      maximum = item
    }
  }

  return maximum
    
}",Write a program to find the largest element in an array.
source_code_000,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 75}, 'ica_id': {0: 688}, 'question': {0: 'Write a program to find the largest element in an array.'}, 'rules': {0: ['The array can have duplicate elements.']}, 'examples': {0: 'Input: [1, 4, 2, 9, 5]\nOutput: 9'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 405}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class LargestElementFinder {
    public static void main(String[] args) {
        int[] array = {1, 4, 2, 9, 5};
        int largest = array[0];
        
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        System.out.println(""Input: "" + java.util.Arrays.toString(array));
        System.out.println(""Output: "" + largest);
    }
}
","fun findLargestElement(array: IntArray) : Int {
  if (array.isEmpty()) {
    return -1
  }

  var maximum = array[0]

  for (item in array) {
    if (item > maximum) {
      maximum = item
    }
  }

  return maximum
    
}",Write a program to find the largest element in an array.
source_code_000,gpt-4_00,0.0,"{'ic_id': {0: 75}, 'ica_id': {0: 688}, 'question': {0: 'Write a program to find the largest element in an array.'}, 'rules': {0: ['The array can have duplicate elements.']}, 'examples': {0: 'Input: [1, 4, 2, 9, 5]\nOutput: 9'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 405}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class LargestElementFinder {
    public static void main(String[] args) {
        int[] array = {1, 4, 2, 9, 5};
        int largest = array[0];
        
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        System.out.println(""Input: "" + java.util.Arrays.toString(array));
        System.out.println(""Output: "" + largest);
    }
}
","fun findLargestElement(array: IntArray) : Int {
  if (array.isEmpty()) {
    return -1
  }

  var maximum = array[0]

  for (item in array) {
    if (item > maximum) {
      maximum = item
    }
  }

  return maximum
    
}",Write a program to find the largest element in an array.
source_code_000,gpt-4_01,0.0,"{'ic_id': {0: 75}, 'ica_id': {0: 688}, 'question': {0: 'Write a program to find the largest element in an array.'}, 'rules': {0: ['The array can have duplicate elements.']}, 'examples': {0: 'Input: [1, 4, 2, 9, 5]\nOutput: 9'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 405}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class LargestElementFinder {
    public static void main(String[] args) {
        int[] array = {1, 4, 2, 9, 5};
        int largest = array[0];
        
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        System.out.println(""Input: "" + java.util.Arrays.toString(array));
        System.out.println(""Output: "" + largest);
    }
}
","fun findLargestElement(array: IntArray) : Int {
  if (array.isEmpty()) {
    return -1
  }

  var maximum = array[0]

  for (item in array) {
    if (item > maximum) {
      maximum = item
    }
  }

  return maximum
    
}",Write a program to find the largest element in an array.
source_code_000,gpt-4-turbo_00,0.0,"{'ic_id': {0: 75}, 'ica_id': {0: 688}, 'question': {0: 'Write a program to find the largest element in an array.'}, 'rules': {0: ['The array can have duplicate elements.']}, 'examples': {0: 'Input: [1, 4, 2, 9, 5]\nOutput: 9'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 405}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class LargestElementFinder {
    public static void main(String[] args) {
        int[] array = {1, 4, 2, 9, 5};
        int largest = array[0];
        
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        System.out.println(""Input: "" + java.util.Arrays.toString(array));
        System.out.println(""Output: "" + largest);
    }
}
","fun findLargestElement(array: IntArray) : Int {
  if (array.isEmpty()) {
    return -1
  }

  var maximum = array[0]

  for (item in array) {
    if (item > maximum) {
      maximum = item
    }
  }

  return maximum
    
}",Write a program to find the largest element in an array.
source_code_000,gpt-4-turbo_01,0.0,"{'ic_id': {0: 75}, 'ica_id': {0: 688}, 'question': {0: 'Write a program to find the largest element in an array.'}, 'rules': {0: ['The array can have duplicate elements.']}, 'examples': {0: 'Input: [1, 4, 2, 9, 5]\nOutput: 9'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 405}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class LargestElementFinder {
    public static void main(String[] args) {
        int[] array = {1, 4, 2, 9, 5};
        int largest = array[0];
        
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        System.out.println(""Input: "" + java.util.Arrays.toString(array));
        System.out.println(""Output: "" + largest);
    }
}
","fun findLargestElement(array: IntArray) : Int {
  if (array.isEmpty()) {
    return -1
  }

  var maximum = array[0]

  for (item in array) {
    if (item > maximum) {
      maximum = item
    }
  }

  return maximum
    
}",Write a program to find the largest element in an array.
source_code_001,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 71}, 'ica_id': {0: 702}, 'question': {0: 'Given a string with multiple words, write a function to reverse the order of the words in the string.'}, 'rules': {0: []}, 'examples': {0: '""Hello World!"" -> ""World! Hello""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 516}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class ReverseWords {
    public static String reverseWords(String s) {
        String[] words = s.split("" "");
        StringBuilder result = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            result.append(words[i]);
            if (i != 0) {
                result.append("" "");
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String input = ""Hello World!"";
        String reversed = reverseWords(input);
        System.out.println(reversed);
    }
}
","str_helloworld = ""Hello World!""

str_hw_splitted = str_helloworld.split("" "")

str_reverse = str_hw_splitted[::-1]

print(str_helloworld, ""-> "", str_reverse[0], str_reverse[1])","Given a string with multiple words, write a function to reverse the order of the words in the string."
source_code_001,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 71}, 'ica_id': {0: 702}, 'question': {0: 'Given a string with multiple words, write a function to reverse the order of the words in the string.'}, 'rules': {0: []}, 'examples': {0: '""Hello World!"" -> ""World! Hello""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 516}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class ReverseWords {
    public static String reverseWords(String s) {
        String[] words = s.split("" "");
        StringBuilder result = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            result.append(words[i]);
            if (i != 0) {
                result.append("" "");
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String input = ""Hello World!"";
        String reversed = reverseWords(input);
        System.out.println(reversed);
    }
}
","str_helloworld = ""Hello World!""

str_hw_splitted = str_helloworld.split("" "")

str_reverse = str_hw_splitted[::-1]

print(str_helloworld, ""-> "", str_reverse[0], str_reverse[1])","Given a string with multiple words, write a function to reverse the order of the words in the string."
source_code_001,gpt-4_00,0.0,"{'ic_id': {0: 71}, 'ica_id': {0: 702}, 'question': {0: 'Given a string with multiple words, write a function to reverse the order of the words in the string.'}, 'rules': {0: []}, 'examples': {0: '""Hello World!"" -> ""World! Hello""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 516}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class ReverseWords {
    public static String reverseWords(String s) {
        String[] words = s.split("" "");
        StringBuilder result = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            result.append(words[i]);
            if (i != 0) {
                result.append("" "");
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String input = ""Hello World!"";
        String reversed = reverseWords(input);
        System.out.println(reversed);
    }
}
","str_helloworld = ""Hello World!""

str_hw_splitted = str_helloworld.split("" "")

str_reverse = str_hw_splitted[::-1]

print(str_helloworld, ""-> "", str_reverse[0], str_reverse[1])","Given a string with multiple words, write a function to reverse the order of the words in the string."
source_code_001,gpt-4_01,0.0,"{'ic_id': {0: 71}, 'ica_id': {0: 702}, 'question': {0: 'Given a string with multiple words, write a function to reverse the order of the words in the string.'}, 'rules': {0: []}, 'examples': {0: '""Hello World!"" -> ""World! Hello""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 516}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class ReverseWords {
    public static String reverseWords(String s) {
        String[] words = s.split("" "");
        StringBuilder result = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            result.append(words[i]);
            if (i != 0) {
                result.append("" "");
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String input = ""Hello World!"";
        String reversed = reverseWords(input);
        System.out.println(reversed);
    }
}
","str_helloworld = ""Hello World!""

str_hw_splitted = str_helloworld.split("" "")

str_reverse = str_hw_splitted[::-1]

print(str_helloworld, ""-> "", str_reverse[0], str_reverse[1])","Given a string with multiple words, write a function to reverse the order of the words in the string."
source_code_001,gpt-4-turbo_00,0.0,"{'ic_id': {0: 71}, 'ica_id': {0: 702}, 'question': {0: 'Given a string with multiple words, write a function to reverse the order of the words in the string.'}, 'rules': {0: []}, 'examples': {0: '""Hello World!"" -> ""World! Hello""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 516}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class ReverseWords {
    public static String reverseWords(String s) {
        String[] words = s.split("" "");
        StringBuilder result = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            result.append(words[i]);
            if (i != 0) {
                result.append("" "");
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String input = ""Hello World!"";
        String reversed = reverseWords(input);
        System.out.println(reversed);
    }
}
","str_helloworld = ""Hello World!""

str_hw_splitted = str_helloworld.split("" "")

str_reverse = str_hw_splitted[::-1]

print(str_helloworld, ""-> "", str_reverse[0], str_reverse[1])","Given a string with multiple words, write a function to reverse the order of the words in the string."
source_code_001,gpt-4-turbo_01,0.0,"{'ic_id': {0: 71}, 'ica_id': {0: 702}, 'question': {0: 'Given a string with multiple words, write a function to reverse the order of the words in the string.'}, 'rules': {0: []}, 'examples': {0: '""Hello World!"" -> ""World! Hello""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 516}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","public class ReverseWords {
    public static String reverseWords(String s) {
        String[] words = s.split("" "");
        StringBuilder result = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            result.append(words[i]);
            if (i != 0) {
                result.append("" "");
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String input = ""Hello World!"";
        String reversed = reverseWords(input);
        System.out.println(reversed);
    }
}
","str_helloworld = ""Hello World!""

str_hw_splitted = str_helloworld.split("" "")

str_reverse = str_hw_splitted[::-1]

print(str_helloworld, ""-> "", str_reverse[0], str_reverse[1])","Given a string with multiple words, write a function to reverse the order of the words in the string."
source_code_002,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 91}, 'ica_id': {0: 737}, 'question': {0: 'Given an array of integers, find the two numbers that appear odd number of times.'}, 'rules': {0: ['You cannot use any built-in functions for counting the occurrences', 'The array will always have at least two numbers that appear odd number of times']}, 'examples': {0: '[1, 2, 3, 2, 1, 3, 5] -> [1, 5]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 708}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","function findOddNumbers(arr) {
    let numCount = {};
    
    arr.forEach(num => {
        if (numCount[num] === undefined) {
            numCount[num] = 1;
        } else {
            numCount[num]++;
        }
    });

    const oddNumbers = [];
    
    for (let key in numCount) {
        if (numCount[key] % 2 !== 0) {
            oddNumbers.push(parseInt(key));
        }
    }
    
    return oddNumbers;
}

const arr = [1, 2, 3, 2, 1, 3, 5];
console.log(findOddNumbers(arr)); // Output: [1, 5]
","// Provided example is incorrect it should return [5] not [1,5]

function findOdd(arr) {
  const map = arr.reduce((_map, next) => {
    _map[next] = _map[next] || 0;
    _map[next] ++;
    return _map;
  }, {});

  const foundNumbers = [];
  Object.keys(map).forEach((key) => {
    const number = parseInt(key);
    const isAppearOddTimes = map[key] % 2 !== 0;
    if (isAppearOddTimes) {
      foundNumbers.push(number);
      if (foundNumbers.length === 2) {
        return foundNumbers;
      }
    }
  })
  return foundNumbers;
  
}","Given an array of integers, find the two numbers that appear odd number of times."
source_code_002,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 91}, 'ica_id': {0: 737}, 'question': {0: 'Given an array of integers, find the two numbers that appear odd number of times.'}, 'rules': {0: ['You cannot use any built-in functions for counting the occurrences', 'The array will always have at least two numbers that appear odd number of times']}, 'examples': {0: '[1, 2, 3, 2, 1, 3, 5] -> [1, 5]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 708}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","function findOddNumbers(arr) {
    let numCount = {};
    
    arr.forEach(num => {
        if (numCount[num] === undefined) {
            numCount[num] = 1;
        } else {
            numCount[num]++;
        }
    });

    const oddNumbers = [];
    
    for (let key in numCount) {
        if (numCount[key] % 2 !== 0) {
            oddNumbers.push(parseInt(key));
        }
    }
    
    return oddNumbers;
}

const arr = [1, 2, 3, 2, 1, 3, 5];
console.log(findOddNumbers(arr)); // Output: [1, 5]
","// Provided example is incorrect it should return [5] not [1,5]

function findOdd(arr) {
  const map = arr.reduce((_map, next) => {
    _map[next] = _map[next] || 0;
    _map[next] ++;
    return _map;
  }, {});

  const foundNumbers = [];
  Object.keys(map).forEach((key) => {
    const number = parseInt(key);
    const isAppearOddTimes = map[key] % 2 !== 0;
    if (isAppearOddTimes) {
      foundNumbers.push(number);
      if (foundNumbers.length === 2) {
        return foundNumbers;
      }
    }
  })
  return foundNumbers;
  
}","Given an array of integers, find the two numbers that appear odd number of times."
source_code_002,gpt-4_00,0.0,"{'ic_id': {0: 91}, 'ica_id': {0: 737}, 'question': {0: 'Given an array of integers, find the two numbers that appear odd number of times.'}, 'rules': {0: ['You cannot use any built-in functions for counting the occurrences', 'The array will always have at least two numbers that appear odd number of times']}, 'examples': {0: '[1, 2, 3, 2, 1, 3, 5] -> [1, 5]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 708}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","function findOddNumbers(arr) {
    let numCount = {};
    
    arr.forEach(num => {
        if (numCount[num] === undefined) {
            numCount[num] = 1;
        } else {
            numCount[num]++;
        }
    });

    const oddNumbers = [];
    
    for (let key in numCount) {
        if (numCount[key] % 2 !== 0) {
            oddNumbers.push(parseInt(key));
        }
    }
    
    return oddNumbers;
}

const arr = [1, 2, 3, 2, 1, 3, 5];
console.log(findOddNumbers(arr)); // Output: [1, 5]
","// Provided example is incorrect it should return [5] not [1,5]

function findOdd(arr) {
  const map = arr.reduce((_map, next) => {
    _map[next] = _map[next] || 0;
    _map[next] ++;
    return _map;
  }, {});

  const foundNumbers = [];
  Object.keys(map).forEach((key) => {
    const number = parseInt(key);
    const isAppearOddTimes = map[key] % 2 !== 0;
    if (isAppearOddTimes) {
      foundNumbers.push(number);
      if (foundNumbers.length === 2) {
        return foundNumbers;
      }
    }
  })
  return foundNumbers;
  
}","Given an array of integers, find the two numbers that appear odd number of times."
source_code_002,gpt-4_01,0.1,"{'ic_id': {0: 91}, 'ica_id': {0: 737}, 'question': {0: 'Given an array of integers, find the two numbers that appear odd number of times.'}, 'rules': {0: ['You cannot use any built-in functions for counting the occurrences', 'The array will always have at least two numbers that appear odd number of times']}, 'examples': {0: '[1, 2, 3, 2, 1, 3, 5] -> [1, 5]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 708}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","function findOddNumbers(arr) {
    let numCount = {};
    
    arr.forEach(num => {
        if (numCount[num] === undefined) {
            numCount[num] = 1;
        } else {
            numCount[num]++;
        }
    });

    const oddNumbers = [];
    
    for (let key in numCount) {
        if (numCount[key] % 2 !== 0) {
            oddNumbers.push(parseInt(key));
        }
    }
    
    return oddNumbers;
}

const arr = [1, 2, 3, 2, 1, 3, 5];
console.log(findOddNumbers(arr)); // Output: [1, 5]
","// Provided example is incorrect it should return [5] not [1,5]

function findOdd(arr) {
  const map = arr.reduce((_map, next) => {
    _map[next] = _map[next] || 0;
    _map[next] ++;
    return _map;
  }, {});

  const foundNumbers = [];
  Object.keys(map).forEach((key) => {
    const number = parseInt(key);
    const isAppearOddTimes = map[key] % 2 !== 0;
    if (isAppearOddTimes) {
      foundNumbers.push(number);
      if (foundNumbers.length === 2) {
        return foundNumbers;
      }
    }
  })
  return foundNumbers;
  
}","Given an array of integers, find the two numbers that appear odd number of times."
source_code_002,gpt-4-turbo_00,0.0,"{'ic_id': {0: 91}, 'ica_id': {0: 737}, 'question': {0: 'Given an array of integers, find the two numbers that appear odd number of times.'}, 'rules': {0: ['You cannot use any built-in functions for counting the occurrences', 'The array will always have at least two numbers that appear odd number of times']}, 'examples': {0: '[1, 2, 3, 2, 1, 3, 5] -> [1, 5]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 708}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","function findOddNumbers(arr) {
    let numCount = {};
    
    arr.forEach(num => {
        if (numCount[num] === undefined) {
            numCount[num] = 1;
        } else {
            numCount[num]++;
        }
    });

    const oddNumbers = [];
    
    for (let key in numCount) {
        if (numCount[key] % 2 !== 0) {
            oddNumbers.push(parseInt(key));
        }
    }
    
    return oddNumbers;
}

const arr = [1, 2, 3, 2, 1, 3, 5];
console.log(findOddNumbers(arr)); // Output: [1, 5]
","// Provided example is incorrect it should return [5] not [1,5]

function findOdd(arr) {
  const map = arr.reduce((_map, next) => {
    _map[next] = _map[next] || 0;
    _map[next] ++;
    return _map;
  }, {});

  const foundNumbers = [];
  Object.keys(map).forEach((key) => {
    const number = parseInt(key);
    const isAppearOddTimes = map[key] % 2 !== 0;
    if (isAppearOddTimes) {
      foundNumbers.push(number);
      if (foundNumbers.length === 2) {
        return foundNumbers;
      }
    }
  })
  return foundNumbers;
  
}","Given an array of integers, find the two numbers that appear odd number of times."
source_code_002,gpt-4-turbo_01,0.0,"{'ic_id': {0: 91}, 'ica_id': {0: 737}, 'question': {0: 'Given an array of integers, find the two numbers that appear odd number of times.'}, 'rules': {0: ['You cannot use any built-in functions for counting the occurrences', 'The array will always have at least two numbers that appear odd number of times']}, 'examples': {0: '[1, 2, 3, 2, 1, 3, 5] -> [1, 5]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 708}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","function findOddNumbers(arr) {
    let numCount = {};
    
    arr.forEach(num => {
        if (numCount[num] === undefined) {
            numCount[num] = 1;
        } else {
            numCount[num]++;
        }
    });

    const oddNumbers = [];
    
    for (let key in numCount) {
        if (numCount[key] % 2 !== 0) {
            oddNumbers.push(parseInt(key));
        }
    }
    
    return oddNumbers;
}

const arr = [1, 2, 3, 2, 1, 3, 5];
console.log(findOddNumbers(arr)); // Output: [1, 5]
","// Provided example is incorrect it should return [5] not [1,5]

function findOdd(arr) {
  const map = arr.reduce((_map, next) => {
    _map[next] = _map[next] || 0;
    _map[next] ++;
    return _map;
  }, {});

  const foundNumbers = [];
  Object.keys(map).forEach((key) => {
    const number = parseInt(key);
    const isAppearOddTimes = map[key] % 2 !== 0;
    if (isAppearOddTimes) {
      foundNumbers.push(number);
      if (foundNumbers.length === 2) {
        return foundNumbers;
      }
    }
  })
  return foundNumbers;
  
}","Given an array of integers, find the two numbers that appear odd number of times."
source_code_003,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 95}, 'ica_id': {0: 819}, 'question': {0: 'You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:\n\n1. Each row contains all numbers from 1 to 9 without repetition\n2. Each column contains all numbers from 1 to 9 without repetition\n3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.\n\nYour function should return a boolean value.'}, 'rules': {0: ['You cannot use any external dependencies or libraries.']}, 'examples': {0: '[""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]"", ""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,1]]""]'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 3600}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","#include <iostream>
#include <vector>
using namespace std;

bool isValidSudoku(vector<vector<int>>& board) {
    vector<vector<bool>> row(9, vector<bool>(9, false));
    vector<vector<bool>> col(9, vector<bool>(9, false));
    vector<vector<bool>> subgrid(9, vector<bool>(9, false));

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == 0) continue;

            int num = board[i][j] - 1;
            int k = (i / 3) * 3 + j / 3;

            if (row[i][num] || col[j][num] || subgrid[k][num]) {
                return false;
            }

            row[i][num] = true;
            col[j][num] = true;
            subgrid[k][num] = true;
        }
    }

    return true;
}

int main() {
    vector<vector<int>> sudoku = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 7, 2, 1, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 8, 7, 4, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    cout << isValidSudoku(sudoku) << endl;

    return 0;
}
","#include <iostream>


using namespace std;

const int rows = 9;
const int columns = 9;

bool isPassedGridIsSudoku(int (*grid)[columns])
{
    int desired_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9;
    int received_sum;
    int isSudoku = true;

    // First condition
    // Loop through all rows

    for (int i = 0; i < rows; i++)
    {
        received_sum = 0;
        // Get specific row and loop through all numbers inside it
        for (int j = 0; j < columns; j++)
        {
           received_sum += grid[i][j];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }
    // Second condition
    // Loop through all columns
    for (int i = 0; i < columns; i++)
    {
        received_sum = 0;
        // Get specific columns and loop through all numbers inside it
        for (int j = 0; j < rows; j++)
        {
           received_sum += grid[j][i];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }

    // Third condition each minor sudoku need to be between 1-9
    for (int i = 0; i < rows; i+=3)
    {
        for (int k = i; k < i+3; k++)
        {
            for (int j = 0; j < columns; j++)
            {
                if (i % 3 == 0 && j % 3 == 0)
                {
                    if (received_sum != desired_sum)
                    {
                        isSudoku = false;
                        break;
                    }
                    // reset
                    received_sum = 0;
                }
                    
                received_sum += grid[k][j];
            }

            if (received_sum != desired_sum)
            {
                isSudoku = false;
                break;
            }
        }
            
    }



    return isSudoku;
}


int main() {

    
    int grid[rows][columns] = {
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
   ","You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:

1. Each row contains all numbers from 1 to 9 without repetition
2. Each column contains all numbers from 1 to 9 without repetition
3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.

Your function should return a boolean value."
source_code_003,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 95}, 'ica_id': {0: 819}, 'question': {0: 'You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:\n\n1. Each row contains all numbers from 1 to 9 without repetition\n2. Each column contains all numbers from 1 to 9 without repetition\n3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.\n\nYour function should return a boolean value.'}, 'rules': {0: ['You cannot use any external dependencies or libraries.']}, 'examples': {0: '[""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]"", ""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,1]]""]'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 3600}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","#include <iostream>
#include <vector>
using namespace std;

bool isValidSudoku(vector<vector<int>>& board) {
    vector<vector<bool>> row(9, vector<bool>(9, false));
    vector<vector<bool>> col(9, vector<bool>(9, false));
    vector<vector<bool>> subgrid(9, vector<bool>(9, false));

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == 0) continue;

            int num = board[i][j] - 1;
            int k = (i / 3) * 3 + j / 3;

            if (row[i][num] || col[j][num] || subgrid[k][num]) {
                return false;
            }

            row[i][num] = true;
            col[j][num] = true;
            subgrid[k][num] = true;
        }
    }

    return true;
}

int main() {
    vector<vector<int>> sudoku = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 7, 2, 1, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 8, 7, 4, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    cout << isValidSudoku(sudoku) << endl;

    return 0;
}
","#include <iostream>


using namespace std;

const int rows = 9;
const int columns = 9;

bool isPassedGridIsSudoku(int (*grid)[columns])
{
    int desired_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9;
    int received_sum;
    int isSudoku = true;

    // First condition
    // Loop through all rows

    for (int i = 0; i < rows; i++)
    {
        received_sum = 0;
        // Get specific row and loop through all numbers inside it
        for (int j = 0; j < columns; j++)
        {
           received_sum += grid[i][j];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }
    // Second condition
    // Loop through all columns
    for (int i = 0; i < columns; i++)
    {
        received_sum = 0;
        // Get specific columns and loop through all numbers inside it
        for (int j = 0; j < rows; j++)
        {
           received_sum += grid[j][i];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }

    // Third condition each minor sudoku need to be between 1-9
    for (int i = 0; i < rows; i+=3)
    {
        for (int k = i; k < i+3; k++)
        {
            for (int j = 0; j < columns; j++)
            {
                if (i % 3 == 0 && j % 3 == 0)
                {
                    if (received_sum != desired_sum)
                    {
                        isSudoku = false;
                        break;
                    }
                    // reset
                    received_sum = 0;
                }
                    
                received_sum += grid[k][j];
            }

            if (received_sum != desired_sum)
            {
                isSudoku = false;
                break;
            }
        }
            
    }



    return isSudoku;
}


int main() {

    
    int grid[rows][columns] = {
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
   ","You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:

1. Each row contains all numbers from 1 to 9 without repetition
2. Each column contains all numbers from 1 to 9 without repetition
3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.

Your function should return a boolean value."
source_code_003,gpt-4_00,0.2,"{'ic_id': {0: 95}, 'ica_id': {0: 819}, 'question': {0: 'You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:\n\n1. Each row contains all numbers from 1 to 9 without repetition\n2. Each column contains all numbers from 1 to 9 without repetition\n3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.\n\nYour function should return a boolean value.'}, 'rules': {0: ['You cannot use any external dependencies or libraries.']}, 'examples': {0: '[""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]"", ""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,1]]""]'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 3600}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","#include <iostream>
#include <vector>
using namespace std;

bool isValidSudoku(vector<vector<int>>& board) {
    vector<vector<bool>> row(9, vector<bool>(9, false));
    vector<vector<bool>> col(9, vector<bool>(9, false));
    vector<vector<bool>> subgrid(9, vector<bool>(9, false));

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == 0) continue;

            int num = board[i][j] - 1;
            int k = (i / 3) * 3 + j / 3;

            if (row[i][num] || col[j][num] || subgrid[k][num]) {
                return false;
            }

            row[i][num] = true;
            col[j][num] = true;
            subgrid[k][num] = true;
        }
    }

    return true;
}

int main() {
    vector<vector<int>> sudoku = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 7, 2, 1, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 8, 7, 4, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    cout << isValidSudoku(sudoku) << endl;

    return 0;
}
","#include <iostream>


using namespace std;

const int rows = 9;
const int columns = 9;

bool isPassedGridIsSudoku(int (*grid)[columns])
{
    int desired_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9;
    int received_sum;
    int isSudoku = true;

    // First condition
    // Loop through all rows

    for (int i = 0; i < rows; i++)
    {
        received_sum = 0;
        // Get specific row and loop through all numbers inside it
        for (int j = 0; j < columns; j++)
        {
           received_sum += grid[i][j];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }
    // Second condition
    // Loop through all columns
    for (int i = 0; i < columns; i++)
    {
        received_sum = 0;
        // Get specific columns and loop through all numbers inside it
        for (int j = 0; j < rows; j++)
        {
           received_sum += grid[j][i];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }

    // Third condition each minor sudoku need to be between 1-9
    for (int i = 0; i < rows; i+=3)
    {
        for (int k = i; k < i+3; k++)
        {
            for (int j = 0; j < columns; j++)
            {
                if (i % 3 == 0 && j % 3 == 0)
                {
                    if (received_sum != desired_sum)
                    {
                        isSudoku = false;
                        break;
                    }
                    // reset
                    received_sum = 0;
                }
                    
                received_sum += grid[k][j];
            }

            if (received_sum != desired_sum)
            {
                isSudoku = false;
                break;
            }
        }
            
    }



    return isSudoku;
}


int main() {

    
    int grid[rows][columns] = {
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
   ","You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:

1. Each row contains all numbers from 1 to 9 without repetition
2. Each column contains all numbers from 1 to 9 without repetition
3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.

Your function should return a boolean value."
source_code_003,gpt-4_01,0.2,"{'ic_id': {0: 95}, 'ica_id': {0: 819}, 'question': {0: 'You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:\n\n1. Each row contains all numbers from 1 to 9 without repetition\n2. Each column contains all numbers from 1 to 9 without repetition\n3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.\n\nYour function should return a boolean value.'}, 'rules': {0: ['You cannot use any external dependencies or libraries.']}, 'examples': {0: '[""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]"", ""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,1]]""]'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 3600}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","#include <iostream>
#include <vector>
using namespace std;

bool isValidSudoku(vector<vector<int>>& board) {
    vector<vector<bool>> row(9, vector<bool>(9, false));
    vector<vector<bool>> col(9, vector<bool>(9, false));
    vector<vector<bool>> subgrid(9, vector<bool>(9, false));

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == 0) continue;

            int num = board[i][j] - 1;
            int k = (i / 3) * 3 + j / 3;

            if (row[i][num] || col[j][num] || subgrid[k][num]) {
                return false;
            }

            row[i][num] = true;
            col[j][num] = true;
            subgrid[k][num] = true;
        }
    }

    return true;
}

int main() {
    vector<vector<int>> sudoku = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 7, 2, 1, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 8, 7, 4, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    cout << isValidSudoku(sudoku) << endl;

    return 0;
}
","#include <iostream>


using namespace std;

const int rows = 9;
const int columns = 9;

bool isPassedGridIsSudoku(int (*grid)[columns])
{
    int desired_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9;
    int received_sum;
    int isSudoku = true;

    // First condition
    // Loop through all rows

    for (int i = 0; i < rows; i++)
    {
        received_sum = 0;
        // Get specific row and loop through all numbers inside it
        for (int j = 0; j < columns; j++)
        {
           received_sum += grid[i][j];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }
    // Second condition
    // Loop through all columns
    for (int i = 0; i < columns; i++)
    {
        received_sum = 0;
        // Get specific columns and loop through all numbers inside it
        for (int j = 0; j < rows; j++)
        {
           received_sum += grid[j][i];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }

    // Third condition each minor sudoku need to be between 1-9
    for (int i = 0; i < rows; i+=3)
    {
        for (int k = i; k < i+3; k++)
        {
            for (int j = 0; j < columns; j++)
            {
                if (i % 3 == 0 && j % 3 == 0)
                {
                    if (received_sum != desired_sum)
                    {
                        isSudoku = false;
                        break;
                    }
                    // reset
                    received_sum = 0;
                }
                    
                received_sum += grid[k][j];
            }

            if (received_sum != desired_sum)
            {
                isSudoku = false;
                break;
            }
        }
            
    }



    return isSudoku;
}


int main() {

    
    int grid[rows][columns] = {
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
   ","You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:

1. Each row contains all numbers from 1 to 9 without repetition
2. Each column contains all numbers from 1 to 9 without repetition
3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.

Your function should return a boolean value."
source_code_003,gpt-4-turbo_00,0.2,"{'ic_id': {0: 95}, 'ica_id': {0: 819}, 'question': {0: 'You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:\n\n1. Each row contains all numbers from 1 to 9 without repetition\n2. Each column contains all numbers from 1 to 9 without repetition\n3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.\n\nYour function should return a boolean value.'}, 'rules': {0: ['You cannot use any external dependencies or libraries.']}, 'examples': {0: '[""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]"", ""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,1]]""]'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 3600}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","#include <iostream>
#include <vector>
using namespace std;

bool isValidSudoku(vector<vector<int>>& board) {
    vector<vector<bool>> row(9, vector<bool>(9, false));
    vector<vector<bool>> col(9, vector<bool>(9, false));
    vector<vector<bool>> subgrid(9, vector<bool>(9, false));

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == 0) continue;

            int num = board[i][j] - 1;
            int k = (i / 3) * 3 + j / 3;

            if (row[i][num] || col[j][num] || subgrid[k][num]) {
                return false;
            }

            row[i][num] = true;
            col[j][num] = true;
            subgrid[k][num] = true;
        }
    }

    return true;
}

int main() {
    vector<vector<int>> sudoku = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 7, 2, 1, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 8, 7, 4, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    cout << isValidSudoku(sudoku) << endl;

    return 0;
}
","#include <iostream>


using namespace std;

const int rows = 9;
const int columns = 9;

bool isPassedGridIsSudoku(int (*grid)[columns])
{
    int desired_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9;
    int received_sum;
    int isSudoku = true;

    // First condition
    // Loop through all rows

    for (int i = 0; i < rows; i++)
    {
        received_sum = 0;
        // Get specific row and loop through all numbers inside it
        for (int j = 0; j < columns; j++)
        {
           received_sum += grid[i][j];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }
    // Second condition
    // Loop through all columns
    for (int i = 0; i < columns; i++)
    {
        received_sum = 0;
        // Get specific columns and loop through all numbers inside it
        for (int j = 0; j < rows; j++)
        {
           received_sum += grid[j][i];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }

    // Third condition each minor sudoku need to be between 1-9
    for (int i = 0; i < rows; i+=3)
    {
        for (int k = i; k < i+3; k++)
        {
            for (int j = 0; j < columns; j++)
            {
                if (i % 3 == 0 && j % 3 == 0)
                {
                    if (received_sum != desired_sum)
                    {
                        isSudoku = false;
                        break;
                    }
                    // reset
                    received_sum = 0;
                }
                    
                received_sum += grid[k][j];
            }

            if (received_sum != desired_sum)
            {
                isSudoku = false;
                break;
            }
        }
            
    }



    return isSudoku;
}


int main() {

    
    int grid[rows][columns] = {
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
   ","You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:

1. Each row contains all numbers from 1 to 9 without repetition
2. Each column contains all numbers from 1 to 9 without repetition
3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.

Your function should return a boolean value."
source_code_003,gpt-4-turbo_01,0.2,"{'ic_id': {0: 95}, 'ica_id': {0: 819}, 'question': {0: 'You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:\n\n1. Each row contains all numbers from 1 to 9 without repetition\n2. Each column contains all numbers from 1 to 9 without repetition\n3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.\n\nYour function should return a boolean value.'}, 'rules': {0: ['You cannot use any external dependencies or libraries.']}, 'examples': {0: '[""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]"", ""[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,1]]""]'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 3600}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","#include <iostream>
#include <vector>
using namespace std;

bool isValidSudoku(vector<vector<int>>& board) {
    vector<vector<bool>> row(9, vector<bool>(9, false));
    vector<vector<bool>> col(9, vector<bool>(9, false));
    vector<vector<bool>> subgrid(9, vector<bool>(9, false));

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == 0) continue;

            int num = board[i][j] - 1;
            int k = (i / 3) * 3 + j / 3;

            if (row[i][num] || col[j][num] || subgrid[k][num]) {
                return false;
            }

            row[i][num] = true;
            col[j][num] = true;
            subgrid[k][num] = true;
        }
    }

    return true;
}

int main() {
    vector<vector<int>> sudoku = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 7, 2, 1, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 8, 7, 4, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    cout << isValidSudoku(sudoku) << endl;

    return 0;
}
","#include <iostream>


using namespace std;

const int rows = 9;
const int columns = 9;

bool isPassedGridIsSudoku(int (*grid)[columns])
{
    int desired_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9;
    int received_sum;
    int isSudoku = true;

    // First condition
    // Loop through all rows

    for (int i = 0; i < rows; i++)
    {
        received_sum = 0;
        // Get specific row and loop through all numbers inside it
        for (int j = 0; j < columns; j++)
        {
           received_sum += grid[i][j];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }
    // Second condition
    // Loop through all columns
    for (int i = 0; i < columns; i++)
    {
        received_sum = 0;
        // Get specific columns and loop through all numbers inside it
        for (int j = 0; j < rows; j++)
        {
           received_sum += grid[j][i];
        }
        if (received_sum != desired_sum)
        {
            isSudoku = false;
            break;
        }
    }

    // Third condition each minor sudoku need to be between 1-9
    for (int i = 0; i < rows; i+=3)
    {
        for (int k = i; k < i+3; k++)
        {
            for (int j = 0; j < columns; j++)
            {
                if (i % 3 == 0 && j % 3 == 0)
                {
                    if (received_sum != desired_sum)
                    {
                        isSudoku = false;
                        break;
                    }
                    // reset
                    received_sum = 0;
                }
                    
                received_sum += grid[k][j];
            }

            if (received_sum != desired_sum)
            {
                isSudoku = false;
                break;
            }
        }
            
    }



    return isSudoku;
}


int main() {

    
    int grid[rows][columns] = {
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
        {1,2,3,4,5,6,7,8,9},
   ","You are given a 9x9 grid filled with numbers from 1 to 9. Your task is to write a function that checks if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:

1. Each row contains all numbers from 1 to 9 without repetition
2. Each column contains all numbers from 1 to 9 without repetition
3. Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 without repetition.

Your function should return a boolean value."
source_code_004,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 138}, 'ica_id': {0: 1258}, 'question': {0: 'Given a string, determine if it is a palindrome.'}, 'rules': {0: ['The input string can contain alphanumeric characters and punctuation marks.', 'Ignore capitalization and whitespace.']}, 'examples': {0: '""racecar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1399}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 300.0}}","function isPalindrome(str) {
    str = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    let left = 0;
    let right = str.length - 1;

    while (left < right) {
        if (str[left] !== str[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
}

// Test cases
console.log(isPalindrome(""racecar"")); // Expected output: true
console.log(isPalindrome(""hello"")); // Expected output: false
","const checkIsPalindrome =(input: string)=>{
  const parsedInput = input.toLowerCase().replace(/[^a-zA-Z0-9\.?!]/g,'');
  const reversedString = parsedInput.split('').reverse().join('');
  return parsedInput === reversedString
}","Given a string, determine if it is a palindrome."
source_code_004,gpt-3.5-turbo_01,0.8,"{'ic_id': {0: 138}, 'ica_id': {0: 1258}, 'question': {0: 'Given a string, determine if it is a palindrome.'}, 'rules': {0: ['The input string can contain alphanumeric characters and punctuation marks.', 'Ignore capitalization and whitespace.']}, 'examples': {0: '""racecar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1399}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 300.0}}","function isPalindrome(str) {
    str = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    let left = 0;
    let right = str.length - 1;

    while (left < right) {
        if (str[left] !== str[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
}

// Test cases
console.log(isPalindrome(""racecar"")); // Expected output: true
console.log(isPalindrome(""hello"")); // Expected output: false
","const checkIsPalindrome =(input: string)=>{
  const parsedInput = input.toLowerCase().replace(/[^a-zA-Z0-9\.?!]/g,'');
  const reversedString = parsedInput.split('').reverse().join('');
  return parsedInput === reversedString
}","Given a string, determine if it is a palindrome."
source_code_004,gpt-4_00,0.9,"{'ic_id': {0: 138}, 'ica_id': {0: 1258}, 'question': {0: 'Given a string, determine if it is a palindrome.'}, 'rules': {0: ['The input string can contain alphanumeric characters and punctuation marks.', 'Ignore capitalization and whitespace.']}, 'examples': {0: '""racecar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1399}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 300.0}}","function isPalindrome(str) {
    str = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    let left = 0;
    let right = str.length - 1;

    while (left < right) {
        if (str[left] !== str[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
}

// Test cases
console.log(isPalindrome(""racecar"")); // Expected output: true
console.log(isPalindrome(""hello"")); // Expected output: false
","const checkIsPalindrome =(input: string)=>{
  const parsedInput = input.toLowerCase().replace(/[^a-zA-Z0-9\.?!]/g,'');
  const reversedString = parsedInput.split('').reverse().join('');
  return parsedInput === reversedString
}","Given a string, determine if it is a palindrome."
source_code_004,gpt-4_01,0.9,"{'ic_id': {0: 138}, 'ica_id': {0: 1258}, 'question': {0: 'Given a string, determine if it is a palindrome.'}, 'rules': {0: ['The input string can contain alphanumeric characters and punctuation marks.', 'Ignore capitalization and whitespace.']}, 'examples': {0: '""racecar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1399}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 300.0}}","function isPalindrome(str) {
    str = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    let left = 0;
    let right = str.length - 1;

    while (left < right) {
        if (str[left] !== str[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
}

// Test cases
console.log(isPalindrome(""racecar"")); // Expected output: true
console.log(isPalindrome(""hello"")); // Expected output: false
","const checkIsPalindrome =(input: string)=>{
  const parsedInput = input.toLowerCase().replace(/[^a-zA-Z0-9\.?!]/g,'');
  const reversedString = parsedInput.split('').reverse().join('');
  return parsedInput === reversedString
}","Given a string, determine if it is a palindrome."
source_code_004,gpt-4-turbo_00,0.4,"{'ic_id': {0: 138}, 'ica_id': {0: 1258}, 'question': {0: 'Given a string, determine if it is a palindrome.'}, 'rules': {0: ['The input string can contain alphanumeric characters and punctuation marks.', 'Ignore capitalization and whitespace.']}, 'examples': {0: '""racecar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1399}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 300.0}}","function isPalindrome(str) {
    str = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    let left = 0;
    let right = str.length - 1;

    while (left < right) {
        if (str[left] !== str[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
}

// Test cases
console.log(isPalindrome(""racecar"")); // Expected output: true
console.log(isPalindrome(""hello"")); // Expected output: false
","const checkIsPalindrome =(input: string)=>{
  const parsedInput = input.toLowerCase().replace(/[^a-zA-Z0-9\.?!]/g,'');
  const reversedString = parsedInput.split('').reverse().join('');
  return parsedInput === reversedString
}","Given a string, determine if it is a palindrome."
source_code_004,gpt-4-turbo_01,0.4,"{'ic_id': {0: 138}, 'ica_id': {0: 1258}, 'question': {0: 'Given a string, determine if it is a palindrome.'}, 'rules': {0: ['The input string can contain alphanumeric characters and punctuation marks.', 'Ignore capitalization and whitespace.']}, 'examples': {0: '""racecar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1399}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 300.0}}","function isPalindrome(str) {
    str = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    let left = 0;
    let right = str.length - 1;

    while (left < right) {
        if (str[left] !== str[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
}

// Test cases
console.log(isPalindrome(""racecar"")); // Expected output: true
console.log(isPalindrome(""hello"")); // Expected output: false
","const checkIsPalindrome =(input: string)=>{
  const parsedInput = input.toLowerCase().replace(/[^a-zA-Z0-9\.?!]/g,'');
  const reversedString = parsedInput.split('').reverse().join('');
  return parsedInput === reversedString
}","Given a string, determine if it is a palindrome."
source_code_005,gpt-3.5-turbo_00,0.4,"{'ic_id': {0: 157}, 'ica_id': {0: 1333}, 'question': {0: ""A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.""}, 'rules': {0: []}, 'examples': {0: 'Input: 7\nOutput: True\n\nInput: 10\nOutput: False'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 164}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):  # Optimized loop until square root of num
        if num % i == 0:
            return False
    return True

# Test cases
print(is_prime(7))  # Output: True
print(is_prime(10))  # Output: False
","def is_prime(number):
    if number <= 1:
        return False  # 1 and all negative numbers are not prime

    if number <= 3:
        return True  # 2 and 3 are prime

    if number % 2 == 0:
        return False  # Even numbers greater than 2 are not prime

    # Check for divisibility by odd numbers from 3 to the square root of the number
    for i in range(3, int(number**0.5) + 1, 2):
        if number % i == 0:
            return False  # The number is divisible by 'i' and hence not prime

    return True  # If no divisors were found, the number is prime

# Test cases
input1 = 7
output1 = is_prime(input1)
print(output1)  # Output: True

input2 = 10
output2 = is_prime(input2)
print(output2)  # Output: False",A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.
source_code_005,gpt-3.5-turbo_01,0.4,"{'ic_id': {0: 157}, 'ica_id': {0: 1333}, 'question': {0: ""A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.""}, 'rules': {0: []}, 'examples': {0: 'Input: 7\nOutput: True\n\nInput: 10\nOutput: False'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 164}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):  # Optimized loop until square root of num
        if num % i == 0:
            return False
    return True

# Test cases
print(is_prime(7))  # Output: True
print(is_prime(10))  # Output: False
","def is_prime(number):
    if number <= 1:
        return False  # 1 and all negative numbers are not prime

    if number <= 3:
        return True  # 2 and 3 are prime

    if number % 2 == 0:
        return False  # Even numbers greater than 2 are not prime

    # Check for divisibility by odd numbers from 3 to the square root of the number
    for i in range(3, int(number**0.5) + 1, 2):
        if number % i == 0:
            return False  # The number is divisible by 'i' and hence not prime

    return True  # If no divisors were found, the number is prime

# Test cases
input1 = 7
output1 = is_prime(input1)
print(output1)  # Output: True

input2 = 10
output2 = is_prime(input2)
print(output2)  # Output: False",A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.
source_code_005,gpt-4_00,0.3,"{'ic_id': {0: 157}, 'ica_id': {0: 1333}, 'question': {0: ""A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.""}, 'rules': {0: []}, 'examples': {0: 'Input: 7\nOutput: True\n\nInput: 10\nOutput: False'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 164}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):  # Optimized loop until square root of num
        if num % i == 0:
            return False
    return True

# Test cases
print(is_prime(7))  # Output: True
print(is_prime(10))  # Output: False
","def is_prime(number):
    if number <= 1:
        return False  # 1 and all negative numbers are not prime

    if number <= 3:
        return True  # 2 and 3 are prime

    if number % 2 == 0:
        return False  # Even numbers greater than 2 are not prime

    # Check for divisibility by odd numbers from 3 to the square root of the number
    for i in range(3, int(number**0.5) + 1, 2):
        if number % i == 0:
            return False  # The number is divisible by 'i' and hence not prime

    return True  # If no divisors were found, the number is prime

# Test cases
input1 = 7
output1 = is_prime(input1)
print(output1)  # Output: True

input2 = 10
output2 = is_prime(input2)
print(output2)  # Output: False",A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.
source_code_005,gpt-4_01,0.3,"{'ic_id': {0: 157}, 'ica_id': {0: 1333}, 'question': {0: ""A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.""}, 'rules': {0: []}, 'examples': {0: 'Input: 7\nOutput: True\n\nInput: 10\nOutput: False'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 164}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):  # Optimized loop until square root of num
        if num % i == 0:
            return False
    return True

# Test cases
print(is_prime(7))  # Output: True
print(is_prime(10))  # Output: False
","def is_prime(number):
    if number <= 1:
        return False  # 1 and all negative numbers are not prime

    if number <= 3:
        return True  # 2 and 3 are prime

    if number % 2 == 0:
        return False  # Even numbers greater than 2 are not prime

    # Check for divisibility by odd numbers from 3 to the square root of the number
    for i in range(3, int(number**0.5) + 1, 2):
        if number % i == 0:
            return False  # The number is divisible by 'i' and hence not prime

    return True  # If no divisors were found, the number is prime

# Test cases
input1 = 7
output1 = is_prime(input1)
print(output1)  # Output: True

input2 = 10
output2 = is_prime(input2)
print(output2)  # Output: False",A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.
source_code_005,gpt-4-turbo_00,0.3,"{'ic_id': {0: 157}, 'ica_id': {0: 1333}, 'question': {0: ""A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.""}, 'rules': {0: []}, 'examples': {0: 'Input: 7\nOutput: True\n\nInput: 10\nOutput: False'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 164}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):  # Optimized loop until square root of num
        if num % i == 0:
            return False
    return True

# Test cases
print(is_prime(7))  # Output: True
print(is_prime(10))  # Output: False
","def is_prime(number):
    if number <= 1:
        return False  # 1 and all negative numbers are not prime

    if number <= 3:
        return True  # 2 and 3 are prime

    if number % 2 == 0:
        return False  # Even numbers greater than 2 are not prime

    # Check for divisibility by odd numbers from 3 to the square root of the number
    for i in range(3, int(number**0.5) + 1, 2):
        if number % i == 0:
            return False  # The number is divisible by 'i' and hence not prime

    return True  # If no divisors were found, the number is prime

# Test cases
input1 = 7
output1 = is_prime(input1)
print(output1)  # Output: True

input2 = 10
output2 = is_prime(input2)
print(output2)  # Output: False",A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.
source_code_005,gpt-4-turbo_01,0.4,"{'ic_id': {0: 157}, 'ica_id': {0: 1333}, 'question': {0: ""A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.""}, 'rules': {0: []}, 'examples': {0: 'Input: 7\nOutput: True\n\nInput: 10\nOutput: False'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 164}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):  # Optimized loop until square root of num
        if num % i == 0:
            return False
    return True

# Test cases
print(is_prime(7))  # Output: True
print(is_prime(10))  # Output: False
","def is_prime(number):
    if number <= 1:
        return False  # 1 and all negative numbers are not prime

    if number <= 3:
        return True  # 2 and 3 are prime

    if number % 2 == 0:
        return False  # Even numbers greater than 2 are not prime

    # Check for divisibility by odd numbers from 3 to the square root of the number
    for i in range(3, int(number**0.5) + 1, 2):
        if number % i == 0:
            return False  # The number is divisible by 'i' and hence not prime

    return True  # If no divisors were found, the number is prime

# Test cases
input1 = 7
output1 = is_prime(input1)
print(output1)  # Output: True

input2 = 10
output2 = is_prime(input2)
print(output2)  # Output: False",A number is called a prime if it's divisible only by 1 and itself. Write a program to check whether a given number is prime or not.
source_code_006,gpt-3.5-turbo_00,0.3,"{'ic_id': {0: 144}, 'ica_id': {0: 1460}, 'question': {0: 'Given an array of integers, find the longest increasing subarray.'}, 'rules': {0: []}, 'examples': {0: 'Input: [1, 2, 3, 2, 1], Expected Output: [1, 2, 3]'}, 'programming_language': {0: 'Swift'}, 'response_time': {0: 1540}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","func longestIncreasingSubarray(_ nums: [Int]) -> [Int] {
    var start = 0
    var maxLength = 0
    var currentLength = 1
    
    for i in 1..<nums.count {
        if nums[i] > nums[i - 1] {
            currentLength += 1
        } else {
            // Reset currentLength when decreasing or equal
            currentLength = 1
        }
        
        if currentLength > maxLength {
            maxLength = currentLength
            start = i - currentLength + 1
        }
    }
    
    return Array(nums[start..<start+maxLength])
}

let input = [1, 2, 3, 2, 1]
let result = longestIncreasingSubarray(input)
print(result)  // Output: [1, 2, 3]
","func findLongestSubArry(array: [Int]) -> [Int] {
        var finalStart = 0
        var finalCount = 0
        for i in 0..<array.count - 1{
            var start = 0
            var count = 0
            let index = i+1
            for j in index..<array.count {
                
                if(array[i] < array[j]) {
                    start = i
                    count = count + 1
                }
            }
            if(finalCount < count) {
                finalStart = start
                finalCount = count
            }
        }
        if(finalCount > 0) {
            var sub: [Int] = [Int]()
            let end = finalStart + finalCount
            for k in finalStart..<end {
                sub.append(array[k])
            }
            return sub
        }
        return []
    }","Given an array of integers, find the longest increasing subarray."
source_code_006,gpt-3.5-turbo_01,0.3,"{'ic_id': {0: 144}, 'ica_id': {0: 1460}, 'question': {0: 'Given an array of integers, find the longest increasing subarray.'}, 'rules': {0: []}, 'examples': {0: 'Input: [1, 2, 3, 2, 1], Expected Output: [1, 2, 3]'}, 'programming_language': {0: 'Swift'}, 'response_time': {0: 1540}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","func longestIncreasingSubarray(_ nums: [Int]) -> [Int] {
    var start = 0
    var maxLength = 0
    var currentLength = 1
    
    for i in 1..<nums.count {
        if nums[i] > nums[i - 1] {
            currentLength += 1
        } else {
            // Reset currentLength when decreasing or equal
            currentLength = 1
        }
        
        if currentLength > maxLength {
            maxLength = currentLength
            start = i - currentLength + 1
        }
    }
    
    return Array(nums[start..<start+maxLength])
}

let input = [1, 2, 3, 2, 1]
let result = longestIncreasingSubarray(input)
print(result)  // Output: [1, 2, 3]
","func findLongestSubArry(array: [Int]) -> [Int] {
        var finalStart = 0
        var finalCount = 0
        for i in 0..<array.count - 1{
            var start = 0
            var count = 0
            let index = i+1
            for j in index..<array.count {
                
                if(array[i] < array[j]) {
                    start = i
                    count = count + 1
                }
            }
            if(finalCount < count) {
                finalStart = start
                finalCount = count
            }
        }
        if(finalCount > 0) {
            var sub: [Int] = [Int]()
            let end = finalStart + finalCount
            for k in finalStart..<end {
                sub.append(array[k])
            }
            return sub
        }
        return []
    }","Given an array of integers, find the longest increasing subarray."
source_code_006,gpt-4_00,0.3,"{'ic_id': {0: 144}, 'ica_id': {0: 1460}, 'question': {0: 'Given an array of integers, find the longest increasing subarray.'}, 'rules': {0: []}, 'examples': {0: 'Input: [1, 2, 3, 2, 1], Expected Output: [1, 2, 3]'}, 'programming_language': {0: 'Swift'}, 'response_time': {0: 1540}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","func longestIncreasingSubarray(_ nums: [Int]) -> [Int] {
    var start = 0
    var maxLength = 0
    var currentLength = 1
    
    for i in 1..<nums.count {
        if nums[i] > nums[i - 1] {
            currentLength += 1
        } else {
            // Reset currentLength when decreasing or equal
            currentLength = 1
        }
        
        if currentLength > maxLength {
            maxLength = currentLength
            start = i - currentLength + 1
        }
    }
    
    return Array(nums[start..<start+maxLength])
}

let input = [1, 2, 3, 2, 1]
let result = longestIncreasingSubarray(input)
print(result)  // Output: [1, 2, 3]
","func findLongestSubArry(array: [Int]) -> [Int] {
        var finalStart = 0
        var finalCount = 0
        for i in 0..<array.count - 1{
            var start = 0
            var count = 0
            let index = i+1
            for j in index..<array.count {
                
                if(array[i] < array[j]) {
                    start = i
                    count = count + 1
                }
            }
            if(finalCount < count) {
                finalStart = start
                finalCount = count
            }
        }
        if(finalCount > 0) {
            var sub: [Int] = [Int]()
            let end = finalStart + finalCount
            for k in finalStart..<end {
                sub.append(array[k])
            }
            return sub
        }
        return []
    }","Given an array of integers, find the longest increasing subarray."
source_code_006,gpt-4_01,0.3,"{'ic_id': {0: 144}, 'ica_id': {0: 1460}, 'question': {0: 'Given an array of integers, find the longest increasing subarray.'}, 'rules': {0: []}, 'examples': {0: 'Input: [1, 2, 3, 2, 1], Expected Output: [1, 2, 3]'}, 'programming_language': {0: 'Swift'}, 'response_time': {0: 1540}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","func longestIncreasingSubarray(_ nums: [Int]) -> [Int] {
    var start = 0
    var maxLength = 0
    var currentLength = 1
    
    for i in 1..<nums.count {
        if nums[i] > nums[i - 1] {
            currentLength += 1
        } else {
            // Reset currentLength when decreasing or equal
            currentLength = 1
        }
        
        if currentLength > maxLength {
            maxLength = currentLength
            start = i - currentLength + 1
        }
    }
    
    return Array(nums[start..<start+maxLength])
}

let input = [1, 2, 3, 2, 1]
let result = longestIncreasingSubarray(input)
print(result)  // Output: [1, 2, 3]
","func findLongestSubArry(array: [Int]) -> [Int] {
        var finalStart = 0
        var finalCount = 0
        for i in 0..<array.count - 1{
            var start = 0
            var count = 0
            let index = i+1
            for j in index..<array.count {
                
                if(array[i] < array[j]) {
                    start = i
                    count = count + 1
                }
            }
            if(finalCount < count) {
                finalStart = start
                finalCount = count
            }
        }
        if(finalCount > 0) {
            var sub: [Int] = [Int]()
            let end = finalStart + finalCount
            for k in finalStart..<end {
                sub.append(array[k])
            }
            return sub
        }
        return []
    }","Given an array of integers, find the longest increasing subarray."
source_code_006,gpt-4-turbo_00,0.3,"{'ic_id': {0: 144}, 'ica_id': {0: 1460}, 'question': {0: 'Given an array of integers, find the longest increasing subarray.'}, 'rules': {0: []}, 'examples': {0: 'Input: [1, 2, 3, 2, 1], Expected Output: [1, 2, 3]'}, 'programming_language': {0: 'Swift'}, 'response_time': {0: 1540}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","func longestIncreasingSubarray(_ nums: [Int]) -> [Int] {
    var start = 0
    var maxLength = 0
    var currentLength = 1
    
    for i in 1..<nums.count {
        if nums[i] > nums[i - 1] {
            currentLength += 1
        } else {
            // Reset currentLength when decreasing or equal
            currentLength = 1
        }
        
        if currentLength > maxLength {
            maxLength = currentLength
            start = i - currentLength + 1
        }
    }
    
    return Array(nums[start..<start+maxLength])
}

let input = [1, 2, 3, 2, 1]
let result = longestIncreasingSubarray(input)
print(result)  // Output: [1, 2, 3]
","func findLongestSubArry(array: [Int]) -> [Int] {
        var finalStart = 0
        var finalCount = 0
        for i in 0..<array.count - 1{
            var start = 0
            var count = 0
            let index = i+1
            for j in index..<array.count {
                
                if(array[i] < array[j]) {
                    start = i
                    count = count + 1
                }
            }
            if(finalCount < count) {
                finalStart = start
                finalCount = count
            }
        }
        if(finalCount > 0) {
            var sub: [Int] = [Int]()
            let end = finalStart + finalCount
            for k in finalStart..<end {
                sub.append(array[k])
            }
            return sub
        }
        return []
    }","Given an array of integers, find the longest increasing subarray."
source_code_006,gpt-4-turbo_01,0.3,"{'ic_id': {0: 144}, 'ica_id': {0: 1460}, 'question': {0: 'Given an array of integers, find the longest increasing subarray.'}, 'rules': {0: []}, 'examples': {0: 'Input: [1, 2, 3, 2, 1], Expected Output: [1, 2, 3]'}, 'programming_language': {0: 'Swift'}, 'response_time': {0: 1540}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","func longestIncreasingSubarray(_ nums: [Int]) -> [Int] {
    var start = 0
    var maxLength = 0
    var currentLength = 1
    
    for i in 1..<nums.count {
        if nums[i] > nums[i - 1] {
            currentLength += 1
        } else {
            // Reset currentLength when decreasing or equal
            currentLength = 1
        }
        
        if currentLength > maxLength {
            maxLength = currentLength
            start = i - currentLength + 1
        }
    }
    
    return Array(nums[start..<start+maxLength])
}

let input = [1, 2, 3, 2, 1]
let result = longestIncreasingSubarray(input)
print(result)  // Output: [1, 2, 3]
","func findLongestSubArry(array: [Int]) -> [Int] {
        var finalStart = 0
        var finalCount = 0
        for i in 0..<array.count - 1{
            var start = 0
            var count = 0
            let index = i+1
            for j in index..<array.count {
                
                if(array[i] < array[j]) {
                    start = i
                    count = count + 1
                }
            }
            if(finalCount < count) {
                finalStart = start
                finalCount = count
            }
        }
        if(finalCount > 0) {
            var sub: [Int] = [Int]()
            let end = finalStart + finalCount
            for k in finalStart..<end {
                sub.append(array[k])
            }
            return sub
        }
        return []
    }","Given an array of integers, find the longest increasing subarray."
source_code_007,gpt-3.5-turbo_00,0.9,"{'ic_id': {0: 139}, 'ica_id': {0: 1479}, 'question': {0: 'Write a program that checks whether a given number is prime or not.'}, 'rules': {0: ['The solution should implement the Sieve of Eratosthenes algorithm.']}, 'examples': {0: 'Input: 7, Output: true\nInput: 12, Output: false'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 1779}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","public class PrimeChecker {
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        
        boolean[] prime = new boolean[num + 1];
        for (int i = 2; i <= num; i++) {
            prime[i] = true;
        }
        
        for (int p = 2; p * p <= num; p++) {
            if (prime[p]) {
                for (int i = p * p; i <= num; i += p) {
                    prime[i] = false;
                }
            }
        }
        
        return prime[num];
    }

    public static void main(String[] args) {
        int input1 = 7;
        int input2 = 12;

        System.out.println(""Input: "" + input1 + "", Output: "" + isPrime(input1));
        System.out.println(""Input: "" + input2 + "", Output: "" + isPrime(input2));
    }
}
","static boolean sieveOfEratosthenes(int checkNumber) {
  if (checkNumber == 0 || checkNumber == 1) return false;

  boolean prime[] = new boolean[checkNumber+1];
  for(int i = 1; i <= checkNumber; i++) 
    prime[i] = true;

  for(int j = 2; j*j <= checkNumber; j++){
    if(prime[j]) {
      for(int i = j*j; i <= checkNumber; i+=j) {
        prime[i] = false;
      }
    }
  }
  return prime[checkNumber];
}

public static void main(String[] args) {
  int checkNumber = 7;
  System.out.println(sieveOfEratosthenes(checkNumber));
}",Write a program that checks whether a given number is prime or not.
source_code_007,gpt-3.5-turbo_01,0.9,"{'ic_id': {0: 139}, 'ica_id': {0: 1479}, 'question': {0: 'Write a program that checks whether a given number is prime or not.'}, 'rules': {0: ['The solution should implement the Sieve of Eratosthenes algorithm.']}, 'examples': {0: 'Input: 7, Output: true\nInput: 12, Output: false'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 1779}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","public class PrimeChecker {
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        
        boolean[] prime = new boolean[num + 1];
        for (int i = 2; i <= num; i++) {
            prime[i] = true;
        }
        
        for (int p = 2; p * p <= num; p++) {
            if (prime[p]) {
                for (int i = p * p; i <= num; i += p) {
                    prime[i] = false;
                }
            }
        }
        
        return prime[num];
    }

    public static void main(String[] args) {
        int input1 = 7;
        int input2 = 12;

        System.out.println(""Input: "" + input1 + "", Output: "" + isPrime(input1));
        System.out.println(""Input: "" + input2 + "", Output: "" + isPrime(input2));
    }
}
","static boolean sieveOfEratosthenes(int checkNumber) {
  if (checkNumber == 0 || checkNumber == 1) return false;

  boolean prime[] = new boolean[checkNumber+1];
  for(int i = 1; i <= checkNumber; i++) 
    prime[i] = true;

  for(int j = 2; j*j <= checkNumber; j++){
    if(prime[j]) {
      for(int i = j*j; i <= checkNumber; i+=j) {
        prime[i] = false;
      }
    }
  }
  return prime[checkNumber];
}

public static void main(String[] args) {
  int checkNumber = 7;
  System.out.println(sieveOfEratosthenes(checkNumber));
}",Write a program that checks whether a given number is prime or not.
source_code_007,gpt-4_00,0.9,"{'ic_id': {0: 139}, 'ica_id': {0: 1479}, 'question': {0: 'Write a program that checks whether a given number is prime or not.'}, 'rules': {0: ['The solution should implement the Sieve of Eratosthenes algorithm.']}, 'examples': {0: 'Input: 7, Output: true\nInput: 12, Output: false'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 1779}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","public class PrimeChecker {
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        
        boolean[] prime = new boolean[num + 1];
        for (int i = 2; i <= num; i++) {
            prime[i] = true;
        }
        
        for (int p = 2; p * p <= num; p++) {
            if (prime[p]) {
                for (int i = p * p; i <= num; i += p) {
                    prime[i] = false;
                }
            }
        }
        
        return prime[num];
    }

    public static void main(String[] args) {
        int input1 = 7;
        int input2 = 12;

        System.out.println(""Input: "" + input1 + "", Output: "" + isPrime(input1));
        System.out.println(""Input: "" + input2 + "", Output: "" + isPrime(input2));
    }
}
","static boolean sieveOfEratosthenes(int checkNumber) {
  if (checkNumber == 0 || checkNumber == 1) return false;

  boolean prime[] = new boolean[checkNumber+1];
  for(int i = 1; i <= checkNumber; i++) 
    prime[i] = true;

  for(int j = 2; j*j <= checkNumber; j++){
    if(prime[j]) {
      for(int i = j*j; i <= checkNumber; i+=j) {
        prime[i] = false;
      }
    }
  }
  return prime[checkNumber];
}

public static void main(String[] args) {
  int checkNumber = 7;
  System.out.println(sieveOfEratosthenes(checkNumber));
}",Write a program that checks whether a given number is prime or not.
source_code_007,gpt-4_01,0.8,"{'ic_id': {0: 139}, 'ica_id': {0: 1479}, 'question': {0: 'Write a program that checks whether a given number is prime or not.'}, 'rules': {0: ['The solution should implement the Sieve of Eratosthenes algorithm.']}, 'examples': {0: 'Input: 7, Output: true\nInput: 12, Output: false'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 1779}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","public class PrimeChecker {
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        
        boolean[] prime = new boolean[num + 1];
        for (int i = 2; i <= num; i++) {
            prime[i] = true;
        }
        
        for (int p = 2; p * p <= num; p++) {
            if (prime[p]) {
                for (int i = p * p; i <= num; i += p) {
                    prime[i] = false;
                }
            }
        }
        
        return prime[num];
    }

    public static void main(String[] args) {
        int input1 = 7;
        int input2 = 12;

        System.out.println(""Input: "" + input1 + "", Output: "" + isPrime(input1));
        System.out.println(""Input: "" + input2 + "", Output: "" + isPrime(input2));
    }
}
","static boolean sieveOfEratosthenes(int checkNumber) {
  if (checkNumber == 0 || checkNumber == 1) return false;

  boolean prime[] = new boolean[checkNumber+1];
  for(int i = 1; i <= checkNumber; i++) 
    prime[i] = true;

  for(int j = 2; j*j <= checkNumber; j++){
    if(prime[j]) {
      for(int i = j*j; i <= checkNumber; i+=j) {
        prime[i] = false;
      }
    }
  }
  return prime[checkNumber];
}

public static void main(String[] args) {
  int checkNumber = 7;
  System.out.println(sieveOfEratosthenes(checkNumber));
}",Write a program that checks whether a given number is prime or not.
source_code_007,gpt-4-turbo_00,0.8,"{'ic_id': {0: 139}, 'ica_id': {0: 1479}, 'question': {0: 'Write a program that checks whether a given number is prime or not.'}, 'rules': {0: ['The solution should implement the Sieve of Eratosthenes algorithm.']}, 'examples': {0: 'Input: 7, Output: true\nInput: 12, Output: false'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 1779}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","public class PrimeChecker {
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        
        boolean[] prime = new boolean[num + 1];
        for (int i = 2; i <= num; i++) {
            prime[i] = true;
        }
        
        for (int p = 2; p * p <= num; p++) {
            if (prime[p]) {
                for (int i = p * p; i <= num; i += p) {
                    prime[i] = false;
                }
            }
        }
        
        return prime[num];
    }

    public static void main(String[] args) {
        int input1 = 7;
        int input2 = 12;

        System.out.println(""Input: "" + input1 + "", Output: "" + isPrime(input1));
        System.out.println(""Input: "" + input2 + "", Output: "" + isPrime(input2));
    }
}
","static boolean sieveOfEratosthenes(int checkNumber) {
  if (checkNumber == 0 || checkNumber == 1) return false;

  boolean prime[] = new boolean[checkNumber+1];
  for(int i = 1; i <= checkNumber; i++) 
    prime[i] = true;

  for(int j = 2; j*j <= checkNumber; j++){
    if(prime[j]) {
      for(int i = j*j; i <= checkNumber; i+=j) {
        prime[i] = false;
      }
    }
  }
  return prime[checkNumber];
}

public static void main(String[] args) {
  int checkNumber = 7;
  System.out.println(sieveOfEratosthenes(checkNumber));
}",Write a program that checks whether a given number is prime or not.
source_code_007,gpt-4-turbo_01,0.8,"{'ic_id': {0: 139}, 'ica_id': {0: 1479}, 'question': {0: 'Write a program that checks whether a given number is prime or not.'}, 'rules': {0: ['The solution should implement the Sieve of Eratosthenes algorithm.']}, 'examples': {0: 'Input: 7, Output: true\nInput: 12, Output: false'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 1779}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","public class PrimeChecker {
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        
        boolean[] prime = new boolean[num + 1];
        for (int i = 2; i <= num; i++) {
            prime[i] = true;
        }
        
        for (int p = 2; p * p <= num; p++) {
            if (prime[p]) {
                for (int i = p * p; i <= num; i += p) {
                    prime[i] = false;
                }
            }
        }
        
        return prime[num];
    }

    public static void main(String[] args) {
        int input1 = 7;
        int input2 = 12;

        System.out.println(""Input: "" + input1 + "", Output: "" + isPrime(input1));
        System.out.println(""Input: "" + input2 + "", Output: "" + isPrime(input2));
    }
}
","static boolean sieveOfEratosthenes(int checkNumber) {
  if (checkNumber == 0 || checkNumber == 1) return false;

  boolean prime[] = new boolean[checkNumber+1];
  for(int i = 1; i <= checkNumber; i++) 
    prime[i] = true;

  for(int j = 2; j*j <= checkNumber; j++){
    if(prime[j]) {
      for(int i = j*j; i <= checkNumber; i+=j) {
        prime[i] = false;
      }
    }
  }
  return prime[checkNumber];
}

public static void main(String[] args) {
  int checkNumber = 7;
  System.out.println(sieveOfEratosthenes(checkNumber));
}",Write a program that checks whether a given number is prime or not.
source_code_008,gpt-3.5-turbo_00,0.7,"{'ic_id': {0: 148}, 'ica_id': {0: 1521}, 'question': {0: 'Given an array of numbers, find the maximum number in the array.'}, 'rules': {0: []}, 'examples': {0: '- input: [1, 5, 9, 3, 7]\n  output: 9\n\n- input: [-2, 0, -5, -1]\n  output: 0'}, 'programming_language': {0: 'React'}, 'response_time': {0: 310}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import React from 'react';

class MaxNumberFinder extends React.Component {
  findMaxNumber = (numbers) => {
    if (numbers.length === 0) {
      return null; // Handle case where array is empty
    }

    let maxNumber = numbers[0];
    for (let i = 1; i < numbers.length; i++) {
      if (numbers[i] > maxNumber) {
        maxNumber = numbers[i];
      }
    }

    return maxNumber;
  }

  render() {
    const numbers1 = [1, 5, 9, 3, 7];
    const numbers2 = [-2, 0, -5, -1];

    const maxNumber1 = this.findMaxNumber(numbers1);
    const maxNumber2 = this.findMaxNumber(numbers2);

    return (
      <div>
        <p>- input: {JSON.stringify(numbers1)}</p>
        <p>output: {maxNumber1}</p>
        <br />
        <p>- input: {JSON.stringify(numbers2)}</p>
        <p>output: {maxNumber2}</p>
      </div>
    );
  }
}
","function findMaxInArray(arr){
 let max = arr[0];
 for(let i=1; i<=arr.length; i++){
   if(a[i]>max){
   max = a[i]
   }
 }
 return max;
}","Given an array of numbers, find the maximum number in the array."
source_code_008,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 148}, 'ica_id': {0: 1521}, 'question': {0: 'Given an array of numbers, find the maximum number in the array.'}, 'rules': {0: []}, 'examples': {0: '- input: [1, 5, 9, 3, 7]\n  output: 9\n\n- input: [-2, 0, -5, -1]\n  output: 0'}, 'programming_language': {0: 'React'}, 'response_time': {0: 310}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import React from 'react';

class MaxNumberFinder extends React.Component {
  findMaxNumber = (numbers) => {
    if (numbers.length === 0) {
      return null; // Handle case where array is empty
    }

    let maxNumber = numbers[0];
    for (let i = 1; i < numbers.length; i++) {
      if (numbers[i] > maxNumber) {
        maxNumber = numbers[i];
      }
    }

    return maxNumber;
  }

  render() {
    const numbers1 = [1, 5, 9, 3, 7];
    const numbers2 = [-2, 0, -5, -1];

    const maxNumber1 = this.findMaxNumber(numbers1);
    const maxNumber2 = this.findMaxNumber(numbers2);

    return (
      <div>
        <p>- input: {JSON.stringify(numbers1)}</p>
        <p>output: {maxNumber1}</p>
        <br />
        <p>- input: {JSON.stringify(numbers2)}</p>
        <p>output: {maxNumber2}</p>
      </div>
    );
  }
}
","function findMaxInArray(arr){
 let max = arr[0];
 for(let i=1; i<=arr.length; i++){
   if(a[i]>max){
   max = a[i]
   }
 }
 return max;
}","Given an array of numbers, find the maximum number in the array."
source_code_008,gpt-4_00,0.1,"{'ic_id': {0: 148}, 'ica_id': {0: 1521}, 'question': {0: 'Given an array of numbers, find the maximum number in the array.'}, 'rules': {0: []}, 'examples': {0: '- input: [1, 5, 9, 3, 7]\n  output: 9\n\n- input: [-2, 0, -5, -1]\n  output: 0'}, 'programming_language': {0: 'React'}, 'response_time': {0: 310}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import React from 'react';

class MaxNumberFinder extends React.Component {
  findMaxNumber = (numbers) => {
    if (numbers.length === 0) {
      return null; // Handle case where array is empty
    }

    let maxNumber = numbers[0];
    for (let i = 1; i < numbers.length; i++) {
      if (numbers[i] > maxNumber) {
        maxNumber = numbers[i];
      }
    }

    return maxNumber;
  }

  render() {
    const numbers1 = [1, 5, 9, 3, 7];
    const numbers2 = [-2, 0, -5, -1];

    const maxNumber1 = this.findMaxNumber(numbers1);
    const maxNumber2 = this.findMaxNumber(numbers2);

    return (
      <div>
        <p>- input: {JSON.stringify(numbers1)}</p>
        <p>output: {maxNumber1}</p>
        <br />
        <p>- input: {JSON.stringify(numbers2)}</p>
        <p>output: {maxNumber2}</p>
      </div>
    );
  }
}
","function findMaxInArray(arr){
 let max = arr[0];
 for(let i=1; i<=arr.length; i++){
   if(a[i]>max){
   max = a[i]
   }
 }
 return max;
}","Given an array of numbers, find the maximum number in the array."
source_code_008,gpt-4_01,0.1,"{'ic_id': {0: 148}, 'ica_id': {0: 1521}, 'question': {0: 'Given an array of numbers, find the maximum number in the array.'}, 'rules': {0: []}, 'examples': {0: '- input: [1, 5, 9, 3, 7]\n  output: 9\n\n- input: [-2, 0, -5, -1]\n  output: 0'}, 'programming_language': {0: 'React'}, 'response_time': {0: 310}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import React from 'react';

class MaxNumberFinder extends React.Component {
  findMaxNumber = (numbers) => {
    if (numbers.length === 0) {
      return null; // Handle case where array is empty
    }

    let maxNumber = numbers[0];
    for (let i = 1; i < numbers.length; i++) {
      if (numbers[i] > maxNumber) {
        maxNumber = numbers[i];
      }
    }

    return maxNumber;
  }

  render() {
    const numbers1 = [1, 5, 9, 3, 7];
    const numbers2 = [-2, 0, -5, -1];

    const maxNumber1 = this.findMaxNumber(numbers1);
    const maxNumber2 = this.findMaxNumber(numbers2);

    return (
      <div>
        <p>- input: {JSON.stringify(numbers1)}</p>
        <p>output: {maxNumber1}</p>
        <br />
        <p>- input: {JSON.stringify(numbers2)}</p>
        <p>output: {maxNumber2}</p>
      </div>
    );
  }
}
","function findMaxInArray(arr){
 let max = arr[0];
 for(let i=1; i<=arr.length; i++){
   if(a[i]>max){
   max = a[i]
   }
 }
 return max;
}","Given an array of numbers, find the maximum number in the array."
source_code_008,gpt-4-turbo_00,0.1,"{'ic_id': {0: 148}, 'ica_id': {0: 1521}, 'question': {0: 'Given an array of numbers, find the maximum number in the array.'}, 'rules': {0: []}, 'examples': {0: '- input: [1, 5, 9, 3, 7]\n  output: 9\n\n- input: [-2, 0, -5, -1]\n  output: 0'}, 'programming_language': {0: 'React'}, 'response_time': {0: 310}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import React from 'react';

class MaxNumberFinder extends React.Component {
  findMaxNumber = (numbers) => {
    if (numbers.length === 0) {
      return null; // Handle case where array is empty
    }

    let maxNumber = numbers[0];
    for (let i = 1; i < numbers.length; i++) {
      if (numbers[i] > maxNumber) {
        maxNumber = numbers[i];
      }
    }

    return maxNumber;
  }

  render() {
    const numbers1 = [1, 5, 9, 3, 7];
    const numbers2 = [-2, 0, -5, -1];

    const maxNumber1 = this.findMaxNumber(numbers1);
    const maxNumber2 = this.findMaxNumber(numbers2);

    return (
      <div>
        <p>- input: {JSON.stringify(numbers1)}</p>
        <p>output: {maxNumber1}</p>
        <br />
        <p>- input: {JSON.stringify(numbers2)}</p>
        <p>output: {maxNumber2}</p>
      </div>
    );
  }
}
","function findMaxInArray(arr){
 let max = arr[0];
 for(let i=1; i<=arr.length; i++){
   if(a[i]>max){
   max = a[i]
   }
 }
 return max;
}","Given an array of numbers, find the maximum number in the array."
source_code_008,gpt-4-turbo_01,0.1,"{'ic_id': {0: 148}, 'ica_id': {0: 1521}, 'question': {0: 'Given an array of numbers, find the maximum number in the array.'}, 'rules': {0: []}, 'examples': {0: '- input: [1, 5, 9, 3, 7]\n  output: 9\n\n- input: [-2, 0, -5, -1]\n  output: 0'}, 'programming_language': {0: 'React'}, 'response_time': {0: 310}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import React from 'react';

class MaxNumberFinder extends React.Component {
  findMaxNumber = (numbers) => {
    if (numbers.length === 0) {
      return null; // Handle case where array is empty
    }

    let maxNumber = numbers[0];
    for (let i = 1; i < numbers.length; i++) {
      if (numbers[i] > maxNumber) {
        maxNumber = numbers[i];
      }
    }

    return maxNumber;
  }

  render() {
    const numbers1 = [1, 5, 9, 3, 7];
    const numbers2 = [-2, 0, -5, -1];

    const maxNumber1 = this.findMaxNumber(numbers1);
    const maxNumber2 = this.findMaxNumber(numbers2);

    return (
      <div>
        <p>- input: {JSON.stringify(numbers1)}</p>
        <p>output: {maxNumber1}</p>
        <br />
        <p>- input: {JSON.stringify(numbers2)}</p>
        <p>output: {maxNumber2}</p>
      </div>
    );
  }
}
","function findMaxInArray(arr){
 let max = arr[0];
 for(let i=1; i<=arr.length; i++){
   if(a[i]>max){
   max = a[i]
   }
 }
 return max;
}","Given an array of numbers, find the maximum number in the array."
source_code_009,gpt-3.5-turbo_00,0.3,"{'ic_id': {0: 200}, 'ica_id': {0: 2061}, 'question': {0: ""Given a Django model called 'Book', write a function that returns the average rating of all books.""}, 'rules': {0: ['Do not use any built-in Django methods to calculate the average rating.']}, 'examples': {0: 'Input: Book.objects.all() \nOutput: 4.5'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 420}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def calculate_avg_rating(books):
    total_ratings = 0
    total_books = 0

    for book in books:
        total_ratings += book.rating
        total_books += 1
    
    if total_books == 0:
        return 0
    
    avg_rating = total_ratings / total_books
    return avg_rating

# Example usage
books = Book.objects.all()
average_rating = calculate_avg_rating(books)
average_rating
","def avg_rating_of_books():
  books = Books.objects.all()
  total_rating = 0
  for book in books:
    total_rating += book.rating

  total_books = books.count()
  average_rating_of_books = total_rating/total_books
  return average_rating_of_books","Given a Django model called 'Book', write a function that returns the average rating of all books."
source_code_009,gpt-3.5-turbo_01,0.3,"{'ic_id': {0: 200}, 'ica_id': {0: 2061}, 'question': {0: ""Given a Django model called 'Book', write a function that returns the average rating of all books.""}, 'rules': {0: ['Do not use any built-in Django methods to calculate the average rating.']}, 'examples': {0: 'Input: Book.objects.all() \nOutput: 4.5'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 420}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def calculate_avg_rating(books):
    total_ratings = 0
    total_books = 0

    for book in books:
        total_ratings += book.rating
        total_books += 1
    
    if total_books == 0:
        return 0
    
    avg_rating = total_ratings / total_books
    return avg_rating

# Example usage
books = Book.objects.all()
average_rating = calculate_avg_rating(books)
average_rating
","def avg_rating_of_books():
  books = Books.objects.all()
  total_rating = 0
  for book in books:
    total_rating += book.rating

  total_books = books.count()
  average_rating_of_books = total_rating/total_books
  return average_rating_of_books","Given a Django model called 'Book', write a function that returns the average rating of all books."
source_code_009,gpt-4_00,0.4,"{'ic_id': {0: 200}, 'ica_id': {0: 2061}, 'question': {0: ""Given a Django model called 'Book', write a function that returns the average rating of all books.""}, 'rules': {0: ['Do not use any built-in Django methods to calculate the average rating.']}, 'examples': {0: 'Input: Book.objects.all() \nOutput: 4.5'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 420}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def calculate_avg_rating(books):
    total_ratings = 0
    total_books = 0

    for book in books:
        total_ratings += book.rating
        total_books += 1
    
    if total_books == 0:
        return 0
    
    avg_rating = total_ratings / total_books
    return avg_rating

# Example usage
books = Book.objects.all()
average_rating = calculate_avg_rating(books)
average_rating
","def avg_rating_of_books():
  books = Books.objects.all()
  total_rating = 0
  for book in books:
    total_rating += book.rating

  total_books = books.count()
  average_rating_of_books = total_rating/total_books
  return average_rating_of_books","Given a Django model called 'Book', write a function that returns the average rating of all books."
source_code_009,gpt-4_01,0.4,"{'ic_id': {0: 200}, 'ica_id': {0: 2061}, 'question': {0: ""Given a Django model called 'Book', write a function that returns the average rating of all books.""}, 'rules': {0: ['Do not use any built-in Django methods to calculate the average rating.']}, 'examples': {0: 'Input: Book.objects.all() \nOutput: 4.5'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 420}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def calculate_avg_rating(books):
    total_ratings = 0
    total_books = 0

    for book in books:
        total_ratings += book.rating
        total_books += 1
    
    if total_books == 0:
        return 0
    
    avg_rating = total_ratings / total_books
    return avg_rating

# Example usage
books = Book.objects.all()
average_rating = calculate_avg_rating(books)
average_rating
","def avg_rating_of_books():
  books = Books.objects.all()
  total_rating = 0
  for book in books:
    total_rating += book.rating

  total_books = books.count()
  average_rating_of_books = total_rating/total_books
  return average_rating_of_books","Given a Django model called 'Book', write a function that returns the average rating of all books."
source_code_009,gpt-4-turbo_00,0.4,"{'ic_id': {0: 200}, 'ica_id': {0: 2061}, 'question': {0: ""Given a Django model called 'Book', write a function that returns the average rating of all books.""}, 'rules': {0: ['Do not use any built-in Django methods to calculate the average rating.']}, 'examples': {0: 'Input: Book.objects.all() \nOutput: 4.5'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 420}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def calculate_avg_rating(books):
    total_ratings = 0
    total_books = 0

    for book in books:
        total_ratings += book.rating
        total_books += 1
    
    if total_books == 0:
        return 0
    
    avg_rating = total_ratings / total_books
    return avg_rating

# Example usage
books = Book.objects.all()
average_rating = calculate_avg_rating(books)
average_rating
","def avg_rating_of_books():
  books = Books.objects.all()
  total_rating = 0
  for book in books:
    total_rating += book.rating

  total_books = books.count()
  average_rating_of_books = total_rating/total_books
  return average_rating_of_books","Given a Django model called 'Book', write a function that returns the average rating of all books."
source_code_009,gpt-4-turbo_01,0.4,"{'ic_id': {0: 200}, 'ica_id': {0: 2061}, 'question': {0: ""Given a Django model called 'Book', write a function that returns the average rating of all books.""}, 'rules': {0: ['Do not use any built-in Django methods to calculate the average rating.']}, 'examples': {0: 'Input: Book.objects.all() \nOutput: 4.5'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 420}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def calculate_avg_rating(books):
    total_ratings = 0
    total_books = 0

    for book in books:
        total_ratings += book.rating
        total_books += 1
    
    if total_books == 0:
        return 0
    
    avg_rating = total_ratings / total_books
    return avg_rating

# Example usage
books = Book.objects.all()
average_rating = calculate_avg_rating(books)
average_rating
","def avg_rating_of_books():
  books = Books.objects.all()
  total_rating = 0
  for book in books:
    total_rating += book.rating

  total_books = books.count()
  average_rating_of_books = total_rating/total_books
  return average_rating_of_books","Given a Django model called 'Book', write a function that returns the average rating of all books."
source_code_010,gpt-3.5-turbo_00,0.3,"{'ic_id': {0: 221}, 'ica_id': {0: 2109}, 'question': {0: 'Given a list of integers, find the maximum sum of any contiguous subarray.'}, 'rules': {0: ['Use Kotlin language features']}, 'examples': {0: '[[-2,1,-3,4,-1,2,1,-5,4], [1,2,3,4,5], [5,4,3,2,1], [-1,-2,-3,-4,-5]] => [6, 15, 15, -1]'}, 'programming_language': {0: 'Kotlin'}, 'response_time': {0: 1533}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","fun maxSubarraySum(nums: IntArray): Int {
    var maxSum = nums[0]
    var currentSum = nums[0]

    for (i in 1 until nums.size) {
        currentSum = maxOf(nums[i], currentSum + nums[i])
        maxSum = maxOf(maxSum, currentSum)
    }

    return maxSum
}

fun main() {
    val arrays = listOf(
        intArrayOf(-2, 1, -3, 4, -1, 2, 1, -5, 4),
        intArrayOf(1, 2, 3, 4, 5),
        intArrayOf(5, 4, 3, 2, 1),
        intArrayOf(-1, -2, -3, -4, -5)
    )

    val maxSums = arrays.map { maxSubarraySum(it) }
    println(maxSums) // Output: [6, 15, 15, -1]
}
","fun maxSumOfAnyContiguosSubarray(lists: List<List<Int>>) {
  lists.forEach { list ->
    var max = Int.MIN_VALUE
    var sum = 0
    list.forEach { value ->
      sum += value
      max = maxOf(sum, max)
      sum = maxOf(sum, 0)
    }
    result.add(max)
  }
}","Given a list of integers, find the maximum sum of any contiguous subarray."
source_code_010,gpt-3.5-turbo_01,0.4,"{'ic_id': {0: 221}, 'ica_id': {0: 2109}, 'question': {0: 'Given a list of integers, find the maximum sum of any contiguous subarray.'}, 'rules': {0: ['Use Kotlin language features']}, 'examples': {0: '[[-2,1,-3,4,-1,2,1,-5,4], [1,2,3,4,5], [5,4,3,2,1], [-1,-2,-3,-4,-5]] => [6, 15, 15, -1]'}, 'programming_language': {0: 'Kotlin'}, 'response_time': {0: 1533}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","fun maxSubarraySum(nums: IntArray): Int {
    var maxSum = nums[0]
    var currentSum = nums[0]

    for (i in 1 until nums.size) {
        currentSum = maxOf(nums[i], currentSum + nums[i])
        maxSum = maxOf(maxSum, currentSum)
    }

    return maxSum
}

fun main() {
    val arrays = listOf(
        intArrayOf(-2, 1, -3, 4, -1, 2, 1, -5, 4),
        intArrayOf(1, 2, 3, 4, 5),
        intArrayOf(5, 4, 3, 2, 1),
        intArrayOf(-1, -2, -3, -4, -5)
    )

    val maxSums = arrays.map { maxSubarraySum(it) }
    println(maxSums) // Output: [6, 15, 15, -1]
}
","fun maxSumOfAnyContiguosSubarray(lists: List<List<Int>>) {
  lists.forEach { list ->
    var max = Int.MIN_VALUE
    var sum = 0
    list.forEach { value ->
      sum += value
      max = maxOf(sum, max)
      sum = maxOf(sum, 0)
    }
    result.add(max)
  }
}","Given a list of integers, find the maximum sum of any contiguous subarray."
source_code_010,gpt-4_00,0.2,"{'ic_id': {0: 221}, 'ica_id': {0: 2109}, 'question': {0: 'Given a list of integers, find the maximum sum of any contiguous subarray.'}, 'rules': {0: ['Use Kotlin language features']}, 'examples': {0: '[[-2,1,-3,4,-1,2,1,-5,4], [1,2,3,4,5], [5,4,3,2,1], [-1,-2,-3,-4,-5]] => [6, 15, 15, -1]'}, 'programming_language': {0: 'Kotlin'}, 'response_time': {0: 1533}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","fun maxSubarraySum(nums: IntArray): Int {
    var maxSum = nums[0]
    var currentSum = nums[0]

    for (i in 1 until nums.size) {
        currentSum = maxOf(nums[i], currentSum + nums[i])
        maxSum = maxOf(maxSum, currentSum)
    }

    return maxSum
}

fun main() {
    val arrays = listOf(
        intArrayOf(-2, 1, -3, 4, -1, 2, 1, -5, 4),
        intArrayOf(1, 2, 3, 4, 5),
        intArrayOf(5, 4, 3, 2, 1),
        intArrayOf(-1, -2, -3, -4, -5)
    )

    val maxSums = arrays.map { maxSubarraySum(it) }
    println(maxSums) // Output: [6, 15, 15, -1]
}
","fun maxSumOfAnyContiguosSubarray(lists: List<List<Int>>) {
  lists.forEach { list ->
    var max = Int.MIN_VALUE
    var sum = 0
    list.forEach { value ->
      sum += value
      max = maxOf(sum, max)
      sum = maxOf(sum, 0)
    }
    result.add(max)
  }
}","Given a list of integers, find the maximum sum of any contiguous subarray."
source_code_010,gpt-4_01,0.1,"{'ic_id': {0: 221}, 'ica_id': {0: 2109}, 'question': {0: 'Given a list of integers, find the maximum sum of any contiguous subarray.'}, 'rules': {0: ['Use Kotlin language features']}, 'examples': {0: '[[-2,1,-3,4,-1,2,1,-5,4], [1,2,3,4,5], [5,4,3,2,1], [-1,-2,-3,-4,-5]] => [6, 15, 15, -1]'}, 'programming_language': {0: 'Kotlin'}, 'response_time': {0: 1533}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","fun maxSubarraySum(nums: IntArray): Int {
    var maxSum = nums[0]
    var currentSum = nums[0]

    for (i in 1 until nums.size) {
        currentSum = maxOf(nums[i], currentSum + nums[i])
        maxSum = maxOf(maxSum, currentSum)
    }

    return maxSum
}

fun main() {
    val arrays = listOf(
        intArrayOf(-2, 1, -3, 4, -1, 2, 1, -5, 4),
        intArrayOf(1, 2, 3, 4, 5),
        intArrayOf(5, 4, 3, 2, 1),
        intArrayOf(-1, -2, -3, -4, -5)
    )

    val maxSums = arrays.map { maxSubarraySum(it) }
    println(maxSums) // Output: [6, 15, 15, -1]
}
","fun maxSumOfAnyContiguosSubarray(lists: List<List<Int>>) {
  lists.forEach { list ->
    var max = Int.MIN_VALUE
    var sum = 0
    list.forEach { value ->
      sum += value
      max = maxOf(sum, max)
      sum = maxOf(sum, 0)
    }
    result.add(max)
  }
}","Given a list of integers, find the maximum sum of any contiguous subarray."
source_code_010,gpt-4-turbo_00,0.3,"{'ic_id': {0: 221}, 'ica_id': {0: 2109}, 'question': {0: 'Given a list of integers, find the maximum sum of any contiguous subarray.'}, 'rules': {0: ['Use Kotlin language features']}, 'examples': {0: '[[-2,1,-3,4,-1,2,1,-5,4], [1,2,3,4,5], [5,4,3,2,1], [-1,-2,-3,-4,-5]] => [6, 15, 15, -1]'}, 'programming_language': {0: 'Kotlin'}, 'response_time': {0: 1533}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","fun maxSubarraySum(nums: IntArray): Int {
    var maxSum = nums[0]
    var currentSum = nums[0]

    for (i in 1 until nums.size) {
        currentSum = maxOf(nums[i], currentSum + nums[i])
        maxSum = maxOf(maxSum, currentSum)
    }

    return maxSum
}

fun main() {
    val arrays = listOf(
        intArrayOf(-2, 1, -3, 4, -1, 2, 1, -5, 4),
        intArrayOf(1, 2, 3, 4, 5),
        intArrayOf(5, 4, 3, 2, 1),
        intArrayOf(-1, -2, -3, -4, -5)
    )

    val maxSums = arrays.map { maxSubarraySum(it) }
    println(maxSums) // Output: [6, 15, 15, -1]
}
","fun maxSumOfAnyContiguosSubarray(lists: List<List<Int>>) {
  lists.forEach { list ->
    var max = Int.MIN_VALUE
    var sum = 0
    list.forEach { value ->
      sum += value
      max = maxOf(sum, max)
      sum = maxOf(sum, 0)
    }
    result.add(max)
  }
}","Given a list of integers, find the maximum sum of any contiguous subarray."
source_code_010,gpt-4-turbo_01,0.3,"{'ic_id': {0: 221}, 'ica_id': {0: 2109}, 'question': {0: 'Given a list of integers, find the maximum sum of any contiguous subarray.'}, 'rules': {0: ['Use Kotlin language features']}, 'examples': {0: '[[-2,1,-3,4,-1,2,1,-5,4], [1,2,3,4,5], [5,4,3,2,1], [-1,-2,-3,-4,-5]] => [6, 15, 15, -1]'}, 'programming_language': {0: 'Kotlin'}, 'response_time': {0: 1533}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","fun maxSubarraySum(nums: IntArray): Int {
    var maxSum = nums[0]
    var currentSum = nums[0]

    for (i in 1 until nums.size) {
        currentSum = maxOf(nums[i], currentSum + nums[i])
        maxSum = maxOf(maxSum, currentSum)
    }

    return maxSum
}

fun main() {
    val arrays = listOf(
        intArrayOf(-2, 1, -3, 4, -1, 2, 1, -5, 4),
        intArrayOf(1, 2, 3, 4, 5),
        intArrayOf(5, 4, 3, 2, 1),
        intArrayOf(-1, -2, -3, -4, -5)
    )

    val maxSums = arrays.map { maxSubarraySum(it) }
    println(maxSums) // Output: [6, 15, 15, -1]
}
","fun maxSumOfAnyContiguosSubarray(lists: List<List<Int>>) {
  lists.forEach { list ->
    var max = Int.MIN_VALUE
    var sum = 0
    list.forEach { value ->
      sum += value
      max = maxOf(sum, max)
      sum = maxOf(sum, 0)
    }
    result.add(max)
  }
}","Given a list of integers, find the maximum sum of any contiguous subarray."
source_code_011,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 226}, 'ica_id': {0: 2344}, 'question': {0: 'You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.'}, 'rules': {0: []}, 'examples': {0: '""hello"" -> ""helo""'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1030}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","function removeDuplicates(str) {
    return [...new Set(str)].join('');
}

// Test the function with the example
console.log(removeDuplicates(""hello"")); // Output: ""helo""
","function removeDuplicateChars(str) {
  let result = '';
  // loop through the string characters
  for(let i=0; i<str.length; i++) {
    const char = str.at(i);
    // if the character is not in result string, append it
    if(result.indexOf(char) === -1) {
      result += char;
    }
  }

  return result;
}",You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.
source_code_011,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 226}, 'ica_id': {0: 2344}, 'question': {0: 'You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.'}, 'rules': {0: []}, 'examples': {0: '""hello"" -> ""helo""'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1030}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","function removeDuplicates(str) {
    return [...new Set(str)].join('');
}

// Test the function with the example
console.log(removeDuplicates(""hello"")); // Output: ""helo""
","function removeDuplicateChars(str) {
  let result = '';
  // loop through the string characters
  for(let i=0; i<str.length; i++) {
    const char = str.at(i);
    // if the character is not in result string, append it
    if(result.indexOf(char) === -1) {
      result += char;
    }
  }

  return result;
}",You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.
source_code_011,gpt-4_00,0.2,"{'ic_id': {0: 226}, 'ica_id': {0: 2344}, 'question': {0: 'You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.'}, 'rules': {0: []}, 'examples': {0: '""hello"" -> ""helo""'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1030}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","function removeDuplicates(str) {
    return [...new Set(str)].join('');
}

// Test the function with the example
console.log(removeDuplicates(""hello"")); // Output: ""helo""
","function removeDuplicateChars(str) {
  let result = '';
  // loop through the string characters
  for(let i=0; i<str.length; i++) {
    const char = str.at(i);
    // if the character is not in result string, append it
    if(result.indexOf(char) === -1) {
      result += char;
    }
  }

  return result;
}",You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.
source_code_011,gpt-4_01,0.8,"{'ic_id': {0: 226}, 'ica_id': {0: 2344}, 'question': {0: 'You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.'}, 'rules': {0: []}, 'examples': {0: '""hello"" -> ""helo""'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1030}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","function removeDuplicates(str) {
    return [...new Set(str)].join('');
}

// Test the function with the example
console.log(removeDuplicates(""hello"")); // Output: ""helo""
","function removeDuplicateChars(str) {
  let result = '';
  // loop through the string characters
  for(let i=0; i<str.length; i++) {
    const char = str.at(i);
    // if the character is not in result string, append it
    if(result.indexOf(char) === -1) {
      result += char;
    }
  }

  return result;
}",You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.
source_code_011,gpt-4-turbo_00,0.4,"{'ic_id': {0: 226}, 'ica_id': {0: 2344}, 'question': {0: 'You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.'}, 'rules': {0: []}, 'examples': {0: '""hello"" -> ""helo""'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1030}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","function removeDuplicates(str) {
    return [...new Set(str)].join('');
}

// Test the function with the example
console.log(removeDuplicates(""hello"")); // Output: ""helo""
","function removeDuplicateChars(str) {
  let result = '';
  // loop through the string characters
  for(let i=0; i<str.length; i++) {
    const char = str.at(i);
    // if the character is not in result string, append it
    if(result.indexOf(char) === -1) {
      result += char;
    }
  }

  return result;
}",You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.
source_code_011,gpt-4-turbo_01,0.3,"{'ic_id': {0: 226}, 'ica_id': {0: 2344}, 'question': {0: 'You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.'}, 'rules': {0: []}, 'examples': {0: '""hello"" -> ""helo""'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1030}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","function removeDuplicates(str) {
    return [...new Set(str)].join('');
}

// Test the function with the example
console.log(removeDuplicates(""hello"")); // Output: ""helo""
","function removeDuplicateChars(str) {
  let result = '';
  // loop through the string characters
  for(let i=0; i<str.length; i++) {
    const char = str.at(i);
    // if the character is not in result string, append it
    if(result.indexOf(char) === -1) {
      result += char;
    }
  }

  return result;
}",You are given a string. Write a function to remove all duplicate characters from the string and return the resulting string.
source_code_012,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 253}, 'ica_id': {0: 2505}, 'question': {0: 'Given a string, write a program to check if it is a palindrome.'}, 'rules': {0: []}, 'examples': {0: '""radar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>
#include <algorithm>

bool isPalindrome(const std::string& str) {
    std::string reversedStr = str;
    std::reverse(reversedStr.begin(), reversedStr.end());
    return str == reversedStr;
}

int main() {
    std::string input = ""radar"";
    if (isPalindrome(input)) {
        std::cout << ""true"" << std::endl;
    } else {
        std::cout << ""false"" << std::endl;
    }

    return 0;
}
","func checkPalindrome(strs text) bool {
  lastindx:= len(text) - 1
  for i:= 0; i < lastIndx/2 && (lastindx - i); i++ {
    if str[i] != str[lastidnx-1] {
      return false
    }
  }
  return true
}","Given a string, write a program to check if it is a palindrome."
source_code_012,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 253}, 'ica_id': {0: 2505}, 'question': {0: 'Given a string, write a program to check if it is a palindrome.'}, 'rules': {0: []}, 'examples': {0: '""radar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>
#include <algorithm>

bool isPalindrome(const std::string& str) {
    std::string reversedStr = str;
    std::reverse(reversedStr.begin(), reversedStr.end());
    return str == reversedStr;
}

int main() {
    std::string input = ""radar"";
    if (isPalindrome(input)) {
        std::cout << ""true"" << std::endl;
    } else {
        std::cout << ""false"" << std::endl;
    }

    return 0;
}
","func checkPalindrome(strs text) bool {
  lastindx:= len(text) - 1
  for i:= 0; i < lastIndx/2 && (lastindx - i); i++ {
    if str[i] != str[lastidnx-1] {
      return false
    }
  }
  return true
}","Given a string, write a program to check if it is a palindrome."
source_code_012,gpt-4_00,0.0,"{'ic_id': {0: 253}, 'ica_id': {0: 2505}, 'question': {0: 'Given a string, write a program to check if it is a palindrome.'}, 'rules': {0: []}, 'examples': {0: '""radar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>
#include <algorithm>

bool isPalindrome(const std::string& str) {
    std::string reversedStr = str;
    std::reverse(reversedStr.begin(), reversedStr.end());
    return str == reversedStr;
}

int main() {
    std::string input = ""radar"";
    if (isPalindrome(input)) {
        std::cout << ""true"" << std::endl;
    } else {
        std::cout << ""false"" << std::endl;
    }

    return 0;
}
","func checkPalindrome(strs text) bool {
  lastindx:= len(text) - 1
  for i:= 0; i < lastIndx/2 && (lastindx - i); i++ {
    if str[i] != str[lastidnx-1] {
      return false
    }
  }
  return true
}","Given a string, write a program to check if it is a palindrome."
source_code_012,gpt-4_01,0.0,"{'ic_id': {0: 253}, 'ica_id': {0: 2505}, 'question': {0: 'Given a string, write a program to check if it is a palindrome.'}, 'rules': {0: []}, 'examples': {0: '""radar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>
#include <algorithm>

bool isPalindrome(const std::string& str) {
    std::string reversedStr = str;
    std::reverse(reversedStr.begin(), reversedStr.end());
    return str == reversedStr;
}

int main() {
    std::string input = ""radar"";
    if (isPalindrome(input)) {
        std::cout << ""true"" << std::endl;
    } else {
        std::cout << ""false"" << std::endl;
    }

    return 0;
}
","func checkPalindrome(strs text) bool {
  lastindx:= len(text) - 1
  for i:= 0; i < lastIndx/2 && (lastindx - i); i++ {
    if str[i] != str[lastidnx-1] {
      return false
    }
  }
  return true
}","Given a string, write a program to check if it is a palindrome."
source_code_012,gpt-4-turbo_00,0.0,"{'ic_id': {0: 253}, 'ica_id': {0: 2505}, 'question': {0: 'Given a string, write a program to check if it is a palindrome.'}, 'rules': {0: []}, 'examples': {0: '""radar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>
#include <algorithm>

bool isPalindrome(const std::string& str) {
    std::string reversedStr = str;
    std::reverse(reversedStr.begin(), reversedStr.end());
    return str == reversedStr;
}

int main() {
    std::string input = ""radar"";
    if (isPalindrome(input)) {
        std::cout << ""true"" << std::endl;
    } else {
        std::cout << ""false"" << std::endl;
    }

    return 0;
}
","func checkPalindrome(strs text) bool {
  lastindx:= len(text) - 1
  for i:= 0; i < lastIndx/2 && (lastindx - i); i++ {
    if str[i] != str[lastidnx-1] {
      return false
    }
  }
  return true
}","Given a string, write a program to check if it is a palindrome."
source_code_012,gpt-4-turbo_01,0.0,"{'ic_id': {0: 253}, 'ica_id': {0: 2505}, 'question': {0: 'Given a string, write a program to check if it is a palindrome.'}, 'rules': {0: []}, 'examples': {0: '""radar"" -> true, ""hello"" -> false'}, 'programming_language': {0: 'C++'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>
#include <algorithm>

bool isPalindrome(const std::string& str) {
    std::string reversedStr = str;
    std::reverse(reversedStr.begin(), reversedStr.end());
    return str == reversedStr;
}

int main() {
    std::string input = ""radar"";
    if (isPalindrome(input)) {
        std::cout << ""true"" << std::endl;
    } else {
        std::cout << ""false"" << std::endl;
    }

    return 0;
}
","func checkPalindrome(strs text) bool {
  lastindx:= len(text) - 1
  for i:= 0; i < lastIndx/2 && (lastindx - i); i++ {
    if str[i] != str[lastidnx-1] {
      return false
    }
  }
  return true
}","Given a string, write a program to check if it is a palindrome."
source_code_013,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 262}, 'ica_id': {0: 2513}, 'question': {0: 'Write a Java program to find the reverse of a string.'}, 'rules': {0: ['Do not use any built-in functions or libraries to reverse the string.']}, 'examples': {0: '""hello"" => ""olleh""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 253}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","public class ReverseString {
    public static void main(String[] args) {
        String str = ""hello"";
        String reversed = reverseString(str);
        System.out.println(reversed); // Output: olleh
    }

    public static String reverseString(String str) {
        char[] charArray = str.toCharArray();
        int left = 0;
        int right = charArray.length - 1;

        while (left < right) {
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;

            left++;
            right--;
        }

        return new String(charArray);
    }
}
","Class reverse{
  public Static void main(String args[]){
    String s=""hello""
    String st="" ""
    for(i=0;i<s.length;i++){
      ch=s.charAt(i)
      st=st+ch;  
    }  
    System.out.println(st)  
  }
}",Write a Java program to find the reverse of a string.
source_code_013,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 262}, 'ica_id': {0: 2513}, 'question': {0: 'Write a Java program to find the reverse of a string.'}, 'rules': {0: ['Do not use any built-in functions or libraries to reverse the string.']}, 'examples': {0: '""hello"" => ""olleh""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 253}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","public class ReverseString {
    public static void main(String[] args) {
        String str = ""hello"";
        String reversed = reverseString(str);
        System.out.println(reversed); // Output: olleh
    }

    public static String reverseString(String str) {
        char[] charArray = str.toCharArray();
        int left = 0;
        int right = charArray.length - 1;

        while (left < right) {
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;

            left++;
            right--;
        }

        return new String(charArray);
    }
}
","Class reverse{
  public Static void main(String args[]){
    String s=""hello""
    String st="" ""
    for(i=0;i<s.length;i++){
      ch=s.charAt(i)
      st=st+ch;  
    }  
    System.out.println(st)  
  }
}",Write a Java program to find the reverse of a string.
source_code_013,gpt-4_00,0.2,"{'ic_id': {0: 262}, 'ica_id': {0: 2513}, 'question': {0: 'Write a Java program to find the reverse of a string.'}, 'rules': {0: ['Do not use any built-in functions or libraries to reverse the string.']}, 'examples': {0: '""hello"" => ""olleh""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 253}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","public class ReverseString {
    public static void main(String[] args) {
        String str = ""hello"";
        String reversed = reverseString(str);
        System.out.println(reversed); // Output: olleh
    }

    public static String reverseString(String str) {
        char[] charArray = str.toCharArray();
        int left = 0;
        int right = charArray.length - 1;

        while (left < right) {
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;

            left++;
            right--;
        }

        return new String(charArray);
    }
}
","Class reverse{
  public Static void main(String args[]){
    String s=""hello""
    String st="" ""
    for(i=0;i<s.length;i++){
      ch=s.charAt(i)
      st=st+ch;  
    }  
    System.out.println(st)  
  }
}",Write a Java program to find the reverse of a string.
source_code_013,gpt-4_01,0.2,"{'ic_id': {0: 262}, 'ica_id': {0: 2513}, 'question': {0: 'Write a Java program to find the reverse of a string.'}, 'rules': {0: ['Do not use any built-in functions or libraries to reverse the string.']}, 'examples': {0: '""hello"" => ""olleh""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 253}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","public class ReverseString {
    public static void main(String[] args) {
        String str = ""hello"";
        String reversed = reverseString(str);
        System.out.println(reversed); // Output: olleh
    }

    public static String reverseString(String str) {
        char[] charArray = str.toCharArray();
        int left = 0;
        int right = charArray.length - 1;

        while (left < right) {
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;

            left++;
            right--;
        }

        return new String(charArray);
    }
}
","Class reverse{
  public Static void main(String args[]){
    String s=""hello""
    String st="" ""
    for(i=0;i<s.length;i++){
      ch=s.charAt(i)
      st=st+ch;  
    }  
    System.out.println(st)  
  }
}",Write a Java program to find the reverse of a string.
source_code_013,gpt-4-turbo_00,0.7,"{'ic_id': {0: 262}, 'ica_id': {0: 2513}, 'question': {0: 'Write a Java program to find the reverse of a string.'}, 'rules': {0: ['Do not use any built-in functions or libraries to reverse the string.']}, 'examples': {0: '""hello"" => ""olleh""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 253}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","public class ReverseString {
    public static void main(String[] args) {
        String str = ""hello"";
        String reversed = reverseString(str);
        System.out.println(reversed); // Output: olleh
    }

    public static String reverseString(String str) {
        char[] charArray = str.toCharArray();
        int left = 0;
        int right = charArray.length - 1;

        while (left < right) {
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;

            left++;
            right--;
        }

        return new String(charArray);
    }
}
","Class reverse{
  public Static void main(String args[]){
    String s=""hello""
    String st="" ""
    for(i=0;i<s.length;i++){
      ch=s.charAt(i)
      st=st+ch;  
    }  
    System.out.println(st)  
  }
}",Write a Java program to find the reverse of a string.
source_code_013,gpt-4-turbo_01,0.2,"{'ic_id': {0: 262}, 'ica_id': {0: 2513}, 'question': {0: 'Write a Java program to find the reverse of a string.'}, 'rules': {0: ['Do not use any built-in functions or libraries to reverse the string.']}, 'examples': {0: '""hello"" => ""olleh""'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 253}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","public class ReverseString {
    public static void main(String[] args) {
        String str = ""hello"";
        String reversed = reverseString(str);
        System.out.println(reversed); // Output: olleh
    }

    public static String reverseString(String str) {
        char[] charArray = str.toCharArray();
        int left = 0;
        int right = charArray.length - 1;

        while (left < right) {
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;

            left++;
            right--;
        }

        return new String(charArray);
    }
}
","Class reverse{
  public Static void main(String args[]){
    String s=""hello""
    String st="" ""
    for(i=0;i<s.length;i++){
      ch=s.charAt(i)
      st=st+ch;  
    }  
    System.out.println(st)  
  }
}",Write a Java program to find the reverse of a string.
source_code_014,gpt-3.5-turbo_00,0.9,"{'ic_id': {0: 269}, 'ica_id': {0: 2575}, 'question': {0: ""Write a query to find the average age of employees in the 'Users' table.""}, 'rules': {0: []}, 'examples': {0: ""Input: 'Users' table\nExpected output: Average age of employees""}, 'programming_language': {0: 'SQL'}, 'response_time': {0: 25}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","-- Calculate the average age of employees in the Users table
SELECT AVG(age) AS Average_Age
FROM Users;
","SELECT AVG(Age) AS AverageAge
FROM Users;",Write a query to find the average age of employees in the 'Users' table.
source_code_014,gpt-3.5-turbo_01,0.9,"{'ic_id': {0: 269}, 'ica_id': {0: 2575}, 'question': {0: ""Write a query to find the average age of employees in the 'Users' table.""}, 'rules': {0: []}, 'examples': {0: ""Input: 'Users' table\nExpected output: Average age of employees""}, 'programming_language': {0: 'SQL'}, 'response_time': {0: 25}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","-- Calculate the average age of employees in the Users table
SELECT AVG(age) AS Average_Age
FROM Users;
","SELECT AVG(Age) AS AverageAge
FROM Users;",Write a query to find the average age of employees in the 'Users' table.
source_code_014,gpt-4_00,0.8,"{'ic_id': {0: 269}, 'ica_id': {0: 2575}, 'question': {0: ""Write a query to find the average age of employees in the 'Users' table.""}, 'rules': {0: []}, 'examples': {0: ""Input: 'Users' table\nExpected output: Average age of employees""}, 'programming_language': {0: 'SQL'}, 'response_time': {0: 25}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","-- Calculate the average age of employees in the Users table
SELECT AVG(age) AS Average_Age
FROM Users;
","SELECT AVG(Age) AS AverageAge
FROM Users;",Write a query to find the average age of employees in the 'Users' table.
source_code_014,gpt-4_01,0.9,"{'ic_id': {0: 269}, 'ica_id': {0: 2575}, 'question': {0: ""Write a query to find the average age of employees in the 'Users' table.""}, 'rules': {0: []}, 'examples': {0: ""Input: 'Users' table\nExpected output: Average age of employees""}, 'programming_language': {0: 'SQL'}, 'response_time': {0: 25}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","-- Calculate the average age of employees in the Users table
SELECT AVG(age) AS Average_Age
FROM Users;
","SELECT AVG(Age) AS AverageAge
FROM Users;",Write a query to find the average age of employees in the 'Users' table.
source_code_014,gpt-4-turbo_00,0.9,"{'ic_id': {0: 269}, 'ica_id': {0: 2575}, 'question': {0: ""Write a query to find the average age of employees in the 'Users' table.""}, 'rules': {0: []}, 'examples': {0: ""Input: 'Users' table\nExpected output: Average age of employees""}, 'programming_language': {0: 'SQL'}, 'response_time': {0: 25}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","-- Calculate the average age of employees in the Users table
SELECT AVG(age) AS Average_Age
FROM Users;
","SELECT AVG(Age) AS AverageAge
FROM Users;",Write a query to find the average age of employees in the 'Users' table.
source_code_014,gpt-4-turbo_01,0.9,"{'ic_id': {0: 269}, 'ica_id': {0: 2575}, 'question': {0: ""Write a query to find the average age of employees in the 'Users' table.""}, 'rules': {0: []}, 'examples': {0: ""Input: 'Users' table\nExpected output: Average age of employees""}, 'programming_language': {0: 'SQL'}, 'response_time': {0: 25}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","-- Calculate the average age of employees in the Users table
SELECT AVG(age) AS Average_Age
FROM Users;
","SELECT AVG(Age) AS AverageAge
FROM Users;",Write a query to find the average age of employees in the 'Users' table.
source_code_015,gpt-3.5-turbo_00,0.8,"{'ic_id': {0: 271}, 'ica_id': {0: 2604}, 'question': {0: 'Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.'}, 'rules': {0: ['The input list may be empty.']}, 'examples': {0: '[1, 2, 3, 4, 5] -> 6'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 93}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example usage
input_list = [1, 2, 3, 4, 5]
print(sum_of_even_numbers(input_list))
","def evenSum(numList):
  if len(numList) == 0:
    return 0
  return sum(num for num in numList if num % 2 == 0)",Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.
source_code_015,gpt-3.5-turbo_01,0.8,"{'ic_id': {0: 271}, 'ica_id': {0: 2604}, 'question': {0: 'Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.'}, 'rules': {0: ['The input list may be empty.']}, 'examples': {0: '[1, 2, 3, 4, 5] -> 6'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 93}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example usage
input_list = [1, 2, 3, 4, 5]
print(sum_of_even_numbers(input_list))
","def evenSum(numList):
  if len(numList) == 0:
    return 0
  return sum(num for num in numList if num % 2 == 0)",Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.
source_code_015,gpt-4_00,0.2,"{'ic_id': {0: 271}, 'ica_id': {0: 2604}, 'question': {0: 'Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.'}, 'rules': {0: ['The input list may be empty.']}, 'examples': {0: '[1, 2, 3, 4, 5] -> 6'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 93}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example usage
input_list = [1, 2, 3, 4, 5]
print(sum_of_even_numbers(input_list))
","def evenSum(numList):
  if len(numList) == 0:
    return 0
  return sum(num for num in numList if num % 2 == 0)",Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.
source_code_015,gpt-4_01,0.9,"{'ic_id': {0: 271}, 'ica_id': {0: 2604}, 'question': {0: 'Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.'}, 'rules': {0: ['The input list may be empty.']}, 'examples': {0: '[1, 2, 3, 4, 5] -> 6'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 93}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example usage
input_list = [1, 2, 3, 4, 5]
print(sum_of_even_numbers(input_list))
","def evenSum(numList):
  if len(numList) == 0:
    return 0
  return sum(num for num in numList if num % 2 == 0)",Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.
source_code_015,gpt-4-turbo_00,0.8,"{'ic_id': {0: 271}, 'ica_id': {0: 2604}, 'question': {0: 'Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.'}, 'rules': {0: ['The input list may be empty.']}, 'examples': {0: '[1, 2, 3, 4, 5] -> 6'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 93}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example usage
input_list = [1, 2, 3, 4, 5]
print(sum_of_even_numbers(input_list))
","def evenSum(numList):
  if len(numList) == 0:
    return 0
  return sum(num for num in numList if num % 2 == 0)",Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.
source_code_015,gpt-4-turbo_01,0.8,"{'ic_id': {0: 271}, 'ica_id': {0: 2604}, 'question': {0: 'Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.'}, 'rules': {0: ['The input list may be empty.']}, 'examples': {0: '[1, 2, 3, 4, 5] -> 6'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 93}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example usage
input_list = [1, 2, 3, 4, 5]
print(sum_of_even_numbers(input_list))
","def evenSum(numList):
  if len(numList) == 0:
    return 0
  return sum(num for num in numList if num % 2 == 0)",Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.
source_code_016,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 268}, 'ica_id': {0: 2615}, 'question': {0: 'Given an array of numbers, return the sum of all the odd numbers.'}, 'rules': {0: []}, 'examples': {0: '[[1, 2, 3, 4, 5], 9]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","function sumOfOddNumbers(arr) {
    return arr.reduce((acc, curr) => {
        return acc + curr;
    }, 0);
}

const numbers = [1, 2, 3, 4, 5];
const result = sumOfOddNumbers(numbers.filter(num => num % 2 !== 0));
result;
","<?php>

  $list = array(array[1, 2, 3, 4, 5], 9)

  $num = 0

  foreach ($list in $item) {
    if(gettype($list) === ""array"") {
      foreach($item in $subitem) {
        if($subitem %2) {
          
        }else {
          $num = $num + $subitem
        }
      }
    } else {
      $num = $num + $item
    }
    return 
  }
  
?>","Given an array of numbers, return the sum of all the odd numbers."
source_code_016,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 268}, 'ica_id': {0: 2615}, 'question': {0: 'Given an array of numbers, return the sum of all the odd numbers.'}, 'rules': {0: []}, 'examples': {0: '[[1, 2, 3, 4, 5], 9]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","function sumOfOddNumbers(arr) {
    return arr.reduce((acc, curr) => {
        return acc + curr;
    }, 0);
}

const numbers = [1, 2, 3, 4, 5];
const result = sumOfOddNumbers(numbers.filter(num => num % 2 !== 0));
result;
","<?php>

  $list = array(array[1, 2, 3, 4, 5], 9)

  $num = 0

  foreach ($list in $item) {
    if(gettype($list) === ""array"") {
      foreach($item in $subitem) {
        if($subitem %2) {
          
        }else {
          $num = $num + $subitem
        }
      }
    } else {
      $num = $num + $item
    }
    return 
  }
  
?>","Given an array of numbers, return the sum of all the odd numbers."
source_code_016,gpt-4_00,0.0,"{'ic_id': {0: 268}, 'ica_id': {0: 2615}, 'question': {0: 'Given an array of numbers, return the sum of all the odd numbers.'}, 'rules': {0: []}, 'examples': {0: '[[1, 2, 3, 4, 5], 9]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","function sumOfOddNumbers(arr) {
    return arr.reduce((acc, curr) => {
        return acc + curr;
    }, 0);
}

const numbers = [1, 2, 3, 4, 5];
const result = sumOfOddNumbers(numbers.filter(num => num % 2 !== 0));
result;
","<?php>

  $list = array(array[1, 2, 3, 4, 5], 9)

  $num = 0

  foreach ($list in $item) {
    if(gettype($list) === ""array"") {
      foreach($item in $subitem) {
        if($subitem %2) {
          
        }else {
          $num = $num + $subitem
        }
      }
    } else {
      $num = $num + $item
    }
    return 
  }
  
?>","Given an array of numbers, return the sum of all the odd numbers."
source_code_016,gpt-4_01,0.0,"{'ic_id': {0: 268}, 'ica_id': {0: 2615}, 'question': {0: 'Given an array of numbers, return the sum of all the odd numbers.'}, 'rules': {0: []}, 'examples': {0: '[[1, 2, 3, 4, 5], 9]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","function sumOfOddNumbers(arr) {
    return arr.reduce((acc, curr) => {
        return acc + curr;
    }, 0);
}

const numbers = [1, 2, 3, 4, 5];
const result = sumOfOddNumbers(numbers.filter(num => num % 2 !== 0));
result;
","<?php>

  $list = array(array[1, 2, 3, 4, 5], 9)

  $num = 0

  foreach ($list in $item) {
    if(gettype($list) === ""array"") {
      foreach($item in $subitem) {
        if($subitem %2) {
          
        }else {
          $num = $num + $subitem
        }
      }
    } else {
      $num = $num + $item
    }
    return 
  }
  
?>","Given an array of numbers, return the sum of all the odd numbers."
source_code_016,gpt-4-turbo_00,0.0,"{'ic_id': {0: 268}, 'ica_id': {0: 2615}, 'question': {0: 'Given an array of numbers, return the sum of all the odd numbers.'}, 'rules': {0: []}, 'examples': {0: '[[1, 2, 3, 4, 5], 9]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","function sumOfOddNumbers(arr) {
    return arr.reduce((acc, curr) => {
        return acc + curr;
    }, 0);
}

const numbers = [1, 2, 3, 4, 5];
const result = sumOfOddNumbers(numbers.filter(num => num % 2 !== 0));
result;
","<?php>

  $list = array(array[1, 2, 3, 4, 5], 9)

  $num = 0

  foreach ($list in $item) {
    if(gettype($list) === ""array"") {
      foreach($item in $subitem) {
        if($subitem %2) {
          
        }else {
          $num = $num + $subitem
        }
      }
    } else {
      $num = $num + $item
    }
    return 
  }
  
?>","Given an array of numbers, return the sum of all the odd numbers."
source_code_016,gpt-4-turbo_01,0.0,"{'ic_id': {0: 268}, 'ica_id': {0: 2615}, 'question': {0: 'Given an array of numbers, return the sum of all the odd numbers.'}, 'rules': {0: []}, 'examples': {0: '[[1, 2, 3, 4, 5], 9]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","function sumOfOddNumbers(arr) {
    return arr.reduce((acc, curr) => {
        return acc + curr;
    }, 0);
}

const numbers = [1, 2, 3, 4, 5];
const result = sumOfOddNumbers(numbers.filter(num => num % 2 !== 0));
result;
","<?php>

  $list = array(array[1, 2, 3, 4, 5], 9)

  $num = 0

  foreach ($list in $item) {
    if(gettype($list) === ""array"") {
      foreach($item in $subitem) {
        if($subitem %2) {
          
        }else {
          $num = $num + $subitem
        }
      }
    } else {
      $num = $num + $item
    }
    return 
  }
  
?>","Given an array of numbers, return the sum of all the odd numbers."
source_code_017,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 277}, 'ica_id': {0: 2672}, 'question': {0: ""You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'.""}, 'rules': {0: []}, 'examples': {0: ""'abcde' => 'c', 'abcdef' => 'cd'""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 290}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>

std::string getMiddleCharacters(std::string str) {
    int length = str.length();
    if (length % 2 == 0) {
        return str.substr(length / 2 - 1, 2);
    } else {
        return str.substr(length / 2, 1);
    }
}

int main() {
    std::string input1 = ""abcde"";
    std::string input2 = ""abcdef"";

    // Test case 1
    std::cout << ""Middle characters of '"" << input1 << ""': "" << getMiddleCharacters(input1) << std::endl;

    // Test case 2
    std::cout << ""Middle characters of '"" << input2 << ""': "" << getMiddleCharacters(input2) << std::endl;

    return 0;
}
","uint8_t* getMiddleChars(uint8_t* input, uint32_t len) {
  // can we use new? do we have to import string? dont remember lib name.
  uint8_t* result = malloc() // dont remember exactly malloc syntax
  
  // if even
  if (len % 2 == 0) {
    // returns the char in the middle
    return memcpy(result, input[(len-1)/2], 1)
  } else {
    return memcpy(result, input[(len-1)/2], 2)
  } 
}","You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'."
source_code_017,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 277}, 'ica_id': {0: 2672}, 'question': {0: ""You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'.""}, 'rules': {0: []}, 'examples': {0: ""'abcde' => 'c', 'abcdef' => 'cd'""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 290}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>

std::string getMiddleCharacters(std::string str) {
    int length = str.length();
    if (length % 2 == 0) {
        return str.substr(length / 2 - 1, 2);
    } else {
        return str.substr(length / 2, 1);
    }
}

int main() {
    std::string input1 = ""abcde"";
    std::string input2 = ""abcdef"";

    // Test case 1
    std::cout << ""Middle characters of '"" << input1 << ""': "" << getMiddleCharacters(input1) << std::endl;

    // Test case 2
    std::cout << ""Middle characters of '"" << input2 << ""': "" << getMiddleCharacters(input2) << std::endl;

    return 0;
}
","uint8_t* getMiddleChars(uint8_t* input, uint32_t len) {
  // can we use new? do we have to import string? dont remember lib name.
  uint8_t* result = malloc() // dont remember exactly malloc syntax
  
  // if even
  if (len % 2 == 0) {
    // returns the char in the middle
    return memcpy(result, input[(len-1)/2], 1)
  } else {
    return memcpy(result, input[(len-1)/2], 2)
  } 
}","You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'."
source_code_017,gpt-4_00,0.1,"{'ic_id': {0: 277}, 'ica_id': {0: 2672}, 'question': {0: ""You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'.""}, 'rules': {0: []}, 'examples': {0: ""'abcde' => 'c', 'abcdef' => 'cd'""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 290}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>

std::string getMiddleCharacters(std::string str) {
    int length = str.length();
    if (length % 2 == 0) {
        return str.substr(length / 2 - 1, 2);
    } else {
        return str.substr(length / 2, 1);
    }
}

int main() {
    std::string input1 = ""abcde"";
    std::string input2 = ""abcdef"";

    // Test case 1
    std::cout << ""Middle characters of '"" << input1 << ""': "" << getMiddleCharacters(input1) << std::endl;

    // Test case 2
    std::cout << ""Middle characters of '"" << input2 << ""': "" << getMiddleCharacters(input2) << std::endl;

    return 0;
}
","uint8_t* getMiddleChars(uint8_t* input, uint32_t len) {
  // can we use new? do we have to import string? dont remember lib name.
  uint8_t* result = malloc() // dont remember exactly malloc syntax
  
  // if even
  if (len % 2 == 0) {
    // returns the char in the middle
    return memcpy(result, input[(len-1)/2], 1)
  } else {
    return memcpy(result, input[(len-1)/2], 2)
  } 
}","You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'."
source_code_017,gpt-4_01,0.2,"{'ic_id': {0: 277}, 'ica_id': {0: 2672}, 'question': {0: ""You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'.""}, 'rules': {0: []}, 'examples': {0: ""'abcde' => 'c', 'abcdef' => 'cd'""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 290}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>

std::string getMiddleCharacters(std::string str) {
    int length = str.length();
    if (length % 2 == 0) {
        return str.substr(length / 2 - 1, 2);
    } else {
        return str.substr(length / 2, 1);
    }
}

int main() {
    std::string input1 = ""abcde"";
    std::string input2 = ""abcdef"";

    // Test case 1
    std::cout << ""Middle characters of '"" << input1 << ""': "" << getMiddleCharacters(input1) << std::endl;

    // Test case 2
    std::cout << ""Middle characters of '"" << input2 << ""': "" << getMiddleCharacters(input2) << std::endl;

    return 0;
}
","uint8_t* getMiddleChars(uint8_t* input, uint32_t len) {
  // can we use new? do we have to import string? dont remember lib name.
  uint8_t* result = malloc() // dont remember exactly malloc syntax
  
  // if even
  if (len % 2 == 0) {
    // returns the char in the middle
    return memcpy(result, input[(len-1)/2], 1)
  } else {
    return memcpy(result, input[(len-1)/2], 2)
  } 
}","You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'."
source_code_017,gpt-4-turbo_00,0.2,"{'ic_id': {0: 277}, 'ica_id': {0: 2672}, 'question': {0: ""You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'.""}, 'rules': {0: []}, 'examples': {0: ""'abcde' => 'c', 'abcdef' => 'cd'""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 290}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>

std::string getMiddleCharacters(std::string str) {
    int length = str.length();
    if (length % 2 == 0) {
        return str.substr(length / 2 - 1, 2);
    } else {
        return str.substr(length / 2, 1);
    }
}

int main() {
    std::string input1 = ""abcde"";
    std::string input2 = ""abcdef"";

    // Test case 1
    std::cout << ""Middle characters of '"" << input1 << ""': "" << getMiddleCharacters(input1) << std::endl;

    // Test case 2
    std::cout << ""Middle characters of '"" << input2 << ""': "" << getMiddleCharacters(input2) << std::endl;

    return 0;
}
","uint8_t* getMiddleChars(uint8_t* input, uint32_t len) {
  // can we use new? do we have to import string? dont remember lib name.
  uint8_t* result = malloc() // dont remember exactly malloc syntax
  
  // if even
  if (len % 2 == 0) {
    // returns the char in the middle
    return memcpy(result, input[(len-1)/2], 1)
  } else {
    return memcpy(result, input[(len-1)/2], 2)
  } 
}","You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'."
source_code_017,gpt-4-turbo_01,0.2,"{'ic_id': {0: 277}, 'ica_id': {0: 2672}, 'question': {0: ""You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'.""}, 'rules': {0: []}, 'examples': {0: ""'abcde' => 'c', 'abcdef' => 'cd'""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 290}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","#include <iostream>
#include <string>

std::string getMiddleCharacters(std::string str) {
    int length = str.length();
    if (length % 2 == 0) {
        return str.substr(length / 2 - 1, 2);
    } else {
        return str.substr(length / 2, 1);
    }
}

int main() {
    std::string input1 = ""abcde"";
    std::string input2 = ""abcdef"";

    // Test case 1
    std::cout << ""Middle characters of '"" << input1 << ""': "" << getMiddleCharacters(input1) << std::endl;

    // Test case 2
    std::cout << ""Middle characters of '"" << input2 << ""': "" << getMiddleCharacters(input2) << std::endl;

    return 0;
}
","uint8_t* getMiddleChars(uint8_t* input, uint32_t len) {
  // can we use new? do we have to import string? dont remember lib name.
  uint8_t* result = malloc() // dont remember exactly malloc syntax
  
  // if even
  if (len % 2 == 0) {
    // returns the char in the middle
    return memcpy(result, input[(len-1)/2], 1)
  } else {
    return memcpy(result, input[(len-1)/2], 2)
  } 
}","You are given a string. Write a function that returns the middle character of the string. If the length of the string is odd, return the middle character. If the length of the string is even, return the middle two characters. For example, given the string 'abcde', the function should return 'c'. Given the string 'abcdef', the function should return 'cd'."
source_code_018,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 280}, 'ica_id': {0: 2717}, 'question': {0: ""Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function.""}, 'rules': {0: ['The Node.js function must not use regular expressions for validation.', 'The React component should show the result interactively as the user types.']}, 'examples': {0: ""Input: '()()()', Output: true\nInput: '(()', Output: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 6}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","// Node.js Function
function validateParentheses(str) {
    const stack = [];
    const pairs = {
        '(': ')',
    };

    for (let char of str) {
        if (char === '(') {
            stack.push(char);
        } else if (char === ')') {
            if (stack.length === 0 || pairs[stack.pop()] !== char) {
                return false;
            }
        }
    }

    return stack.length === 0;
}

// React Component
import React, { useState } from 'react';

const ParenthesesValidator = () => {
    const [input, setInput] = useState('');
  
    const handleInputChange = (e) => {
        setInput(e.target.value);
    };

    const isValid = validateParentheses(input);

    return (
        <div>
            <input
                type=""text""
                value={input}
                onChange={handleInputChange}
            />
            {isValid ? ""Output: true"" : ""Output: false""}
        </div>
    );
};

export default ParenthesesValidator;
","const fs = require('fs');
const Joi = require('joi');

// Define your JSON schema using Joi
const schema = Joi.object({
  // Define your schema structure here
  name: Joi.string().required(),
  age: Joi.number().integer().min(18),
  email: Joi.string().email(),
  // Add more properties as needed
});

// Function to read and validate JSON configuration
function validateJsonConfig(filePath) {
  try {
    // Read the JSON configuration file
    const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Validate against the schema
    const { error } = schema.validate(jsonData);

    if (error) {
      console.error('Validation Error:', error.message);
    } else {
      console.log('Validation Successful. Configuration is valid.');
    }
  } catch (err) {
    console.error('Error reading or parsing the JSON file:', err.message);
  }
}

// Provide the path to your JSON configuration file
const configFilePath = 'path/to/your/config.json';

// Call the function to validate the JSON configuration
validateJsonConfig(configFilePath);","Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function."
source_code_018,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 280}, 'ica_id': {0: 2717}, 'question': {0: ""Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function.""}, 'rules': {0: ['The Node.js function must not use regular expressions for validation.', 'The React component should show the result interactively as the user types.']}, 'examples': {0: ""Input: '()()()', Output: true\nInput: '(()', Output: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 6}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","// Node.js Function
function validateParentheses(str) {
    const stack = [];
    const pairs = {
        '(': ')',
    };

    for (let char of str) {
        if (char === '(') {
            stack.push(char);
        } else if (char === ')') {
            if (stack.length === 0 || pairs[stack.pop()] !== char) {
                return false;
            }
        }
    }

    return stack.length === 0;
}

// React Component
import React, { useState } from 'react';

const ParenthesesValidator = () => {
    const [input, setInput] = useState('');
  
    const handleInputChange = (e) => {
        setInput(e.target.value);
    };

    const isValid = validateParentheses(input);

    return (
        <div>
            <input
                type=""text""
                value={input}
                onChange={handleInputChange}
            />
            {isValid ? ""Output: true"" : ""Output: false""}
        </div>
    );
};

export default ParenthesesValidator;
","const fs = require('fs');
const Joi = require('joi');

// Define your JSON schema using Joi
const schema = Joi.object({
  // Define your schema structure here
  name: Joi.string().required(),
  age: Joi.number().integer().min(18),
  email: Joi.string().email(),
  // Add more properties as needed
});

// Function to read and validate JSON configuration
function validateJsonConfig(filePath) {
  try {
    // Read the JSON configuration file
    const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Validate against the schema
    const { error } = schema.validate(jsonData);

    if (error) {
      console.error('Validation Error:', error.message);
    } else {
      console.log('Validation Successful. Configuration is valid.');
    }
  } catch (err) {
    console.error('Error reading or parsing the JSON file:', err.message);
  }
}

// Provide the path to your JSON configuration file
const configFilePath = 'path/to/your/config.json';

// Call the function to validate the JSON configuration
validateJsonConfig(configFilePath);","Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function."
source_code_018,gpt-4_00,0.1,"{'ic_id': {0: 280}, 'ica_id': {0: 2717}, 'question': {0: ""Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function.""}, 'rules': {0: ['The Node.js function must not use regular expressions for validation.', 'The React component should show the result interactively as the user types.']}, 'examples': {0: ""Input: '()()()', Output: true\nInput: '(()', Output: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 6}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","// Node.js Function
function validateParentheses(str) {
    const stack = [];
    const pairs = {
        '(': ')',
    };

    for (let char of str) {
        if (char === '(') {
            stack.push(char);
        } else if (char === ')') {
            if (stack.length === 0 || pairs[stack.pop()] !== char) {
                return false;
            }
        }
    }

    return stack.length === 0;
}

// React Component
import React, { useState } from 'react';

const ParenthesesValidator = () => {
    const [input, setInput] = useState('');
  
    const handleInputChange = (e) => {
        setInput(e.target.value);
    };

    const isValid = validateParentheses(input);

    return (
        <div>
            <input
                type=""text""
                value={input}
                onChange={handleInputChange}
            />
            {isValid ? ""Output: true"" : ""Output: false""}
        </div>
    );
};

export default ParenthesesValidator;
","const fs = require('fs');
const Joi = require('joi');

// Define your JSON schema using Joi
const schema = Joi.object({
  // Define your schema structure here
  name: Joi.string().required(),
  age: Joi.number().integer().min(18),
  email: Joi.string().email(),
  // Add more properties as needed
});

// Function to read and validate JSON configuration
function validateJsonConfig(filePath) {
  try {
    // Read the JSON configuration file
    const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Validate against the schema
    const { error } = schema.validate(jsonData);

    if (error) {
      console.error('Validation Error:', error.message);
    } else {
      console.log('Validation Successful. Configuration is valid.');
    }
  } catch (err) {
    console.error('Error reading or parsing the JSON file:', err.message);
  }
}

// Provide the path to your JSON configuration file
const configFilePath = 'path/to/your/config.json';

// Call the function to validate the JSON configuration
validateJsonConfig(configFilePath);","Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function."
source_code_018,gpt-4_01,0.1,"{'ic_id': {0: 280}, 'ica_id': {0: 2717}, 'question': {0: ""Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function.""}, 'rules': {0: ['The Node.js function must not use regular expressions for validation.', 'The React component should show the result interactively as the user types.']}, 'examples': {0: ""Input: '()()()', Output: true\nInput: '(()', Output: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 6}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","// Node.js Function
function validateParentheses(str) {
    const stack = [];
    const pairs = {
        '(': ')',
    };

    for (let char of str) {
        if (char === '(') {
            stack.push(char);
        } else if (char === ')') {
            if (stack.length === 0 || pairs[stack.pop()] !== char) {
                return false;
            }
        }
    }

    return stack.length === 0;
}

// React Component
import React, { useState } from 'react';

const ParenthesesValidator = () => {
    const [input, setInput] = useState('');
  
    const handleInputChange = (e) => {
        setInput(e.target.value);
    };

    const isValid = validateParentheses(input);

    return (
        <div>
            <input
                type=""text""
                value={input}
                onChange={handleInputChange}
            />
            {isValid ? ""Output: true"" : ""Output: false""}
        </div>
    );
};

export default ParenthesesValidator;
","const fs = require('fs');
const Joi = require('joi');

// Define your JSON schema using Joi
const schema = Joi.object({
  // Define your schema structure here
  name: Joi.string().required(),
  age: Joi.number().integer().min(18),
  email: Joi.string().email(),
  // Add more properties as needed
});

// Function to read and validate JSON configuration
function validateJsonConfig(filePath) {
  try {
    // Read the JSON configuration file
    const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Validate against the schema
    const { error } = schema.validate(jsonData);

    if (error) {
      console.error('Validation Error:', error.message);
    } else {
      console.log('Validation Successful. Configuration is valid.');
    }
  } catch (err) {
    console.error('Error reading or parsing the JSON file:', err.message);
  }
}

// Provide the path to your JSON configuration file
const configFilePath = 'path/to/your/config.json';

// Call the function to validate the JSON configuration
validateJsonConfig(configFilePath);","Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function."
source_code_018,gpt-4-turbo_00,0.1,"{'ic_id': {0: 280}, 'ica_id': {0: 2717}, 'question': {0: ""Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function.""}, 'rules': {0: ['The Node.js function must not use regular expressions for validation.', 'The React component should show the result interactively as the user types.']}, 'examples': {0: ""Input: '()()()', Output: true\nInput: '(()', Output: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 6}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","// Node.js Function
function validateParentheses(str) {
    const stack = [];
    const pairs = {
        '(': ')',
    };

    for (let char of str) {
        if (char === '(') {
            stack.push(char);
        } else if (char === ')') {
            if (stack.length === 0 || pairs[stack.pop()] !== char) {
                return false;
            }
        }
    }

    return stack.length === 0;
}

// React Component
import React, { useState } from 'react';

const ParenthesesValidator = () => {
    const [input, setInput] = useState('');
  
    const handleInputChange = (e) => {
        setInput(e.target.value);
    };

    const isValid = validateParentheses(input);

    return (
        <div>
            <input
                type=""text""
                value={input}
                onChange={handleInputChange}
            />
            {isValid ? ""Output: true"" : ""Output: false""}
        </div>
    );
};

export default ParenthesesValidator;
","const fs = require('fs');
const Joi = require('joi');

// Define your JSON schema using Joi
const schema = Joi.object({
  // Define your schema structure here
  name: Joi.string().required(),
  age: Joi.number().integer().min(18),
  email: Joi.string().email(),
  // Add more properties as needed
});

// Function to read and validate JSON configuration
function validateJsonConfig(filePath) {
  try {
    // Read the JSON configuration file
    const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Validate against the schema
    const { error } = schema.validate(jsonData);

    if (error) {
      console.error('Validation Error:', error.message);
    } else {
      console.log('Validation Successful. Configuration is valid.');
    }
  } catch (err) {
    console.error('Error reading or parsing the JSON file:', err.message);
  }
}

// Provide the path to your JSON configuration file
const configFilePath = 'path/to/your/config.json';

// Call the function to validate the JSON configuration
validateJsonConfig(configFilePath);","Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function."
source_code_018,gpt-4-turbo_01,0.1,"{'ic_id': {0: 280}, 'ica_id': {0: 2717}, 'question': {0: ""Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function.""}, 'rules': {0: ['The Node.js function must not use regular expressions for validation.', 'The React component should show the result interactively as the user types.']}, 'examples': {0: ""Input: '()()()', Output: true\nInput: '(()', Output: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 6}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","// Node.js Function
function validateParentheses(str) {
    const stack = [];
    const pairs = {
        '(': ')',
    };

    for (let char of str) {
        if (char === '(') {
            stack.push(char);
        } else if (char === ')') {
            if (stack.length === 0 || pairs[stack.pop()] !== char) {
                return false;
            }
        }
    }

    return stack.length === 0;
}

// React Component
import React, { useState } from 'react';

const ParenthesesValidator = () => {
    const [input, setInput] = useState('');
  
    const handleInputChange = (e) => {
        setInput(e.target.value);
    };

    const isValid = validateParentheses(input);

    return (
        <div>
            <input
                type=""text""
                value={input}
                onChange={handleInputChange}
            />
            {isValid ? ""Output: true"" : ""Output: false""}
        </div>
    );
};

export default ParenthesesValidator;
","const fs = require('fs');
const Joi = require('joi');

// Define your JSON schema using Joi
const schema = Joi.object({
  // Define your schema structure here
  name: Joi.string().required(),
  age: Joi.number().integer().min(18),
  email: Joi.string().email(),
  // Add more properties as needed
});

// Function to read and validate JSON configuration
function validateJsonConfig(filePath) {
  try {
    // Read the JSON configuration file
    const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Validate against the schema
    const { error } = schema.validate(jsonData);

    if (error) {
      console.error('Validation Error:', error.message);
    } else {
      console.log('Validation Successful. Configuration is valid.');
    }
  } catch (err) {
    console.error('Error reading or parsing the JSON file:', err.message);
  }
}

// Provide the path to your JSON configuration file
const configFilePath = 'path/to/your/config.json';

// Call the function to validate the JSON configuration
validateJsonConfig(configFilePath);","Create a function in Node.js that will accept a string representing a sequence of opening and closing parentheses, such as '()()()' or '(()', and determine if the sequence is balanced. For a sequence to be balanced, every opening parenthesis must be followed by a corresponding closing parenthesis in the correct order. Your function should return true if the sequence is balanced and false otherwise. In React, create a simple component that allows the user to input a sequence of parentheses and displays the validation result using the Node.js function."
source_code_019,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 286}, 'ica_id': {0: 2723}, 'question': {0: 'Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes.'}, 'rules': {0: ['The input should validate hex color codes.', 'Show a live color preview next to the RGB code.', 'Use state management effectively.']}, 'examples': {0: 'Input: #FF5733\nOutput: RGB(255, 87, 51)\n\nInput: #BADA55\nOutput: RGB(186, 218, 85)'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 5}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","import React, { useState } from 'react';

const hexToRgb = (hex) => {
  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex)) {
    return null;
  }

  let hexValue = hex.slice(1);
  if (hexValue.length === 3) {
    hexValue = hexValue[0] + hexValue[0] + hexValue[1] + hexValue[1] + hexValue[2] + hexValue[2];
  }

  const rgb = [
    parseInt(hexValue.substring(0, 2), 16),
    parseInt(hexValue.substring(2, 4), 16),
    parseInt(hexValue.substring(4, 6), 16)
  ];

  return `RGB(${rgb.join(', ')})`;
};

const ColorConverter = () => {
  const [hexColor, setHexColor] = useState('');
  const [rgbColor, setRgbColor] = useState(null);

  const handleHexInputChange = (event) => {
    const newHexColor = event.target.value;
    setHexColor(newHexColor);

    const newRgbColor = hexToRgb(newHexColor);
    setRgbColor(newRgbColor);
  };

  return (
    <div>
      <label htmlFor=""hexInput"">Hex Color Code:</label>
      <input
        type=""text""
        id=""hexInput""
        value={hexColor}
        onChange={handleHexInputChange}
        style={{ backgroundColor: hexColor }}
      />

      {rgbColor && (
        <div>
          <p>RGB Color: {rgbColor}</p>
          <div
            style={{
              width: '50px',
              height: '50px',
              backgroundColor: hexColor,
              border: '1px solid black'
            }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default ColorConverter;
","// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));","Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes."
source_code_019,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 286}, 'ica_id': {0: 2723}, 'question': {0: 'Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes.'}, 'rules': {0: ['The input should validate hex color codes.', 'Show a live color preview next to the RGB code.', 'Use state management effectively.']}, 'examples': {0: 'Input: #FF5733\nOutput: RGB(255, 87, 51)\n\nInput: #BADA55\nOutput: RGB(186, 218, 85)'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 5}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","import React, { useState } from 'react';

const hexToRgb = (hex) => {
  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex)) {
    return null;
  }

  let hexValue = hex.slice(1);
  if (hexValue.length === 3) {
    hexValue = hexValue[0] + hexValue[0] + hexValue[1] + hexValue[1] + hexValue[2] + hexValue[2];
  }

  const rgb = [
    parseInt(hexValue.substring(0, 2), 16),
    parseInt(hexValue.substring(2, 4), 16),
    parseInt(hexValue.substring(4, 6), 16)
  ];

  return `RGB(${rgb.join(', ')})`;
};

const ColorConverter = () => {
  const [hexColor, setHexColor] = useState('');
  const [rgbColor, setRgbColor] = useState(null);

  const handleHexInputChange = (event) => {
    const newHexColor = event.target.value;
    setHexColor(newHexColor);

    const newRgbColor = hexToRgb(newHexColor);
    setRgbColor(newRgbColor);
  };

  return (
    <div>
      <label htmlFor=""hexInput"">Hex Color Code:</label>
      <input
        type=""text""
        id=""hexInput""
        value={hexColor}
        onChange={handleHexInputChange}
        style={{ backgroundColor: hexColor }}
      />

      {rgbColor && (
        <div>
          <p>RGB Color: {rgbColor}</p>
          <div
            style={{
              width: '50px',
              height: '50px',
              backgroundColor: hexColor,
              border: '1px solid black'
            }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default ColorConverter;
","// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));","Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes."
source_code_019,gpt-4_00,0.1,"{'ic_id': {0: 286}, 'ica_id': {0: 2723}, 'question': {0: 'Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes.'}, 'rules': {0: ['The input should validate hex color codes.', 'Show a live color preview next to the RGB code.', 'Use state management effectively.']}, 'examples': {0: 'Input: #FF5733\nOutput: RGB(255, 87, 51)\n\nInput: #BADA55\nOutput: RGB(186, 218, 85)'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 5}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","import React, { useState } from 'react';

const hexToRgb = (hex) => {
  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex)) {
    return null;
  }

  let hexValue = hex.slice(1);
  if (hexValue.length === 3) {
    hexValue = hexValue[0] + hexValue[0] + hexValue[1] + hexValue[1] + hexValue[2] + hexValue[2];
  }

  const rgb = [
    parseInt(hexValue.substring(0, 2), 16),
    parseInt(hexValue.substring(2, 4), 16),
    parseInt(hexValue.substring(4, 6), 16)
  ];

  return `RGB(${rgb.join(', ')})`;
};

const ColorConverter = () => {
  const [hexColor, setHexColor] = useState('');
  const [rgbColor, setRgbColor] = useState(null);

  const handleHexInputChange = (event) => {
    const newHexColor = event.target.value;
    setHexColor(newHexColor);

    const newRgbColor = hexToRgb(newHexColor);
    setRgbColor(newRgbColor);
  };

  return (
    <div>
      <label htmlFor=""hexInput"">Hex Color Code:</label>
      <input
        type=""text""
        id=""hexInput""
        value={hexColor}
        onChange={handleHexInputChange}
        style={{ backgroundColor: hexColor }}
      />

      {rgbColor && (
        <div>
          <p>RGB Color: {rgbColor}</p>
          <div
            style={{
              width: '50px',
              height: '50px',
              backgroundColor: hexColor,
              border: '1px solid black'
            }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default ColorConverter;
","// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));","Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes."
source_code_019,gpt-4_01,0.1,"{'ic_id': {0: 286}, 'ica_id': {0: 2723}, 'question': {0: 'Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes.'}, 'rules': {0: ['The input should validate hex color codes.', 'Show a live color preview next to the RGB code.', 'Use state management effectively.']}, 'examples': {0: 'Input: #FF5733\nOutput: RGB(255, 87, 51)\n\nInput: #BADA55\nOutput: RGB(186, 218, 85)'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 5}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","import React, { useState } from 'react';

const hexToRgb = (hex) => {
  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex)) {
    return null;
  }

  let hexValue = hex.slice(1);
  if (hexValue.length === 3) {
    hexValue = hexValue[0] + hexValue[0] + hexValue[1] + hexValue[1] + hexValue[2] + hexValue[2];
  }

  const rgb = [
    parseInt(hexValue.substring(0, 2), 16),
    parseInt(hexValue.substring(2, 4), 16),
    parseInt(hexValue.substring(4, 6), 16)
  ];

  return `RGB(${rgb.join(', ')})`;
};

const ColorConverter = () => {
  const [hexColor, setHexColor] = useState('');
  const [rgbColor, setRgbColor] = useState(null);

  const handleHexInputChange = (event) => {
    const newHexColor = event.target.value;
    setHexColor(newHexColor);

    const newRgbColor = hexToRgb(newHexColor);
    setRgbColor(newRgbColor);
  };

  return (
    <div>
      <label htmlFor=""hexInput"">Hex Color Code:</label>
      <input
        type=""text""
        id=""hexInput""
        value={hexColor}
        onChange={handleHexInputChange}
        style={{ backgroundColor: hexColor }}
      />

      {rgbColor && (
        <div>
          <p>RGB Color: {rgbColor}</p>
          <div
            style={{
              width: '50px',
              height: '50px',
              backgroundColor: hexColor,
              border: '1px solid black'
            }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default ColorConverter;
","// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));","Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes."
source_code_019,gpt-4-turbo_00,0.1,"{'ic_id': {0: 286}, 'ica_id': {0: 2723}, 'question': {0: 'Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes.'}, 'rules': {0: ['The input should validate hex color codes.', 'Show a live color preview next to the RGB code.', 'Use state management effectively.']}, 'examples': {0: 'Input: #FF5733\nOutput: RGB(255, 87, 51)\n\nInput: #BADA55\nOutput: RGB(186, 218, 85)'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 5}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","import React, { useState } from 'react';

const hexToRgb = (hex) => {
  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex)) {
    return null;
  }

  let hexValue = hex.slice(1);
  if (hexValue.length === 3) {
    hexValue = hexValue[0] + hexValue[0] + hexValue[1] + hexValue[1] + hexValue[2] + hexValue[2];
  }

  const rgb = [
    parseInt(hexValue.substring(0, 2), 16),
    parseInt(hexValue.substring(2, 4), 16),
    parseInt(hexValue.substring(4, 6), 16)
  ];

  return `RGB(${rgb.join(', ')})`;
};

const ColorConverter = () => {
  const [hexColor, setHexColor] = useState('');
  const [rgbColor, setRgbColor] = useState(null);

  const handleHexInputChange = (event) => {
    const newHexColor = event.target.value;
    setHexColor(newHexColor);

    const newRgbColor = hexToRgb(newHexColor);
    setRgbColor(newRgbColor);
  };

  return (
    <div>
      <label htmlFor=""hexInput"">Hex Color Code:</label>
      <input
        type=""text""
        id=""hexInput""
        value={hexColor}
        onChange={handleHexInputChange}
        style={{ backgroundColor: hexColor }}
      />

      {rgbColor && (
        <div>
          <p>RGB Color: {rgbColor}</p>
          <div
            style={{
              width: '50px',
              height: '50px',
              backgroundColor: hexColor,
              border: '1px solid black'
            }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default ColorConverter;
","// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));","Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes."
source_code_019,gpt-4-turbo_01,0.1,"{'ic_id': {0: 286}, 'ica_id': {0: 2723}, 'question': {0: 'Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes.'}, 'rules': {0: ['The input should validate hex color codes.', 'Show a live color preview next to the RGB code.', 'Use state management effectively.']}, 'examples': {0: 'Input: #FF5733\nOutput: RGB(255, 87, 51)\n\nInput: #BADA55\nOutput: RGB(186, 218, 85)'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 5}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 25.0}}","import React, { useState } from 'react';

const hexToRgb = (hex) => {
  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex)) {
    return null;
  }

  let hexValue = hex.slice(1);
  if (hexValue.length === 3) {
    hexValue = hexValue[0] + hexValue[0] + hexValue[1] + hexValue[1] + hexValue[2] + hexValue[2];
  }

  const rgb = [
    parseInt(hexValue.substring(0, 2), 16),
    parseInt(hexValue.substring(2, 4), 16),
    parseInt(hexValue.substring(4, 6), 16)
  ];

  return `RGB(${rgb.join(', ')})`;
};

const ColorConverter = () => {
  const [hexColor, setHexColor] = useState('');
  const [rgbColor, setRgbColor] = useState(null);

  const handleHexInputChange = (event) => {
    const newHexColor = event.target.value;
    setHexColor(newHexColor);

    const newRgbColor = hexToRgb(newHexColor);
    setRgbColor(newRgbColor);
  };

  return (
    <div>
      <label htmlFor=""hexInput"">Hex Color Code:</label>
      <input
        type=""text""
        id=""hexInput""
        value={hexColor}
        onChange={handleHexInputChange}
        style={{ backgroundColor: hexColor }}
      />

      {rgbColor && (
        <div>
          <p>RGB Color: {rgbColor}</p>
          <div
            style={{
              width: '50px',
              height: '50px',
              backgroundColor: hexColor,
              border: '1px solid black'
            }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default ColorConverter;
","// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));","Build a tool to convert text color codes from hexadecimal to RGB format using React, with a live preview of the color. The tool should include an input field for the user to type or paste the hex color code (e.g., #FF5733), and upon input, it should display the equivalent RGB color code (e.g., RGB(255, 87, 51)) and a small visual representation of the color. Ensure the input only accepts valid hex color codes."
source_code_020,gpt-3.5-turbo_00,0.6,"{'ic_id': {0: 287}, 'ica_id': {0: 2731}, 'question': {0: ""Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container.""}, 'rules': {0: ['Image should be optimized for size', 'The container should run without errors']}, 'examples': {0: ""Input: Dockerfile creation\nExpected Output: A working Dockerfile with a 'Hello, World!' Python script that can be built and run inside a Docker container.""}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 260}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 16.67}, 'total_weight': {0: 25.0}}","# Use a slim Python base image for optimization
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script into the container
COPY hello.py /app/hello.py

# Define the command to run the Python script
CMD [""python"", ""/app/hello.py""]
","FROM python:3.8
WORKDIR /app

COPY helloworld.py .
RUN pip install --no-cache-dir -r requirements.txt
CMD [""python"", ""helloworld.py""]


## PYTHON PROGRAM
helloworld.py
print(""Hello, World!"")


## BUILD COMMAND
docker build -t ""python:helloworld"" .
docker run -itd --name python python:helloworld","Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container."
source_code_020,gpt-3.5-turbo_01,0.6,"{'ic_id': {0: 287}, 'ica_id': {0: 2731}, 'question': {0: ""Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container.""}, 'rules': {0: ['Image should be optimized for size', 'The container should run without errors']}, 'examples': {0: ""Input: Dockerfile creation\nExpected Output: A working Dockerfile with a 'Hello, World!' Python script that can be built and run inside a Docker container.""}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 260}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 16.67}, 'total_weight': {0: 25.0}}","# Use a slim Python base image for optimization
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script into the container
COPY hello.py /app/hello.py

# Define the command to run the Python script
CMD [""python"", ""/app/hello.py""]
","FROM python:3.8
WORKDIR /app

COPY helloworld.py .
RUN pip install --no-cache-dir -r requirements.txt
CMD [""python"", ""helloworld.py""]


## PYTHON PROGRAM
helloworld.py
print(""Hello, World!"")


## BUILD COMMAND
docker build -t ""python:helloworld"" .
docker run -itd --name python python:helloworld","Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container."
source_code_020,gpt-4_00,0.6,"{'ic_id': {0: 287}, 'ica_id': {0: 2731}, 'question': {0: ""Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container.""}, 'rules': {0: ['Image should be optimized for size', 'The container should run without errors']}, 'examples': {0: ""Input: Dockerfile creation\nExpected Output: A working Dockerfile with a 'Hello, World!' Python script that can be built and run inside a Docker container.""}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 260}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 16.67}, 'total_weight': {0: 25.0}}","# Use a slim Python base image for optimization
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script into the container
COPY hello.py /app/hello.py

# Define the command to run the Python script
CMD [""python"", ""/app/hello.py""]
","FROM python:3.8
WORKDIR /app

COPY helloworld.py .
RUN pip install --no-cache-dir -r requirements.txt
CMD [""python"", ""helloworld.py""]


## PYTHON PROGRAM
helloworld.py
print(""Hello, World!"")


## BUILD COMMAND
docker build -t ""python:helloworld"" .
docker run -itd --name python python:helloworld","Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container."
source_code_020,gpt-4_01,0.7,"{'ic_id': {0: 287}, 'ica_id': {0: 2731}, 'question': {0: ""Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container.""}, 'rules': {0: ['Image should be optimized for size', 'The container should run without errors']}, 'examples': {0: ""Input: Dockerfile creation\nExpected Output: A working Dockerfile with a 'Hello, World!' Python script that can be built and run inside a Docker container.""}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 260}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 16.67}, 'total_weight': {0: 25.0}}","# Use a slim Python base image for optimization
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script into the container
COPY hello.py /app/hello.py

# Define the command to run the Python script
CMD [""python"", ""/app/hello.py""]
","FROM python:3.8
WORKDIR /app

COPY helloworld.py .
RUN pip install --no-cache-dir -r requirements.txt
CMD [""python"", ""helloworld.py""]


## PYTHON PROGRAM
helloworld.py
print(""Hello, World!"")


## BUILD COMMAND
docker build -t ""python:helloworld"" .
docker run -itd --name python python:helloworld","Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container."
source_code_020,gpt-4-turbo_00,0.6,"{'ic_id': {0: 287}, 'ica_id': {0: 2731}, 'question': {0: ""Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container.""}, 'rules': {0: ['Image should be optimized for size', 'The container should run without errors']}, 'examples': {0: ""Input: Dockerfile creation\nExpected Output: A working Dockerfile with a 'Hello, World!' Python script that can be built and run inside a Docker container.""}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 260}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 16.67}, 'total_weight': {0: 25.0}}","# Use a slim Python base image for optimization
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script into the container
COPY hello.py /app/hello.py

# Define the command to run the Python script
CMD [""python"", ""/app/hello.py""]
","FROM python:3.8
WORKDIR /app

COPY helloworld.py .
RUN pip install --no-cache-dir -r requirements.txt
CMD [""python"", ""helloworld.py""]


## PYTHON PROGRAM
helloworld.py
print(""Hello, World!"")


## BUILD COMMAND
docker build -t ""python:helloworld"" .
docker run -itd --name python python:helloworld","Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container."
source_code_020,gpt-4-turbo_01,0.5,"{'ic_id': {0: 287}, 'ica_id': {0: 2731}, 'question': {0: ""Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container.""}, 'rules': {0: ['Image should be optimized for size', 'The container should run without errors']}, 'examples': {0: ""Input: Dockerfile creation\nExpected Output: A working Dockerfile with a 'Hello, World!' Python script that can be built and run inside a Docker container.""}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 260}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 16.67}, 'total_weight': {0: 25.0}}","# Use a slim Python base image for optimization
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script into the container
COPY hello.py /app/hello.py

# Define the command to run the Python script
CMD [""python"", ""/app/hello.py""]
","FROM python:3.8
WORKDIR /app

COPY helloworld.py .
RUN pip install --no-cache-dir -r requirements.txt
CMD [""python"", ""helloworld.py""]


## PYTHON PROGRAM
helloworld.py
print(""Hello, World!"")


## BUILD COMMAND
docker build -t ""python:helloworld"" .
docker run -itd --name python python:helloworld","Create a Dockerfile that will set up an environment to run a simple Python application. The Python application should be a basic 'Hello, World!' script. The Dockerfile must specify the base image, add the Python script to the image, and define the command to run the script. Make sure the image is optimized for size and build speed. After creating the Dockerfile, provide the commands you would use to build and run the container."
source_code_021,gpt-3.5-turbo_00,0.4,"{'ic_id': {0: 290}, 'ica_id': {0: 2761}, 'question': {0: ""Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'.""}, 'rules': {0: ['Your solution should have a linear time complexity.', 'Avoid using built-in functions that solve this problem directly.']}, 'examples': {0: ""Input: 'abaccdeff'\nOutput: 'b'\n\nInput: 'abcdefggfedcba'\nOutput: None""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 229}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 50.0}}","def find_first_non_repeated_char(input_str):
    char_count = {}
    
    for char in input_str:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in input_str:
        if char_count[char] == 1:
            return char
    
    return None

# Test cases
print(find_first_non_repeated_char('abaccdeff'))  # Output: 'b'
print(find_first_non_repeated_char('abcdefggfedcba'))  # Output: None
","def first_non_repeated_char(string):
    char_count = {}
    non_repeated_chars = set()

    for char in string:
        if char in char_count:
            non_repeated_chars.discard(char)
        else:
            char_count[char] = 1
            non_repeated_chars.add(char)

    for char in string:
        if char in non_repeated_chars:
            return char

    return None

# Example usage
result = first_non_repeated_char('abaccdeff')
print(result)  # Output: 'b'

result = first_non_repeated_char('abcdefggfedcba')
print(result)  # Output: None","Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'."
source_code_021,gpt-3.5-turbo_01,0.4,"{'ic_id': {0: 290}, 'ica_id': {0: 2761}, 'question': {0: ""Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'.""}, 'rules': {0: ['Your solution should have a linear time complexity.', 'Avoid using built-in functions that solve this problem directly.']}, 'examples': {0: ""Input: 'abaccdeff'\nOutput: 'b'\n\nInput: 'abcdefggfedcba'\nOutput: None""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 229}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 50.0}}","def find_first_non_repeated_char(input_str):
    char_count = {}
    
    for char in input_str:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in input_str:
        if char_count[char] == 1:
            return char
    
    return None

# Test cases
print(find_first_non_repeated_char('abaccdeff'))  # Output: 'b'
print(find_first_non_repeated_char('abcdefggfedcba'))  # Output: None
","def first_non_repeated_char(string):
    char_count = {}
    non_repeated_chars = set()

    for char in string:
        if char in char_count:
            non_repeated_chars.discard(char)
        else:
            char_count[char] = 1
            non_repeated_chars.add(char)

    for char in string:
        if char in non_repeated_chars:
            return char

    return None

# Example usage
result = first_non_repeated_char('abaccdeff')
print(result)  # Output: 'b'

result = first_non_repeated_char('abcdefggfedcba')
print(result)  # Output: None","Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'."
source_code_021,gpt-4_00,0.4,"{'ic_id': {0: 290}, 'ica_id': {0: 2761}, 'question': {0: ""Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'.""}, 'rules': {0: ['Your solution should have a linear time complexity.', 'Avoid using built-in functions that solve this problem directly.']}, 'examples': {0: ""Input: 'abaccdeff'\nOutput: 'b'\n\nInput: 'abcdefggfedcba'\nOutput: None""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 229}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 50.0}}","def find_first_non_repeated_char(input_str):
    char_count = {}
    
    for char in input_str:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in input_str:
        if char_count[char] == 1:
            return char
    
    return None

# Test cases
print(find_first_non_repeated_char('abaccdeff'))  # Output: 'b'
print(find_first_non_repeated_char('abcdefggfedcba'))  # Output: None
","def first_non_repeated_char(string):
    char_count = {}
    non_repeated_chars = set()

    for char in string:
        if char in char_count:
            non_repeated_chars.discard(char)
        else:
            char_count[char] = 1
            non_repeated_chars.add(char)

    for char in string:
        if char in non_repeated_chars:
            return char

    return None

# Example usage
result = first_non_repeated_char('abaccdeff')
print(result)  # Output: 'b'

result = first_non_repeated_char('abcdefggfedcba')
print(result)  # Output: None","Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'."
source_code_021,gpt-4_01,0.4,"{'ic_id': {0: 290}, 'ica_id': {0: 2761}, 'question': {0: ""Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'.""}, 'rules': {0: ['Your solution should have a linear time complexity.', 'Avoid using built-in functions that solve this problem directly.']}, 'examples': {0: ""Input: 'abaccdeff'\nOutput: 'b'\n\nInput: 'abcdefggfedcba'\nOutput: None""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 229}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 50.0}}","def find_first_non_repeated_char(input_str):
    char_count = {}
    
    for char in input_str:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in input_str:
        if char_count[char] == 1:
            return char
    
    return None

# Test cases
print(find_first_non_repeated_char('abaccdeff'))  # Output: 'b'
print(find_first_non_repeated_char('abcdefggfedcba'))  # Output: None
","def first_non_repeated_char(string):
    char_count = {}
    non_repeated_chars = set()

    for char in string:
        if char in char_count:
            non_repeated_chars.discard(char)
        else:
            char_count[char] = 1
            non_repeated_chars.add(char)

    for char in string:
        if char in non_repeated_chars:
            return char

    return None

# Example usage
result = first_non_repeated_char('abaccdeff')
print(result)  # Output: 'b'

result = first_non_repeated_char('abcdefggfedcba')
print(result)  # Output: None","Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'."
source_code_021,gpt-4-turbo_00,0.4,"{'ic_id': {0: 290}, 'ica_id': {0: 2761}, 'question': {0: ""Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'.""}, 'rules': {0: ['Your solution should have a linear time complexity.', 'Avoid using built-in functions that solve this problem directly.']}, 'examples': {0: ""Input: 'abaccdeff'\nOutput: 'b'\n\nInput: 'abcdefggfedcba'\nOutput: None""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 229}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 50.0}}","def find_first_non_repeated_char(input_str):
    char_count = {}
    
    for char in input_str:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in input_str:
        if char_count[char] == 1:
            return char
    
    return None

# Test cases
print(find_first_non_repeated_char('abaccdeff'))  # Output: 'b'
print(find_first_non_repeated_char('abcdefggfedcba'))  # Output: None
","def first_non_repeated_char(string):
    char_count = {}
    non_repeated_chars = set()

    for char in string:
        if char in char_count:
            non_repeated_chars.discard(char)
        else:
            char_count[char] = 1
            non_repeated_chars.add(char)

    for char in string:
        if char in non_repeated_chars:
            return char

    return None

# Example usage
result = first_non_repeated_char('abaccdeff')
print(result)  # Output: 'b'

result = first_non_repeated_char('abcdefggfedcba')
print(result)  # Output: None","Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'."
source_code_021,gpt-4-turbo_01,0.4,"{'ic_id': {0: 290}, 'ica_id': {0: 2761}, 'question': {0: ""Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'.""}, 'rules': {0: ['Your solution should have a linear time complexity.', 'Avoid using built-in functions that solve this problem directly.']}, 'examples': {0: ""Input: 'abaccdeff'\nOutput: 'b'\n\nInput: 'abcdefggfedcba'\nOutput: None""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 229}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 50.0}}","def find_first_non_repeated_char(input_str):
    char_count = {}
    
    for char in input_str:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in input_str:
        if char_count[char] == 1:
            return char
    
    return None

# Test cases
print(find_first_non_repeated_char('abaccdeff'))  # Output: 'b'
print(find_first_non_repeated_char('abcdefggfedcba'))  # Output: None
","def first_non_repeated_char(string):
    char_count = {}
    non_repeated_chars = set()

    for char in string:
        if char in char_count:
            non_repeated_chars.discard(char)
        else:
            char_count[char] = 1
            non_repeated_chars.add(char)

    for char in string:
        if char in non_repeated_chars:
            return char

    return None

# Example usage
result = first_non_repeated_char('abaccdeff')
print(result)  # Output: 'b'

result = first_non_repeated_char('abcdefggfedcba')
print(result)  # Output: None","Write a Python function that finds the first non-repeated character in a given string. You should iterate through the string and return the first character that does not have a duplicate later in the string. If every character is repeated, the function should return 'None'."
source_code_022,gpt-3.5-turbo_00,0.4,"{'ic_id': {0: 301}, 'ica_id': {0: 2848}, 'question': {0: ""Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary.""}, 'rules': {0: ['The Dockerfile must be written for Python 3.8 or higher', 'Multi-stage builds are recommended for optimization', 'The base image should be an official Python Docker image', 'The final Docker image should be as small as possible']}, 'examples': {0: 'Input: HTTP GET request to the \'/answer\' route\nExpected Output: {""puzzle"": 42}'}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 299}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","# Use an official Python image as the base image
FROM python:3.8-slim AS builder

# Set the working directory
WORKDIR /app

# Copy the Python requirements file
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Python application code
COPY app/ .

# Build a small production image
FROM python:3.8-slim

# Set the working directory
WORKDIR /app

# Copy installed dependencies
COPY --from=builder /root/.cache /root/.cache

# Copy the Python application code
COPY --from=builder /app /app

# Expose port 5000
EXPOSE 5000

# Define the command to run the Flask app
CMD [""python"", ""app.py""]
","# Stage 1: Build Stage
FROM python:3.8-slim AS builder

WORKDIR /app

# Install dependencies
RUN apt-get update \
    && apt-get install --no-install-recommends -y gcc \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir flask

# Stage 2: Production Stage
FROM python:3.8-slim

WORKDIR /app

# Copy only necessary files from the build stage
COPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=builder /usr/local/bin/flask /usr/local/bin/flask

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Copy application code
COPY app.py .

# Expose the Flask port
EXPOSE 5000

# Start the Flask application
CMD [""flask"", ""run""]

app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/answer')
def answer():
    result = (3 + 7 + 11) * 2
    return jsonify({'puzzle': result})

if __name__ == '__main__':
    app.run()","Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary."
source_code_022,gpt-3.5-turbo_01,0.5,"{'ic_id': {0: 301}, 'ica_id': {0: 2848}, 'question': {0: ""Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary.""}, 'rules': {0: ['The Dockerfile must be written for Python 3.8 or higher', 'Multi-stage builds are recommended for optimization', 'The base image should be an official Python Docker image', 'The final Docker image should be as small as possible']}, 'examples': {0: 'Input: HTTP GET request to the \'/answer\' route\nExpected Output: {""puzzle"": 42}'}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 299}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","# Use an official Python image as the base image
FROM python:3.8-slim AS builder

# Set the working directory
WORKDIR /app

# Copy the Python requirements file
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Python application code
COPY app/ .

# Build a small production image
FROM python:3.8-slim

# Set the working directory
WORKDIR /app

# Copy installed dependencies
COPY --from=builder /root/.cache /root/.cache

# Copy the Python application code
COPY --from=builder /app /app

# Expose port 5000
EXPOSE 5000

# Define the command to run the Flask app
CMD [""python"", ""app.py""]
","# Stage 1: Build Stage
FROM python:3.8-slim AS builder

WORKDIR /app

# Install dependencies
RUN apt-get update \
    && apt-get install --no-install-recommends -y gcc \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir flask

# Stage 2: Production Stage
FROM python:3.8-slim

WORKDIR /app

# Copy only necessary files from the build stage
COPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=builder /usr/local/bin/flask /usr/local/bin/flask

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Copy application code
COPY app.py .

# Expose the Flask port
EXPOSE 5000

# Start the Flask application
CMD [""flask"", ""run""]

app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/answer')
def answer():
    result = (3 + 7 + 11) * 2
    return jsonify({'puzzle': result})

if __name__ == '__main__':
    app.run()","Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary."
source_code_022,gpt-4_00,0.5,"{'ic_id': {0: 301}, 'ica_id': {0: 2848}, 'question': {0: ""Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary.""}, 'rules': {0: ['The Dockerfile must be written for Python 3.8 or higher', 'Multi-stage builds are recommended for optimization', 'The base image should be an official Python Docker image', 'The final Docker image should be as small as possible']}, 'examples': {0: 'Input: HTTP GET request to the \'/answer\' route\nExpected Output: {""puzzle"": 42}'}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 299}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","# Use an official Python image as the base image
FROM python:3.8-slim AS builder

# Set the working directory
WORKDIR /app

# Copy the Python requirements file
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Python application code
COPY app/ .

# Build a small production image
FROM python:3.8-slim

# Set the working directory
WORKDIR /app

# Copy installed dependencies
COPY --from=builder /root/.cache /root/.cache

# Copy the Python application code
COPY --from=builder /app /app

# Expose port 5000
EXPOSE 5000

# Define the command to run the Flask app
CMD [""python"", ""app.py""]
","# Stage 1: Build Stage
FROM python:3.8-slim AS builder

WORKDIR /app

# Install dependencies
RUN apt-get update \
    && apt-get install --no-install-recommends -y gcc \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir flask

# Stage 2: Production Stage
FROM python:3.8-slim

WORKDIR /app

# Copy only necessary files from the build stage
COPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=builder /usr/local/bin/flask /usr/local/bin/flask

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Copy application code
COPY app.py .

# Expose the Flask port
EXPOSE 5000

# Start the Flask application
CMD [""flask"", ""run""]

app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/answer')
def answer():
    result = (3 + 7 + 11) * 2
    return jsonify({'puzzle': result})

if __name__ == '__main__':
    app.run()","Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary."
source_code_022,gpt-4_01,0.4,"{'ic_id': {0: 301}, 'ica_id': {0: 2848}, 'question': {0: ""Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary.""}, 'rules': {0: ['The Dockerfile must be written for Python 3.8 or higher', 'Multi-stage builds are recommended for optimization', 'The base image should be an official Python Docker image', 'The final Docker image should be as small as possible']}, 'examples': {0: 'Input: HTTP GET request to the \'/answer\' route\nExpected Output: {""puzzle"": 42}'}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 299}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","# Use an official Python image as the base image
FROM python:3.8-slim AS builder

# Set the working directory
WORKDIR /app

# Copy the Python requirements file
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Python application code
COPY app/ .

# Build a small production image
FROM python:3.8-slim

# Set the working directory
WORKDIR /app

# Copy installed dependencies
COPY --from=builder /root/.cache /root/.cache

# Copy the Python application code
COPY --from=builder /app /app

# Expose port 5000
EXPOSE 5000

# Define the command to run the Flask app
CMD [""python"", ""app.py""]
","# Stage 1: Build Stage
FROM python:3.8-slim AS builder

WORKDIR /app

# Install dependencies
RUN apt-get update \
    && apt-get install --no-install-recommends -y gcc \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir flask

# Stage 2: Production Stage
FROM python:3.8-slim

WORKDIR /app

# Copy only necessary files from the build stage
COPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=builder /usr/local/bin/flask /usr/local/bin/flask

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Copy application code
COPY app.py .

# Expose the Flask port
EXPOSE 5000

# Start the Flask application
CMD [""flask"", ""run""]

app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/answer')
def answer():
    result = (3 + 7 + 11) * 2
    return jsonify({'puzzle': result})

if __name__ == '__main__':
    app.run()","Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary."
source_code_022,gpt-4-turbo_00,0.4,"{'ic_id': {0: 301}, 'ica_id': {0: 2848}, 'question': {0: ""Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary.""}, 'rules': {0: ['The Dockerfile must be written for Python 3.8 or higher', 'Multi-stage builds are recommended for optimization', 'The base image should be an official Python Docker image', 'The final Docker image should be as small as possible']}, 'examples': {0: 'Input: HTTP GET request to the \'/answer\' route\nExpected Output: {""puzzle"": 42}'}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 299}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","# Use an official Python image as the base image
FROM python:3.8-slim AS builder

# Set the working directory
WORKDIR /app

# Copy the Python requirements file
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Python application code
COPY app/ .

# Build a small production image
FROM python:3.8-slim

# Set the working directory
WORKDIR /app

# Copy installed dependencies
COPY --from=builder /root/.cache /root/.cache

# Copy the Python application code
COPY --from=builder /app /app

# Expose port 5000
EXPOSE 5000

# Define the command to run the Flask app
CMD [""python"", ""app.py""]
","# Stage 1: Build Stage
FROM python:3.8-slim AS builder

WORKDIR /app

# Install dependencies
RUN apt-get update \
    && apt-get install --no-install-recommends -y gcc \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir flask

# Stage 2: Production Stage
FROM python:3.8-slim

WORKDIR /app

# Copy only necessary files from the build stage
COPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=builder /usr/local/bin/flask /usr/local/bin/flask

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Copy application code
COPY app.py .

# Expose the Flask port
EXPOSE 5000

# Start the Flask application
CMD [""flask"", ""run""]

app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/answer')
def answer():
    result = (3 + 7 + 11) * 2
    return jsonify({'puzzle': result})

if __name__ == '__main__':
    app.run()","Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary."
source_code_022,gpt-4-turbo_01,0.4,"{'ic_id': {0: 301}, 'ica_id': {0: 2848}, 'question': {0: ""Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary.""}, 'rules': {0: ['The Dockerfile must be written for Python 3.8 or higher', 'Multi-stage builds are recommended for optimization', 'The base image should be an official Python Docker image', 'The final Docker image should be as small as possible']}, 'examples': {0: 'Input: HTTP GET request to the \'/answer\' route\nExpected Output: {""puzzle"": 42}'}, 'programming_language': {0: 'Docker'}, 'response_time': {0: 299}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","# Use an official Python image as the base image
FROM python:3.8-slim AS builder

# Set the working directory
WORKDIR /app

# Copy the Python requirements file
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Python application code
COPY app/ .

# Build a small production image
FROM python:3.8-slim

# Set the working directory
WORKDIR /app

# Copy installed dependencies
COPY --from=builder /root/.cache /root/.cache

# Copy the Python application code
COPY --from=builder /app /app

# Expose port 5000
EXPOSE 5000

# Define the command to run the Flask app
CMD [""python"", ""app.py""]
","# Stage 1: Build Stage
FROM python:3.8-slim AS builder

WORKDIR /app

# Install dependencies
RUN apt-get update \
    && apt-get install --no-install-recommends -y gcc \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir flask

# Stage 2: Production Stage
FROM python:3.8-slim

WORKDIR /app

# Copy only necessary files from the build stage
COPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=builder /usr/local/bin/flask /usr/local/bin/flask

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Copy application code
COPY app.py .

# Expose the Flask port
EXPOSE 5000

# Start the Flask application
CMD [""flask"", ""run""]

app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/answer')
def answer():
    result = (3 + 7 + 11) * 2
    return jsonify({'puzzle': result})

if __name__ == '__main__':
    app.run()","Create a Dockerfile for a simple Python web application using Flask that listens on port 5000. The web application should have a single route '/answer' that returns a JSON object with a key 'puzzle' and a value that is the result of multiplying the sum of the numbers 3, 7, and 11 by 2. Ensure the image is optimized for size and build speed, using multi-stage builds if necessary."
source_code_023,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 309}, 'ica_id': {0: 2905}, 'question': {0: 'Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and [].'}, 'rules': {0: ['The function should be written in C#.', 'The function should handle empty strings and return true.', 'The code should be optimized for readability.']}, 'examples': {0: 'Input: ""(a+[b*c]-{d/e})""\nOutput: true\n\nInput: ""(a+[b*c)-{d/e}]""\nOutput: false'}, 'programming_language': {0: 'C#'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","using System;
using System.Collections.Generic;

class BracketChecker
{
    private readonly Dictionary<char, char> bracketPairs = new Dictionary<char, char>
    {
        { '(', ')' },
        { '[', ']' },
        { '{', '}' }
    };

    public bool CheckBalancedBrackets(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return true;
        }

        Stack<char> stack = new Stack<char>();

        foreach (char c in input)
        {
            if (bracketPairs.ContainsValue(c))
            {
                if (stack.Count == 0 || bracketPairs[stack.Peek()] != c)
                {
                    return false;
                }
                stack.Pop();
            }
            else if (bracketPairs.ContainsKey(c))
            {
                stack.Push(c);
            }
        }

        return stack.Count == 0;
    }
}

class Program
{
    static void Main()
    {
        BracketChecker bracketChecker = new BracketChecker();

        string input1 = ""(a+[b*c]-{d/e})"";
        Console.WriteLine(""Input: \""{0}\"""", input1);
        Console.WriteLine(""Output: {0}\n"", bracketChecker.CheckBalancedBrackets(input1));

        string input2 = ""(a+[b*c)-{d/e}]"";
        Console.WriteLine(""Input: \""{0}\"""", input2);
        Console.WriteLine(""Output: {0}"", bracketChecker.CheckBalancedBrackets(input2));
    }
}
","static bool is ISBalanced(string input)
{
Stack<char> stack = new Stack<char> ()
foreach (char c in input)

if (""([OI]"".Contains(c))&&(stack.COunt==0||stack.pop()!=""([{"")
}","Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and []."
source_code_023,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 309}, 'ica_id': {0: 2905}, 'question': {0: 'Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and [].'}, 'rules': {0: ['The function should be written in C#.', 'The function should handle empty strings and return true.', 'The code should be optimized for readability.']}, 'examples': {0: 'Input: ""(a+[b*c]-{d/e})""\nOutput: true\n\nInput: ""(a+[b*c)-{d/e}]""\nOutput: false'}, 'programming_language': {0: 'C#'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","using System;
using System.Collections.Generic;

class BracketChecker
{
    private readonly Dictionary<char, char> bracketPairs = new Dictionary<char, char>
    {
        { '(', ')' },
        { '[', ']' },
        { '{', '}' }
    };

    public bool CheckBalancedBrackets(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return true;
        }

        Stack<char> stack = new Stack<char>();

        foreach (char c in input)
        {
            if (bracketPairs.ContainsValue(c))
            {
                if (stack.Count == 0 || bracketPairs[stack.Peek()] != c)
                {
                    return false;
                }
                stack.Pop();
            }
            else if (bracketPairs.ContainsKey(c))
            {
                stack.Push(c);
            }
        }

        return stack.Count == 0;
    }
}

class Program
{
    static void Main()
    {
        BracketChecker bracketChecker = new BracketChecker();

        string input1 = ""(a+[b*c]-{d/e})"";
        Console.WriteLine(""Input: \""{0}\"""", input1);
        Console.WriteLine(""Output: {0}\n"", bracketChecker.CheckBalancedBrackets(input1));

        string input2 = ""(a+[b*c)-{d/e}]"";
        Console.WriteLine(""Input: \""{0}\"""", input2);
        Console.WriteLine(""Output: {0}"", bracketChecker.CheckBalancedBrackets(input2));
    }
}
","static bool is ISBalanced(string input)
{
Stack<char> stack = new Stack<char> ()
foreach (char c in input)

if (""([OI]"".Contains(c))&&(stack.COunt==0||stack.pop()!=""([{"")
}","Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and []."
source_code_023,gpt-4_00,0.1,"{'ic_id': {0: 309}, 'ica_id': {0: 2905}, 'question': {0: 'Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and [].'}, 'rules': {0: ['The function should be written in C#.', 'The function should handle empty strings and return true.', 'The code should be optimized for readability.']}, 'examples': {0: 'Input: ""(a+[b*c]-{d/e})""\nOutput: true\n\nInput: ""(a+[b*c)-{d/e}]""\nOutput: false'}, 'programming_language': {0: 'C#'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","using System;
using System.Collections.Generic;

class BracketChecker
{
    private readonly Dictionary<char, char> bracketPairs = new Dictionary<char, char>
    {
        { '(', ')' },
        { '[', ']' },
        { '{', '}' }
    };

    public bool CheckBalancedBrackets(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return true;
        }

        Stack<char> stack = new Stack<char>();

        foreach (char c in input)
        {
            if (bracketPairs.ContainsValue(c))
            {
                if (stack.Count == 0 || bracketPairs[stack.Peek()] != c)
                {
                    return false;
                }
                stack.Pop();
            }
            else if (bracketPairs.ContainsKey(c))
            {
                stack.Push(c);
            }
        }

        return stack.Count == 0;
    }
}

class Program
{
    static void Main()
    {
        BracketChecker bracketChecker = new BracketChecker();

        string input1 = ""(a+[b*c]-{d/e})"";
        Console.WriteLine(""Input: \""{0}\"""", input1);
        Console.WriteLine(""Output: {0}\n"", bracketChecker.CheckBalancedBrackets(input1));

        string input2 = ""(a+[b*c)-{d/e}]"";
        Console.WriteLine(""Input: \""{0}\"""", input2);
        Console.WriteLine(""Output: {0}"", bracketChecker.CheckBalancedBrackets(input2));
    }
}
","static bool is ISBalanced(string input)
{
Stack<char> stack = new Stack<char> ()
foreach (char c in input)

if (""([OI]"".Contains(c))&&(stack.COunt==0||stack.pop()!=""([{"")
}","Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and []."
source_code_023,gpt-4_01,0.1,"{'ic_id': {0: 309}, 'ica_id': {0: 2905}, 'question': {0: 'Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and [].'}, 'rules': {0: ['The function should be written in C#.', 'The function should handle empty strings and return true.', 'The code should be optimized for readability.']}, 'examples': {0: 'Input: ""(a+[b*c]-{d/e})""\nOutput: true\n\nInput: ""(a+[b*c)-{d/e}]""\nOutput: false'}, 'programming_language': {0: 'C#'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","using System;
using System.Collections.Generic;

class BracketChecker
{
    private readonly Dictionary<char, char> bracketPairs = new Dictionary<char, char>
    {
        { '(', ')' },
        { '[', ']' },
        { '{', '}' }
    };

    public bool CheckBalancedBrackets(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return true;
        }

        Stack<char> stack = new Stack<char>();

        foreach (char c in input)
        {
            if (bracketPairs.ContainsValue(c))
            {
                if (stack.Count == 0 || bracketPairs[stack.Peek()] != c)
                {
                    return false;
                }
                stack.Pop();
            }
            else if (bracketPairs.ContainsKey(c))
            {
                stack.Push(c);
            }
        }

        return stack.Count == 0;
    }
}

class Program
{
    static void Main()
    {
        BracketChecker bracketChecker = new BracketChecker();

        string input1 = ""(a+[b*c]-{d/e})"";
        Console.WriteLine(""Input: \""{0}\"""", input1);
        Console.WriteLine(""Output: {0}\n"", bracketChecker.CheckBalancedBrackets(input1));

        string input2 = ""(a+[b*c)-{d/e}]"";
        Console.WriteLine(""Input: \""{0}\"""", input2);
        Console.WriteLine(""Output: {0}"", bracketChecker.CheckBalancedBrackets(input2));
    }
}
","static bool is ISBalanced(string input)
{
Stack<char> stack = new Stack<char> ()
foreach (char c in input)

if (""([OI]"".Contains(c))&&(stack.COunt==0||stack.pop()!=""([{"")
}","Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and []."
source_code_023,gpt-4-turbo_00,0.1,"{'ic_id': {0: 309}, 'ica_id': {0: 2905}, 'question': {0: 'Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and [].'}, 'rules': {0: ['The function should be written in C#.', 'The function should handle empty strings and return true.', 'The code should be optimized for readability.']}, 'examples': {0: 'Input: ""(a+[b*c]-{d/e})""\nOutput: true\n\nInput: ""(a+[b*c)-{d/e}]""\nOutput: false'}, 'programming_language': {0: 'C#'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","using System;
using System.Collections.Generic;

class BracketChecker
{
    private readonly Dictionary<char, char> bracketPairs = new Dictionary<char, char>
    {
        { '(', ')' },
        { '[', ']' },
        { '{', '}' }
    };

    public bool CheckBalancedBrackets(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return true;
        }

        Stack<char> stack = new Stack<char>();

        foreach (char c in input)
        {
            if (bracketPairs.ContainsValue(c))
            {
                if (stack.Count == 0 || bracketPairs[stack.Peek()] != c)
                {
                    return false;
                }
                stack.Pop();
            }
            else if (bracketPairs.ContainsKey(c))
            {
                stack.Push(c);
            }
        }

        return stack.Count == 0;
    }
}

class Program
{
    static void Main()
    {
        BracketChecker bracketChecker = new BracketChecker();

        string input1 = ""(a+[b*c]-{d/e})"";
        Console.WriteLine(""Input: \""{0}\"""", input1);
        Console.WriteLine(""Output: {0}\n"", bracketChecker.CheckBalancedBrackets(input1));

        string input2 = ""(a+[b*c)-{d/e}]"";
        Console.WriteLine(""Input: \""{0}\"""", input2);
        Console.WriteLine(""Output: {0}"", bracketChecker.CheckBalancedBrackets(input2));
    }
}
","static bool is ISBalanced(string input)
{
Stack<char> stack = new Stack<char> ()
foreach (char c in input)

if (""([OI]"".Contains(c))&&(stack.COunt==0||stack.pop()!=""([{"")
}","Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and []."
source_code_023,gpt-4-turbo_01,0.1,"{'ic_id': {0: 309}, 'ica_id': {0: 2905}, 'question': {0: 'Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and [].'}, 'rules': {0: ['The function should be written in C#.', 'The function should handle empty strings and return true.', 'The code should be optimized for readability.']}, 'examples': {0: 'Input: ""(a+[b*c]-{d/e})""\nOutput: true\n\nInput: ""(a+[b*c)-{d/e}]""\nOutput: false'}, 'programming_language': {0: 'C#'}, 'response_time': {0: 300}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 8.33}, 'total_weight': {0: 25.0}}","using System;
using System.Collections.Generic;

class BracketChecker
{
    private readonly Dictionary<char, char> bracketPairs = new Dictionary<char, char>
    {
        { '(', ')' },
        { '[', ']' },
        { '{', '}' }
    };

    public bool CheckBalancedBrackets(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return true;
        }

        Stack<char> stack = new Stack<char>();

        foreach (char c in input)
        {
            if (bracketPairs.ContainsValue(c))
            {
                if (stack.Count == 0 || bracketPairs[stack.Peek()] != c)
                {
                    return false;
                }
                stack.Pop();
            }
            else if (bracketPairs.ContainsKey(c))
            {
                stack.Push(c);
            }
        }

        return stack.Count == 0;
    }
}

class Program
{
    static void Main()
    {
        BracketChecker bracketChecker = new BracketChecker();

        string input1 = ""(a+[b*c]-{d/e})"";
        Console.WriteLine(""Input: \""{0}\"""", input1);
        Console.WriteLine(""Output: {0}\n"", bracketChecker.CheckBalancedBrackets(input1));

        string input2 = ""(a+[b*c)-{d/e}]"";
        Console.WriteLine(""Input: \""{0}\"""", input2);
        Console.WriteLine(""Output: {0}"", bracketChecker.CheckBalancedBrackets(input2));
    }
}
","static bool is ISBalanced(string input)
{
Stack<char> stack = new Stack<char> ()
foreach (char c in input)

if (""([OI]"".Contains(c))&&(stack.COunt==0||stack.pop()!=""([{"")
}","Develop a C# function that checks for balanced brackets in a given string. The function should determine whether every opening bracket in the string has a corresponding closing bracket and is properly nested. You must handle brackets of type (), {}, and []."
source_code_024,gpt-3.5-turbo_00,0.8,"{'ic_id': {0: 311}, 'ica_id': {0: 2920}, 'question': {0: 'Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings.'}, 'rules': {0: ['Do not use third-party libraries', 'Function must be pure and stateless']}, 'examples': {0: ""Input: '<p>Hello <em>World</em>!</p>'\\nExpected Output: 'Hello World!'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 297}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","function stripHtmlTags(input) {
    if (!input) return '';

    const tagRegex = /<[^>]*>/g;
    return input.replace(tagRegex, '');
}
","function stripHtmlTags(str) {
  return str.replace(/<[^>]*>/g, '');
}

const input = '<p>Hello <em>World</em>!</p>';

const output = stripHtmlTags(input);

console.log(output);","Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings."
source_code_024,gpt-3.5-turbo_01,0.9,"{'ic_id': {0: 311}, 'ica_id': {0: 2920}, 'question': {0: 'Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings.'}, 'rules': {0: ['Do not use third-party libraries', 'Function must be pure and stateless']}, 'examples': {0: ""Input: '<p>Hello <em>World</em>!</p>'\\nExpected Output: 'Hello World!'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 297}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","function stripHtmlTags(input) {
    if (!input) return '';

    const tagRegex = /<[^>]*>/g;
    return input.replace(tagRegex, '');
}
","function stripHtmlTags(str) {
  return str.replace(/<[^>]*>/g, '');
}

const input = '<p>Hello <em>World</em>!</p>';

const output = stripHtmlTags(input);

console.log(output);","Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings."
source_code_024,gpt-4_00,0.6,"{'ic_id': {0: 311}, 'ica_id': {0: 2920}, 'question': {0: 'Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings.'}, 'rules': {0: ['Do not use third-party libraries', 'Function must be pure and stateless']}, 'examples': {0: ""Input: '<p>Hello <em>World</em>!</p>'\\nExpected Output: 'Hello World!'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 297}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","function stripHtmlTags(input) {
    if (!input) return '';

    const tagRegex = /<[^>]*>/g;
    return input.replace(tagRegex, '');
}
","function stripHtmlTags(str) {
  return str.replace(/<[^>]*>/g, '');
}

const input = '<p>Hello <em>World</em>!</p>';

const output = stripHtmlTags(input);

console.log(output);","Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings."
source_code_024,gpt-4_01,0.6,"{'ic_id': {0: 311}, 'ica_id': {0: 2920}, 'question': {0: 'Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings.'}, 'rules': {0: ['Do not use third-party libraries', 'Function must be pure and stateless']}, 'examples': {0: ""Input: '<p>Hello <em>World</em>!</p>'\\nExpected Output: 'Hello World!'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 297}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","function stripHtmlTags(input) {
    if (!input) return '';

    const tagRegex = /<[^>]*>/g;
    return input.replace(tagRegex, '');
}
","function stripHtmlTags(str) {
  return str.replace(/<[^>]*>/g, '');
}

const input = '<p>Hello <em>World</em>!</p>';

const output = stripHtmlTags(input);

console.log(output);","Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings."
source_code_024,gpt-4-turbo_00,0.9,"{'ic_id': {0: 311}, 'ica_id': {0: 2920}, 'question': {0: 'Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings.'}, 'rules': {0: ['Do not use third-party libraries', 'Function must be pure and stateless']}, 'examples': {0: ""Input: '<p>Hello <em>World</em>!</p>'\\nExpected Output: 'Hello World!'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 297}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","function stripHtmlTags(input) {
    if (!input) return '';

    const tagRegex = /<[^>]*>/g;
    return input.replace(tagRegex, '');
}
","function stripHtmlTags(str) {
  return str.replace(/<[^>]*>/g, '');
}

const input = '<p>Hello <em>World</em>!</p>';

const output = stripHtmlTags(input);

console.log(output);","Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings."
source_code_024,gpt-4-turbo_01,0.6,"{'ic_id': {0: 311}, 'ica_id': {0: 2920}, 'question': {0: 'Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings.'}, 'rules': {0: ['Do not use third-party libraries', 'Function must be pure and stateless']}, 'examples': {0: ""Input: '<p>Hello <em>World</em>!</p>'\\nExpected Output: 'Hello World!'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 297}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 25.0}}","function stripHtmlTags(input) {
    if (!input) return '';

    const tagRegex = /<[^>]*>/g;
    return input.replace(tagRegex, '');
}
","function stripHtmlTags(str) {
  return str.replace(/<[^>]*>/g, '');
}

const input = '<p>Hello <em>World</em>!</p>';

const output = stripHtmlTags(input);

console.log(output);","Write a JavaScript function that will strip HTML tags from a given string, retain the text content and return it. The solution should not rely on browser-based APIs, as the focus is on server-side JavaScript, and it should be efficient to handle larger strings."
source_code_025,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 313}, 'ica_id': {0: 2929}, 'question': {0: ""Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams.""}, 'rules': {0: ['Ignore case and spaces', 'Consider only alphabet characters']}, 'examples': {0: ""Input: 'listen', 'silent' \nOutput: true\n\nInput: 'hello', 'billion' \nOutput: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 251}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function isAnagram(str1, str2) {
    const formatString = (str) => str.replace(/[^a-z]/gi, '').toLowerCase();
    const sortedStr1 = formatString(str1).split('').sort().join('');
    const sortedStr2 = formatString(str2).split('').sort().join('');
    
    return sortedStr1 === sortedStr2;
}

// Test cases
console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'billion')); // Output: false
","function isAnagram(s1, s2) {
  const a1 = s1.split('');
  const a2 = s2.split('');
  for (let c of a1) {
    const idx = a2.indexOf(c)
    if (idx == -1) {
      return false;
    }
    a2.splice(idx, 1)
  }
  return a2.length == 0
}","Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams."
source_code_025,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 313}, 'ica_id': {0: 2929}, 'question': {0: ""Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams.""}, 'rules': {0: ['Ignore case and spaces', 'Consider only alphabet characters']}, 'examples': {0: ""Input: 'listen', 'silent' \nOutput: true\n\nInput: 'hello', 'billion' \nOutput: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 251}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function isAnagram(str1, str2) {
    const formatString = (str) => str.replace(/[^a-z]/gi, '').toLowerCase();
    const sortedStr1 = formatString(str1).split('').sort().join('');
    const sortedStr2 = formatString(str2).split('').sort().join('');
    
    return sortedStr1 === sortedStr2;
}

// Test cases
console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'billion')); // Output: false
","function isAnagram(s1, s2) {
  const a1 = s1.split('');
  const a2 = s2.split('');
  for (let c of a1) {
    const idx = a2.indexOf(c)
    if (idx == -1) {
      return false;
    }
    a2.splice(idx, 1)
  }
  return a2.length == 0
}","Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams."
source_code_025,gpt-4_00,0.1,"{'ic_id': {0: 313}, 'ica_id': {0: 2929}, 'question': {0: ""Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams.""}, 'rules': {0: ['Ignore case and spaces', 'Consider only alphabet characters']}, 'examples': {0: ""Input: 'listen', 'silent' \nOutput: true\n\nInput: 'hello', 'billion' \nOutput: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 251}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function isAnagram(str1, str2) {
    const formatString = (str) => str.replace(/[^a-z]/gi, '').toLowerCase();
    const sortedStr1 = formatString(str1).split('').sort().join('');
    const sortedStr2 = formatString(str2).split('').sort().join('');
    
    return sortedStr1 === sortedStr2;
}

// Test cases
console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'billion')); // Output: false
","function isAnagram(s1, s2) {
  const a1 = s1.split('');
  const a2 = s2.split('');
  for (let c of a1) {
    const idx = a2.indexOf(c)
    if (idx == -1) {
      return false;
    }
    a2.splice(idx, 1)
  }
  return a2.length == 0
}","Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams."
source_code_025,gpt-4_01,0.1,"{'ic_id': {0: 313}, 'ica_id': {0: 2929}, 'question': {0: ""Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams.""}, 'rules': {0: ['Ignore case and spaces', 'Consider only alphabet characters']}, 'examples': {0: ""Input: 'listen', 'silent' \nOutput: true\n\nInput: 'hello', 'billion' \nOutput: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 251}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function isAnagram(str1, str2) {
    const formatString = (str) => str.replace(/[^a-z]/gi, '').toLowerCase();
    const sortedStr1 = formatString(str1).split('').sort().join('');
    const sortedStr2 = formatString(str2).split('').sort().join('');
    
    return sortedStr1 === sortedStr2;
}

// Test cases
console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'billion')); // Output: false
","function isAnagram(s1, s2) {
  const a1 = s1.split('');
  const a2 = s2.split('');
  for (let c of a1) {
    const idx = a2.indexOf(c)
    if (idx == -1) {
      return false;
    }
    a2.splice(idx, 1)
  }
  return a2.length == 0
}","Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams."
source_code_025,gpt-4-turbo_00,0.1,"{'ic_id': {0: 313}, 'ica_id': {0: 2929}, 'question': {0: ""Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams.""}, 'rules': {0: ['Ignore case and spaces', 'Consider only alphabet characters']}, 'examples': {0: ""Input: 'listen', 'silent' \nOutput: true\n\nInput: 'hello', 'billion' \nOutput: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 251}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function isAnagram(str1, str2) {
    const formatString = (str) => str.replace(/[^a-z]/gi, '').toLowerCase();
    const sortedStr1 = formatString(str1).split('').sort().join('');
    const sortedStr2 = formatString(str2).split('').sort().join('');
    
    return sortedStr1 === sortedStr2;
}

// Test cases
console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'billion')); // Output: false
","function isAnagram(s1, s2) {
  const a1 = s1.split('');
  const a2 = s2.split('');
  for (let c of a1) {
    const idx = a2.indexOf(c)
    if (idx == -1) {
      return false;
    }
    a2.splice(idx, 1)
  }
  return a2.length == 0
}","Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams."
source_code_025,gpt-4-turbo_01,0.1,"{'ic_id': {0: 313}, 'ica_id': {0: 2929}, 'question': {0: ""Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams.""}, 'rules': {0: ['Ignore case and spaces', 'Consider only alphabet characters']}, 'examples': {0: ""Input: 'listen', 'silent' \nOutput: true\n\nInput: 'hello', 'billion' \nOutput: false""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 251}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function isAnagram(str1, str2) {
    const formatString = (str) => str.replace(/[^a-z]/gi, '').toLowerCase();
    const sortedStr1 = formatString(str1).split('').sort().join('');
    const sortedStr2 = formatString(str2).split('').sort().join('');
    
    return sortedStr1 === sortedStr2;
}

// Test cases
console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'billion')); // Output: false
","function isAnagram(s1, s2) {
  const a1 = s1.split('');
  const a2 = s2.split('');
  for (let c of a1) {
    const idx = a2.indexOf(c)
    if (idx == -1) {
      return false;
    }
    a2.splice(idx, 1)
  }
  return a2.length == 0
}","Create an anagram checker function in JavaScript. An anagram is a word or phrase that's formed by rearranging the letters of another word or phrase. The function should take two strings as input and return a boolean indicating whether the two strings are anagrams of each other, ignoring case and spaces. Consider only alphabets for making anagrams."
source_code_026,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 312}, 'ica_id': {0: 2940}, 'question': {0: 'Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution.'}, 'rules': {0: ['The solution must not affect existing functionalities', 'Optimizations should be sensible and justified', 'The use of React hooks is encouraged']}, 'examples': {0: ''}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1261}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 83.33}, 'total_weight': {0: 125.0}}","// Assuming you have a data context set up to manage the data

import React, { useContext, useState, useEffect } from 'react';

const OptimizedComponent = () => {
  const { data, setData } = useContext(DataContext);
  const [optimizedData, setOptimizedData] = useState(data);

  // Update the optimizedData only when the original data changes
  useEffect(() => {
    setOptimizedData(data);
  }, [data]);

  const handleDataUpdate = (updatedData) => {
    // Update the original data and let the optimizedData re-render accordingly
    setData(updatedData);
  };

  return (
    <div>
      {/* Use the optimizedData instead of the original data */}
      {optimizedData.map(item => (
        <div key={item.id}>{item.name}</div>
      )}

      <button onClick={() => handleDataUpdate([...data, { id: data.length + 1, name: 'New Item' }])}>
        Add New Item
      </button>
    </div>
  );
};

export default OptimizedComponent;
","// I have created a few components with an common scenario to prevent 
// children components from rerendering if the related props do not change
// even when the parent component got updated using the HOC that is 'memo'

// there will be different scenarios with different setup and complexity
// in such cases, other approaching such as using useCallback for memoizing the function
// useMemo for memoizing the result of the function

import { memo, useState } from 'react';

const App = () => {
  const [counter, setCounter] = useState(0);
  const [light, setLight] = useState(false);

  return (
    <div>
      <Counter counter={counter} />
      <button onClick={() => setCounter((c) => c - 1)}>Decrement</button>
      <button onClick={() => setCounter((c) => c + 1)}>Increment</button>
      <br /> <br /> <br />
      <Light light={light} />
      <button onClick={() => setLight((c) => !c)}>Toggle</button>
    </div>
  );
};

export default App;

const Counter = memo(({ counter }) => {
  console.log('counter', counter);
  return <div>Counter: {counter}</div>;
});

const Light = memo(({ light }) => {
  console.log('light', light);
  return <div>Light: {light ? 'On' : 'Off'}</div>;
});","Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution."
source_code_026,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 312}, 'ica_id': {0: 2940}, 'question': {0: 'Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution.'}, 'rules': {0: ['The solution must not affect existing functionalities', 'Optimizations should be sensible and justified', 'The use of React hooks is encouraged']}, 'examples': {0: ''}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1261}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 83.33}, 'total_weight': {0: 125.0}}","// Assuming you have a data context set up to manage the data

import React, { useContext, useState, useEffect } from 'react';

const OptimizedComponent = () => {
  const { data, setData } = useContext(DataContext);
  const [optimizedData, setOptimizedData] = useState(data);

  // Update the optimizedData only when the original data changes
  useEffect(() => {
    setOptimizedData(data);
  }, [data]);

  const handleDataUpdate = (updatedData) => {
    // Update the original data and let the optimizedData re-render accordingly
    setData(updatedData);
  };

  return (
    <div>
      {/* Use the optimizedData instead of the original data */}
      {optimizedData.map(item => (
        <div key={item.id}>{item.name}</div>
      )}

      <button onClick={() => handleDataUpdate([...data, { id: data.length + 1, name: 'New Item' }])}>
        Add New Item
      </button>
    </div>
  );
};

export default OptimizedComponent;
","// I have created a few components with an common scenario to prevent 
// children components from rerendering if the related props do not change
// even when the parent component got updated using the HOC that is 'memo'

// there will be different scenarios with different setup and complexity
// in such cases, other approaching such as using useCallback for memoizing the function
// useMemo for memoizing the result of the function

import { memo, useState } from 'react';

const App = () => {
  const [counter, setCounter] = useState(0);
  const [light, setLight] = useState(false);

  return (
    <div>
      <Counter counter={counter} />
      <button onClick={() => setCounter((c) => c - 1)}>Decrement</button>
      <button onClick={() => setCounter((c) => c + 1)}>Increment</button>
      <br /> <br /> <br />
      <Light light={light} />
      <button onClick={() => setLight((c) => !c)}>Toggle</button>
    </div>
  );
};

export default App;

const Counter = memo(({ counter }) => {
  console.log('counter', counter);
  return <div>Counter: {counter}</div>;
});

const Light = memo(({ light }) => {
  console.log('light', light);
  return <div>Light: {light ? 'On' : 'Off'}</div>;
});","Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution."
source_code_026,gpt-4_00,0.1,"{'ic_id': {0: 312}, 'ica_id': {0: 2940}, 'question': {0: 'Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution.'}, 'rules': {0: ['The solution must not affect existing functionalities', 'Optimizations should be sensible and justified', 'The use of React hooks is encouraged']}, 'examples': {0: ''}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1261}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 83.33}, 'total_weight': {0: 125.0}}","// Assuming you have a data context set up to manage the data

import React, { useContext, useState, useEffect } from 'react';

const OptimizedComponent = () => {
  const { data, setData } = useContext(DataContext);
  const [optimizedData, setOptimizedData] = useState(data);

  // Update the optimizedData only when the original data changes
  useEffect(() => {
    setOptimizedData(data);
  }, [data]);

  const handleDataUpdate = (updatedData) => {
    // Update the original data and let the optimizedData re-render accordingly
    setData(updatedData);
  };

  return (
    <div>
      {/* Use the optimizedData instead of the original data */}
      {optimizedData.map(item => (
        <div key={item.id}>{item.name}</div>
      )}

      <button onClick={() => handleDataUpdate([...data, { id: data.length + 1, name: 'New Item' }])}>
        Add New Item
      </button>
    </div>
  );
};

export default OptimizedComponent;
","// I have created a few components with an common scenario to prevent 
// children components from rerendering if the related props do not change
// even when the parent component got updated using the HOC that is 'memo'

// there will be different scenarios with different setup and complexity
// in such cases, other approaching such as using useCallback for memoizing the function
// useMemo for memoizing the result of the function

import { memo, useState } from 'react';

const App = () => {
  const [counter, setCounter] = useState(0);
  const [light, setLight] = useState(false);

  return (
    <div>
      <Counter counter={counter} />
      <button onClick={() => setCounter((c) => c - 1)}>Decrement</button>
      <button onClick={() => setCounter((c) => c + 1)}>Increment</button>
      <br /> <br /> <br />
      <Light light={light} />
      <button onClick={() => setLight((c) => !c)}>Toggle</button>
    </div>
  );
};

export default App;

const Counter = memo(({ counter }) => {
  console.log('counter', counter);
  return <div>Counter: {counter}</div>;
});

const Light = memo(({ light }) => {
  console.log('light', light);
  return <div>Light: {light ? 'On' : 'Off'}</div>;
});","Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution."
source_code_026,gpt-4_01,0.1,"{'ic_id': {0: 312}, 'ica_id': {0: 2940}, 'question': {0: 'Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution.'}, 'rules': {0: ['The solution must not affect existing functionalities', 'Optimizations should be sensible and justified', 'The use of React hooks is encouraged']}, 'examples': {0: ''}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1261}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 83.33}, 'total_weight': {0: 125.0}}","// Assuming you have a data context set up to manage the data

import React, { useContext, useState, useEffect } from 'react';

const OptimizedComponent = () => {
  const { data, setData } = useContext(DataContext);
  const [optimizedData, setOptimizedData] = useState(data);

  // Update the optimizedData only when the original data changes
  useEffect(() => {
    setOptimizedData(data);
  }, [data]);

  const handleDataUpdate = (updatedData) => {
    // Update the original data and let the optimizedData re-render accordingly
    setData(updatedData);
  };

  return (
    <div>
      {/* Use the optimizedData instead of the original data */}
      {optimizedData.map(item => (
        <div key={item.id}>{item.name}</div>
      )}

      <button onClick={() => handleDataUpdate([...data, { id: data.length + 1, name: 'New Item' }])}>
        Add New Item
      </button>
    </div>
  );
};

export default OptimizedComponent;
","// I have created a few components with an common scenario to prevent 
// children components from rerendering if the related props do not change
// even when the parent component got updated using the HOC that is 'memo'

// there will be different scenarios with different setup and complexity
// in such cases, other approaching such as using useCallback for memoizing the function
// useMemo for memoizing the result of the function

import { memo, useState } from 'react';

const App = () => {
  const [counter, setCounter] = useState(0);
  const [light, setLight] = useState(false);

  return (
    <div>
      <Counter counter={counter} />
      <button onClick={() => setCounter((c) => c - 1)}>Decrement</button>
      <button onClick={() => setCounter((c) => c + 1)}>Increment</button>
      <br /> <br /> <br />
      <Light light={light} />
      <button onClick={() => setLight((c) => !c)}>Toggle</button>
    </div>
  );
};

export default App;

const Counter = memo(({ counter }) => {
  console.log('counter', counter);
  return <div>Counter: {counter}</div>;
});

const Light = memo(({ light }) => {
  console.log('light', light);
  return <div>Light: {light ? 'On' : 'Off'}</div>;
});","Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution."
source_code_026,gpt-4-turbo_00,0.1,"{'ic_id': {0: 312}, 'ica_id': {0: 2940}, 'question': {0: 'Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution.'}, 'rules': {0: ['The solution must not affect existing functionalities', 'Optimizations should be sensible and justified', 'The use of React hooks is encouraged']}, 'examples': {0: ''}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1261}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 83.33}, 'total_weight': {0: 125.0}}","// Assuming you have a data context set up to manage the data

import React, { useContext, useState, useEffect } from 'react';

const OptimizedComponent = () => {
  const { data, setData } = useContext(DataContext);
  const [optimizedData, setOptimizedData] = useState(data);

  // Update the optimizedData only when the original data changes
  useEffect(() => {
    setOptimizedData(data);
  }, [data]);

  const handleDataUpdate = (updatedData) => {
    // Update the original data and let the optimizedData re-render accordingly
    setData(updatedData);
  };

  return (
    <div>
      {/* Use the optimizedData instead of the original data */}
      {optimizedData.map(item => (
        <div key={item.id}>{item.name}</div>
      )}

      <button onClick={() => handleDataUpdate([...data, { id: data.length + 1, name: 'New Item' }])}>
        Add New Item
      </button>
    </div>
  );
};

export default OptimizedComponent;
","// I have created a few components with an common scenario to prevent 
// children components from rerendering if the related props do not change
// even when the parent component got updated using the HOC that is 'memo'

// there will be different scenarios with different setup and complexity
// in such cases, other approaching such as using useCallback for memoizing the function
// useMemo for memoizing the result of the function

import { memo, useState } from 'react';

const App = () => {
  const [counter, setCounter] = useState(0);
  const [light, setLight] = useState(false);

  return (
    <div>
      <Counter counter={counter} />
      <button onClick={() => setCounter((c) => c - 1)}>Decrement</button>
      <button onClick={() => setCounter((c) => c + 1)}>Increment</button>
      <br /> <br /> <br />
      <Light light={light} />
      <button onClick={() => setLight((c) => !c)}>Toggle</button>
    </div>
  );
};

export default App;

const Counter = memo(({ counter }) => {
  console.log('counter', counter);
  return <div>Counter: {counter}</div>;
});

const Light = memo(({ light }) => {
  console.log('light', light);
  return <div>Light: {light ? 'On' : 'Off'}</div>;
});","Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution."
source_code_026,gpt-4-turbo_01,0.1,"{'ic_id': {0: 312}, 'ica_id': {0: 2940}, 'question': {0: 'Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution.'}, 'rules': {0: ['The solution must not affect existing functionalities', 'Optimizations should be sensible and justified', 'The use of React hooks is encouraged']}, 'examples': {0: ''}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 1261}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 83.33}, 'total_weight': {0: 125.0}}","// Assuming you have a data context set up to manage the data

import React, { useContext, useState, useEffect } from 'react';

const OptimizedComponent = () => {
  const { data, setData } = useContext(DataContext);
  const [optimizedData, setOptimizedData] = useState(data);

  // Update the optimizedData only when the original data changes
  useEffect(() => {
    setOptimizedData(data);
  }, [data]);

  const handleDataUpdate = (updatedData) => {
    // Update the original data and let the optimizedData re-render accordingly
    setData(updatedData);
  };

  return (
    <div>
      {/* Use the optimizedData instead of the original data */}
      {optimizedData.map(item => (
        <div key={item.id}>{item.name}</div>
      )}

      <button onClick={() => handleDataUpdate([...data, { id: data.length + 1, name: 'New Item' }])}>
        Add New Item
      </button>
    </div>
  );
};

export default OptimizedComponent;
","// I have created a few components with an common scenario to prevent 
// children components from rerendering if the related props do not change
// even when the parent component got updated using the HOC that is 'memo'

// there will be different scenarios with different setup and complexity
// in such cases, other approaching such as using useCallback for memoizing the function
// useMemo for memoizing the result of the function

import { memo, useState } from 'react';

const App = () => {
  const [counter, setCounter] = useState(0);
  const [light, setLight] = useState(false);

  return (
    <div>
      <Counter counter={counter} />
      <button onClick={() => setCounter((c) => c - 1)}>Decrement</button>
      <button onClick={() => setCounter((c) => c + 1)}>Increment</button>
      <br /> <br /> <br />
      <Light light={light} />
      <button onClick={() => setLight((c) => !c)}>Toggle</button>
    </div>
  );
};

export default App;

const Counter = memo(({ counter }) => {
  console.log('counter', counter);
  return <div>Counter: {counter}</div>;
});

const Light = memo(({ light }) => {
  console.log('light', light);
  return <div>Light: {light ? 'On' : 'Off'}</div>;
});","Considering that you are working on a Next.js project and you are tasked with improving page performance, implement a feature using React that efficiently updates only the components that need rerendering when data changes. You should consider any possible scenarios of data flow throughout the components, and apply appropriate optimizations to prevent unnecessary renders. Think about component design, data structures, and state management in your solution."
source_code_027,gpt-3.5-turbo_00,0.6,"{'ic_id': {0: 322}, 'ica_id': {0: 3181}, 'question': {0: 'Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements.'}, 'rules': {0: ['Do not use any library methods that directly solve the problem.', 'The original list must be modified in-place.']}, 'examples': {0: 'Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0]\\nInput: [0, 0, 1] Output: [1, 0, 0]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1035}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","def move_zeros_to_end(lst):
    zero_count = 0
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[i], lst[zero_count] = lst[zero_count], lst[i]
            zero_count += 1

# Test cases
lst1 = [0, 1, 0, 3, 12]
move_zeros_to_end(lst1)
print(lst1)  # Output: [1, 3, 12, 0, 0]

lst2 = [0, 0, 1]
move_zeros_to_end(lst2)
print(lst2)  # Output: [1, 0, 0]
","def move_zeroes(nums):
  count = 0
  for i in range(len(nums)):
    if nums[i] != 0:
      nums[count], nums[i]= nums[i], nums[count]
      count += 1
  for i in range(count, len(nums)):
    nums[i] =0

input = [int(x) for x in input(""Enter integers separated by spaces: "").split()]
move_zeroes(input)

print(input)","Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements."
source_code_027,gpt-3.5-turbo_01,0.6,"{'ic_id': {0: 322}, 'ica_id': {0: 3181}, 'question': {0: 'Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements.'}, 'rules': {0: ['Do not use any library methods that directly solve the problem.', 'The original list must be modified in-place.']}, 'examples': {0: 'Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0]\\nInput: [0, 0, 1] Output: [1, 0, 0]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1035}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","def move_zeros_to_end(lst):
    zero_count = 0
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[i], lst[zero_count] = lst[zero_count], lst[i]
            zero_count += 1

# Test cases
lst1 = [0, 1, 0, 3, 12]
move_zeros_to_end(lst1)
print(lst1)  # Output: [1, 3, 12, 0, 0]

lst2 = [0, 0, 1]
move_zeros_to_end(lst2)
print(lst2)  # Output: [1, 0, 0]
","def move_zeroes(nums):
  count = 0
  for i in range(len(nums)):
    if nums[i] != 0:
      nums[count], nums[i]= nums[i], nums[count]
      count += 1
  for i in range(count, len(nums)):
    nums[i] =0

input = [int(x) for x in input(""Enter integers separated by spaces: "").split()]
move_zeroes(input)

print(input)","Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements."
source_code_027,gpt-4_00,0.9,"{'ic_id': {0: 322}, 'ica_id': {0: 3181}, 'question': {0: 'Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements.'}, 'rules': {0: ['Do not use any library methods that directly solve the problem.', 'The original list must be modified in-place.']}, 'examples': {0: 'Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0]\\nInput: [0, 0, 1] Output: [1, 0, 0]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1035}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","def move_zeros_to_end(lst):
    zero_count = 0
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[i], lst[zero_count] = lst[zero_count], lst[i]
            zero_count += 1

# Test cases
lst1 = [0, 1, 0, 3, 12]
move_zeros_to_end(lst1)
print(lst1)  # Output: [1, 3, 12, 0, 0]

lst2 = [0, 0, 1]
move_zeros_to_end(lst2)
print(lst2)  # Output: [1, 0, 0]
","def move_zeroes(nums):
  count = 0
  for i in range(len(nums)):
    if nums[i] != 0:
      nums[count], nums[i]= nums[i], nums[count]
      count += 1
  for i in range(count, len(nums)):
    nums[i] =0

input = [int(x) for x in input(""Enter integers separated by spaces: "").split()]
move_zeroes(input)

print(input)","Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements."
source_code_027,gpt-4_01,0.8,"{'ic_id': {0: 322}, 'ica_id': {0: 3181}, 'question': {0: 'Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements.'}, 'rules': {0: ['Do not use any library methods that directly solve the problem.', 'The original list must be modified in-place.']}, 'examples': {0: 'Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0]\\nInput: [0, 0, 1] Output: [1, 0, 0]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1035}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","def move_zeros_to_end(lst):
    zero_count = 0
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[i], lst[zero_count] = lst[zero_count], lst[i]
            zero_count += 1

# Test cases
lst1 = [0, 1, 0, 3, 12]
move_zeros_to_end(lst1)
print(lst1)  # Output: [1, 3, 12, 0, 0]

lst2 = [0, 0, 1]
move_zeros_to_end(lst2)
print(lst2)  # Output: [1, 0, 0]
","def move_zeroes(nums):
  count = 0
  for i in range(len(nums)):
    if nums[i] != 0:
      nums[count], nums[i]= nums[i], nums[count]
      count += 1
  for i in range(count, len(nums)):
    nums[i] =0

input = [int(x) for x in input(""Enter integers separated by spaces: "").split()]
move_zeroes(input)

print(input)","Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements."
source_code_027,gpt-4-turbo_00,0.6,"{'ic_id': {0: 322}, 'ica_id': {0: 3181}, 'question': {0: 'Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements.'}, 'rules': {0: ['Do not use any library methods that directly solve the problem.', 'The original list must be modified in-place.']}, 'examples': {0: 'Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0]\\nInput: [0, 0, 1] Output: [1, 0, 0]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1035}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","def move_zeros_to_end(lst):
    zero_count = 0
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[i], lst[zero_count] = lst[zero_count], lst[i]
            zero_count += 1

# Test cases
lst1 = [0, 1, 0, 3, 12]
move_zeros_to_end(lst1)
print(lst1)  # Output: [1, 3, 12, 0, 0]

lst2 = [0, 0, 1]
move_zeros_to_end(lst2)
print(lst2)  # Output: [1, 0, 0]
","def move_zeroes(nums):
  count = 0
  for i in range(len(nums)):
    if nums[i] != 0:
      nums[count], nums[i]= nums[i], nums[count]
      count += 1
  for i in range(count, len(nums)):
    nums[i] =0

input = [int(x) for x in input(""Enter integers separated by spaces: "").split()]
move_zeroes(input)

print(input)","Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements."
source_code_027,gpt-4-turbo_01,0.6,"{'ic_id': {0: 322}, 'ica_id': {0: 3181}, 'question': {0: 'Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements.'}, 'rules': {0: ['Do not use any library methods that directly solve the problem.', 'The original list must be modified in-place.']}, 'examples': {0: 'Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0]\\nInput: [0, 0, 1] Output: [1, 0, 0]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1035}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","def move_zeros_to_end(lst):
    zero_count = 0
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[i], lst[zero_count] = lst[zero_count], lst[i]
            zero_count += 1

# Test cases
lst1 = [0, 1, 0, 3, 12]
move_zeros_to_end(lst1)
print(lst1)  # Output: [1, 3, 12, 0, 0]

lst2 = [0, 0, 1]
move_zeros_to_end(lst2)
print(lst2)  # Output: [1, 0, 0]
","def move_zeroes(nums):
  count = 0
  for i in range(len(nums)):
    if nums[i] != 0:
      nums[count], nums[i]= nums[i], nums[count]
      count += 1
  for i in range(count, len(nums)):
    nums[i] =0

input = [int(x) for x in input(""Enter integers separated by spaces: "").split()]
move_zeroes(input)

print(input)","Design a Python script that accepts a list of integers and rearranges the elements such that all the zeros have been moved to the end of the list, while maintaining the relative order of the non-zero elements."
source_code_028,gpt-3.5-turbo_00,0.4,"{'ic_id': {0: 339}, 'ica_id': {0: 3215}, 'question': {0: 'Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour.'}, 'rules': {0: ['Handle potential errors during database connection or data retrieval.', 'Your function should be able to be called with different measurements and fields.']}, 'examples': {0: ""Input: Measurement 'stock_prices', Field 'closing_price', Database 'financial_data'  Output: The percentage change in closing price for the last hour is 2.5%""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1486}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","from influxdb import InfluxDBClient
from datetime import datetime, timedelta

def calculate_percentage_change(measurement, field, database):
    try:
        # Connect to InfluxDB database
        client = InfluxDBClient(host='localhost', port=8086, database=database)
        client.switch_database(database)

        # Calculate time range for last hour
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(hours=1)

        # Query InfluxDB for maximum value for the given field in the last hour
        result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_last_hour = list(result.get_points())[0]['max']

        # Query InfluxDB for maximum value for the given field in the hour before
        prev_end_time = start_time
        prev_start_time = prev_end_time - timedelta(hours=1)
        prev_result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, prev_start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), prev_end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_prev_hour = list(prev_result.get_points())[0]['max']

        # Calculate percentage change
        if max_value_prev_hour != 0:
            percentage_change = ((max_value_last_hour - max_value_prev_hour) / max_value_prev_hour) * 100
        else:
            percentage_change = 0

        return ""The percentage change in {} for the last hour is {:.1f}%"".format(field, percentage_change)

    except Exception as e:
        return ""Error: {}"".format(e)

# Example usage
measurement = 'stock_prices'
field = 'closing_price'
database = 'financial_data'
print(calculate_percentage_change(measurement, field, database))
","from influxdb import InfluxDBCClient
from datetime import timedelta, datetime

def calculate_percentage_change(measurement, feild, database, host = 'localhost', port = 8086, username = None, password = None):
  try:
    # Connect to Influx DB.
    client = InfluxDBCClient(host, port, username, password, database)
    
    # Calculate the time range for the last two hours
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours = 2)

    # Build the Influx DB query
    query = f'SELECT MAX(""{field}"") FROM ""{measurement}"" WHERE time >= \'{start_time.strftime(""%Y-%m-%dT%H:%M:%SZ"")}\' AND time <= \'{end_time.strftime(""%Y-%M-%dT%H:%M:%SZ"")}\' GROUP BY time(1h)'

    # Query InfluxDB
    result = client.query(query)

    # Extract max value for the last two hours
    max_values = list(result.get_points())

    if len(max_values)>= 2:
      # Calculate percentage change
      current_hour_value = max_values[-1]['max']
      previous_hour_value = max_values[-2]['max']
      percentage_change = ((current_hour_value-previous_hour_value) / abs(previous_hour_value)) * 100
      return f'The percentage change in {feild} for the last hour is {percentage_change:.2f} %'
      
    else:
      return f'Insufficient data to calculate percentage change.'

  except Exception as e:
    return f'Error: {str(e)}'
    
  finally:
    if client:
      client.close()","Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour."
source_code_028,gpt-3.5-turbo_01,0.5,"{'ic_id': {0: 339}, 'ica_id': {0: 3215}, 'question': {0: 'Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour.'}, 'rules': {0: ['Handle potential errors during database connection or data retrieval.', 'Your function should be able to be called with different measurements and fields.']}, 'examples': {0: ""Input: Measurement 'stock_prices', Field 'closing_price', Database 'financial_data'  Output: The percentage change in closing price for the last hour is 2.5%""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1486}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","from influxdb import InfluxDBClient
from datetime import datetime, timedelta

def calculate_percentage_change(measurement, field, database):
    try:
        # Connect to InfluxDB database
        client = InfluxDBClient(host='localhost', port=8086, database=database)
        client.switch_database(database)

        # Calculate time range for last hour
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(hours=1)

        # Query InfluxDB for maximum value for the given field in the last hour
        result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_last_hour = list(result.get_points())[0]['max']

        # Query InfluxDB for maximum value for the given field in the hour before
        prev_end_time = start_time
        prev_start_time = prev_end_time - timedelta(hours=1)
        prev_result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, prev_start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), prev_end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_prev_hour = list(prev_result.get_points())[0]['max']

        # Calculate percentage change
        if max_value_prev_hour != 0:
            percentage_change = ((max_value_last_hour - max_value_prev_hour) / max_value_prev_hour) * 100
        else:
            percentage_change = 0

        return ""The percentage change in {} for the last hour is {:.1f}%"".format(field, percentage_change)

    except Exception as e:
        return ""Error: {}"".format(e)

# Example usage
measurement = 'stock_prices'
field = 'closing_price'
database = 'financial_data'
print(calculate_percentage_change(measurement, field, database))
","from influxdb import InfluxDBCClient
from datetime import timedelta, datetime

def calculate_percentage_change(measurement, feild, database, host = 'localhost', port = 8086, username = None, password = None):
  try:
    # Connect to Influx DB.
    client = InfluxDBCClient(host, port, username, password, database)
    
    # Calculate the time range for the last two hours
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours = 2)

    # Build the Influx DB query
    query = f'SELECT MAX(""{field}"") FROM ""{measurement}"" WHERE time >= \'{start_time.strftime(""%Y-%m-%dT%H:%M:%SZ"")}\' AND time <= \'{end_time.strftime(""%Y-%M-%dT%H:%M:%SZ"")}\' GROUP BY time(1h)'

    # Query InfluxDB
    result = client.query(query)

    # Extract max value for the last two hours
    max_values = list(result.get_points())

    if len(max_values)>= 2:
      # Calculate percentage change
      current_hour_value = max_values[-1]['max']
      previous_hour_value = max_values[-2]['max']
      percentage_change = ((current_hour_value-previous_hour_value) / abs(previous_hour_value)) * 100
      return f'The percentage change in {feild} for the last hour is {percentage_change:.2f} %'
      
    else:
      return f'Insufficient data to calculate percentage change.'

  except Exception as e:
    return f'Error: {str(e)}'
    
  finally:
    if client:
      client.close()","Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour."
source_code_028,gpt-4_00,0.4,"{'ic_id': {0: 339}, 'ica_id': {0: 3215}, 'question': {0: 'Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour.'}, 'rules': {0: ['Handle potential errors during database connection or data retrieval.', 'Your function should be able to be called with different measurements and fields.']}, 'examples': {0: ""Input: Measurement 'stock_prices', Field 'closing_price', Database 'financial_data'  Output: The percentage change in closing price for the last hour is 2.5%""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1486}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","from influxdb import InfluxDBClient
from datetime import datetime, timedelta

def calculate_percentage_change(measurement, field, database):
    try:
        # Connect to InfluxDB database
        client = InfluxDBClient(host='localhost', port=8086, database=database)
        client.switch_database(database)

        # Calculate time range for last hour
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(hours=1)

        # Query InfluxDB for maximum value for the given field in the last hour
        result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_last_hour = list(result.get_points())[0]['max']

        # Query InfluxDB for maximum value for the given field in the hour before
        prev_end_time = start_time
        prev_start_time = prev_end_time - timedelta(hours=1)
        prev_result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, prev_start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), prev_end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_prev_hour = list(prev_result.get_points())[0]['max']

        # Calculate percentage change
        if max_value_prev_hour != 0:
            percentage_change = ((max_value_last_hour - max_value_prev_hour) / max_value_prev_hour) * 100
        else:
            percentage_change = 0

        return ""The percentage change in {} for the last hour is {:.1f}%"".format(field, percentage_change)

    except Exception as e:
        return ""Error: {}"".format(e)

# Example usage
measurement = 'stock_prices'
field = 'closing_price'
database = 'financial_data'
print(calculate_percentage_change(measurement, field, database))
","from influxdb import InfluxDBCClient
from datetime import timedelta, datetime

def calculate_percentage_change(measurement, feild, database, host = 'localhost', port = 8086, username = None, password = None):
  try:
    # Connect to Influx DB.
    client = InfluxDBCClient(host, port, username, password, database)
    
    # Calculate the time range for the last two hours
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours = 2)

    # Build the Influx DB query
    query = f'SELECT MAX(""{field}"") FROM ""{measurement}"" WHERE time >= \'{start_time.strftime(""%Y-%m-%dT%H:%M:%SZ"")}\' AND time <= \'{end_time.strftime(""%Y-%M-%dT%H:%M:%SZ"")}\' GROUP BY time(1h)'

    # Query InfluxDB
    result = client.query(query)

    # Extract max value for the last two hours
    max_values = list(result.get_points())

    if len(max_values)>= 2:
      # Calculate percentage change
      current_hour_value = max_values[-1]['max']
      previous_hour_value = max_values[-2]['max']
      percentage_change = ((current_hour_value-previous_hour_value) / abs(previous_hour_value)) * 100
      return f'The percentage change in {feild} for the last hour is {percentage_change:.2f} %'
      
    else:
      return f'Insufficient data to calculate percentage change.'

  except Exception as e:
    return f'Error: {str(e)}'
    
  finally:
    if client:
      client.close()","Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour."
source_code_028,gpt-4_01,0.4,"{'ic_id': {0: 339}, 'ica_id': {0: 3215}, 'question': {0: 'Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour.'}, 'rules': {0: ['Handle potential errors during database connection or data retrieval.', 'Your function should be able to be called with different measurements and fields.']}, 'examples': {0: ""Input: Measurement 'stock_prices', Field 'closing_price', Database 'financial_data'  Output: The percentage change in closing price for the last hour is 2.5%""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1486}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","from influxdb import InfluxDBClient
from datetime import datetime, timedelta

def calculate_percentage_change(measurement, field, database):
    try:
        # Connect to InfluxDB database
        client = InfluxDBClient(host='localhost', port=8086, database=database)
        client.switch_database(database)

        # Calculate time range for last hour
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(hours=1)

        # Query InfluxDB for maximum value for the given field in the last hour
        result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_last_hour = list(result.get_points())[0]['max']

        # Query InfluxDB for maximum value for the given field in the hour before
        prev_end_time = start_time
        prev_start_time = prev_end_time - timedelta(hours=1)
        prev_result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, prev_start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), prev_end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_prev_hour = list(prev_result.get_points())[0]['max']

        # Calculate percentage change
        if max_value_prev_hour != 0:
            percentage_change = ((max_value_last_hour - max_value_prev_hour) / max_value_prev_hour) * 100
        else:
            percentage_change = 0

        return ""The percentage change in {} for the last hour is {:.1f}%"".format(field, percentage_change)

    except Exception as e:
        return ""Error: {}"".format(e)

# Example usage
measurement = 'stock_prices'
field = 'closing_price'
database = 'financial_data'
print(calculate_percentage_change(measurement, field, database))
","from influxdb import InfluxDBCClient
from datetime import timedelta, datetime

def calculate_percentage_change(measurement, feild, database, host = 'localhost', port = 8086, username = None, password = None):
  try:
    # Connect to Influx DB.
    client = InfluxDBCClient(host, port, username, password, database)
    
    # Calculate the time range for the last two hours
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours = 2)

    # Build the Influx DB query
    query = f'SELECT MAX(""{field}"") FROM ""{measurement}"" WHERE time >= \'{start_time.strftime(""%Y-%m-%dT%H:%M:%SZ"")}\' AND time <= \'{end_time.strftime(""%Y-%M-%dT%H:%M:%SZ"")}\' GROUP BY time(1h)'

    # Query InfluxDB
    result = client.query(query)

    # Extract max value for the last two hours
    max_values = list(result.get_points())

    if len(max_values)>= 2:
      # Calculate percentage change
      current_hour_value = max_values[-1]['max']
      previous_hour_value = max_values[-2]['max']
      percentage_change = ((current_hour_value-previous_hour_value) / abs(previous_hour_value)) * 100
      return f'The percentage change in {feild} for the last hour is {percentage_change:.2f} %'
      
    else:
      return f'Insufficient data to calculate percentage change.'

  except Exception as e:
    return f'Error: {str(e)}'
    
  finally:
    if client:
      client.close()","Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour."
source_code_028,gpt-4-turbo_00,0.5,"{'ic_id': {0: 339}, 'ica_id': {0: 3215}, 'question': {0: 'Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour.'}, 'rules': {0: ['Handle potential errors during database connection or data retrieval.', 'Your function should be able to be called with different measurements and fields.']}, 'examples': {0: ""Input: Measurement 'stock_prices', Field 'closing_price', Database 'financial_data'  Output: The percentage change in closing price for the last hour is 2.5%""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1486}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","from influxdb import InfluxDBClient
from datetime import datetime, timedelta

def calculate_percentage_change(measurement, field, database):
    try:
        # Connect to InfluxDB database
        client = InfluxDBClient(host='localhost', port=8086, database=database)
        client.switch_database(database)

        # Calculate time range for last hour
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(hours=1)

        # Query InfluxDB for maximum value for the given field in the last hour
        result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_last_hour = list(result.get_points())[0]['max']

        # Query InfluxDB for maximum value for the given field in the hour before
        prev_end_time = start_time
        prev_start_time = prev_end_time - timedelta(hours=1)
        prev_result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, prev_start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), prev_end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_prev_hour = list(prev_result.get_points())[0]['max']

        # Calculate percentage change
        if max_value_prev_hour != 0:
            percentage_change = ((max_value_last_hour - max_value_prev_hour) / max_value_prev_hour) * 100
        else:
            percentage_change = 0

        return ""The percentage change in {} for the last hour is {:.1f}%"".format(field, percentage_change)

    except Exception as e:
        return ""Error: {}"".format(e)

# Example usage
measurement = 'stock_prices'
field = 'closing_price'
database = 'financial_data'
print(calculate_percentage_change(measurement, field, database))
","from influxdb import InfluxDBCClient
from datetime import timedelta, datetime

def calculate_percentage_change(measurement, feild, database, host = 'localhost', port = 8086, username = None, password = None):
  try:
    # Connect to Influx DB.
    client = InfluxDBCClient(host, port, username, password, database)
    
    # Calculate the time range for the last two hours
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours = 2)

    # Build the Influx DB query
    query = f'SELECT MAX(""{field}"") FROM ""{measurement}"" WHERE time >= \'{start_time.strftime(""%Y-%m-%dT%H:%M:%SZ"")}\' AND time <= \'{end_time.strftime(""%Y-%M-%dT%H:%M:%SZ"")}\' GROUP BY time(1h)'

    # Query InfluxDB
    result = client.query(query)

    # Extract max value for the last two hours
    max_values = list(result.get_points())

    if len(max_values)>= 2:
      # Calculate percentage change
      current_hour_value = max_values[-1]['max']
      previous_hour_value = max_values[-2]['max']
      percentage_change = ((current_hour_value-previous_hour_value) / abs(previous_hour_value)) * 100
      return f'The percentage change in {feild} for the last hour is {percentage_change:.2f} %'
      
    else:
      return f'Insufficient data to calculate percentage change.'

  except Exception as e:
    return f'Error: {str(e)}'
    
  finally:
    if client:
      client.close()","Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour."
source_code_028,gpt-4-turbo_01,0.4,"{'ic_id': {0: 339}, 'ica_id': {0: 3215}, 'question': {0: 'Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour.'}, 'rules': {0: ['Handle potential errors during database connection or data retrieval.', 'Your function should be able to be called with different measurements and fields.']}, 'examples': {0: ""Input: Measurement 'stock_prices', Field 'closing_price', Database 'financial_data'  Output: The percentage change in closing price for the last hour is 2.5%""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1486}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 300.0}}","from influxdb import InfluxDBClient
from datetime import datetime, timedelta

def calculate_percentage_change(measurement, field, database):
    try:
        # Connect to InfluxDB database
        client = InfluxDBClient(host='localhost', port=8086, database=database)
        client.switch_database(database)

        # Calculate time range for last hour
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(hours=1)

        # Query InfluxDB for maximum value for the given field in the last hour
        result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_last_hour = list(result.get_points())[0]['max']

        # Query InfluxDB for maximum value for the given field in the hour before
        prev_end_time = start_time
        prev_start_time = prev_end_time - timedelta(hours=1)
        prev_result = client.query(""SELECT MAX({}) FROM {} WHERE time >= '{}' AND time <= '{}'"".format(field, measurement, prev_start_time.strftime('%Y-%m-%dT%H:%M:%SZ'), prev_end_time.strftime('%Y-%m-%dT%H:%M:%SZ')))
        max_value_prev_hour = list(prev_result.get_points())[0]['max']

        # Calculate percentage change
        if max_value_prev_hour != 0:
            percentage_change = ((max_value_last_hour - max_value_prev_hour) / max_value_prev_hour) * 100
        else:
            percentage_change = 0

        return ""The percentage change in {} for the last hour is {:.1f}%"".format(field, percentage_change)

    except Exception as e:
        return ""Error: {}"".format(e)

# Example usage
measurement = 'stock_prices'
field = 'closing_price'
database = 'financial_data'
print(calculate_percentage_change(measurement, field, database))
","from influxdb import InfluxDBCClient
from datetime import timedelta, datetime

def calculate_percentage_change(measurement, feild, database, host = 'localhost', port = 8086, username = None, password = None):
  try:
    # Connect to Influx DB.
    client = InfluxDBCClient(host, port, username, password, database)
    
    # Calculate the time range for the last two hours
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours = 2)

    # Build the Influx DB query
    query = f'SELECT MAX(""{field}"") FROM ""{measurement}"" WHERE time >= \'{start_time.strftime(""%Y-%m-%dT%H:%M:%SZ"")}\' AND time <= \'{end_time.strftime(""%Y-%M-%dT%H:%M:%SZ"")}\' GROUP BY time(1h)'

    # Query InfluxDB
    result = client.query(query)

    # Extract max value for the last two hours
    max_values = list(result.get_points())

    if len(max_values)>= 2:
      # Calculate percentage change
      current_hour_value = max_values[-1]['max']
      previous_hour_value = max_values[-2]['max']
      percentage_change = ((current_hour_value-previous_hour_value) / abs(previous_hour_value)) * 100
      return f'The percentage change in {feild} for the last hour is {percentage_change:.2f} %'
      
    else:
      return f'Insufficient data to calculate percentage change.'

  except Exception as e:
    return f'Error: {str(e)}'
    
  finally:
    if client:
      client.close()","Create a Python function that connects to an InfluxDB database, retrieves the maximum value for a given field from a specified measurement over the last hour, and calculates the percentage change compared to the previous hour."
source_code_029,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 363}, 'ica_id': {0: 3514}, 'question': {0: 'Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm.'}, 'rules': {0: ['Use ATL for string processing.', 'Implement the KMP algorithm from scratch.']}, 'examples': {0: ""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: [10]\nInput: text='AAAAA', pattern='AAA' -> Output: [0, 1, 2]""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 17}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","#include <atlstr.h>
#include <vector>

class KMP {
public:
    std::vector<int> findPatternIndices(const CString& text, const CString& pattern) {
        std::vector<int> indices;
        if (pattern.IsEmpty() || text.IsEmpty()) {
            return indices;
        }

        std::vector<int> lps = computeLPSArray(pattern);

        int i = 0, j = 0;
        while (i < text.GetLength()) {
            if (pattern[j] == text[i]) {
                j++;
                i++;
            }

            if (j == pattern.GetLength()) {
                indices.push_back(i - j);
                j = lps[j - 1];
            } else if (i < text.GetLength() && pattern[j] != text[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return indices;
    }

private:
    std::vector<int> computeLPSArray(const CString& pattern) {
        int len = 0;
        std::vector<int> lps(pattern.GetLength(), 0);
        
        int i = 1;
        while (i < pattern.GetLength()) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
};

void testKMP() {
    KMP kmp;
    
    CString text1 = ""ABABDABACDABABCABAB"";
    CString pattern1 = ""ABABCABAB"";
    std::vector<int> result1 = kmp.findPatternIndices(text1, pattern1);
    OutputDebugString(""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: ["");
    for (int i = 0; i < result1.size(); i++) {
        OutputDebugString(result1[i]);
        if (i < result1.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");

    CString text2 = ""AAAAA"";
    CString pattern2 = ""AAA"";
    std::vector<int> result2 = kmp.findPatternIndices(text2, pattern2);
    OutputDebugString(""Input: text='AAAAA', pattern='AAA' -> Output: ["");
    for (int i = 0; i < result2.size(); i++) {
        OutputDebugString(result2[i]);
        if (i < result2.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");
}
",AAAAAA,"Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm."
source_code_029,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 363}, 'ica_id': {0: 3514}, 'question': {0: 'Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm.'}, 'rules': {0: ['Use ATL for string processing.', 'Implement the KMP algorithm from scratch.']}, 'examples': {0: ""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: [10]\nInput: text='AAAAA', pattern='AAA' -> Output: [0, 1, 2]""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 17}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","#include <atlstr.h>
#include <vector>

class KMP {
public:
    std::vector<int> findPatternIndices(const CString& text, const CString& pattern) {
        std::vector<int> indices;
        if (pattern.IsEmpty() || text.IsEmpty()) {
            return indices;
        }

        std::vector<int> lps = computeLPSArray(pattern);

        int i = 0, j = 0;
        while (i < text.GetLength()) {
            if (pattern[j] == text[i]) {
                j++;
                i++;
            }

            if (j == pattern.GetLength()) {
                indices.push_back(i - j);
                j = lps[j - 1];
            } else if (i < text.GetLength() && pattern[j] != text[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return indices;
    }

private:
    std::vector<int> computeLPSArray(const CString& pattern) {
        int len = 0;
        std::vector<int> lps(pattern.GetLength(), 0);
        
        int i = 1;
        while (i < pattern.GetLength()) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
};

void testKMP() {
    KMP kmp;
    
    CString text1 = ""ABABDABACDABABCABAB"";
    CString pattern1 = ""ABABCABAB"";
    std::vector<int> result1 = kmp.findPatternIndices(text1, pattern1);
    OutputDebugString(""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: ["");
    for (int i = 0; i < result1.size(); i++) {
        OutputDebugString(result1[i]);
        if (i < result1.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");

    CString text2 = ""AAAAA"";
    CString pattern2 = ""AAA"";
    std::vector<int> result2 = kmp.findPatternIndices(text2, pattern2);
    OutputDebugString(""Input: text='AAAAA', pattern='AAA' -> Output: ["");
    for (int i = 0; i < result2.size(); i++) {
        OutputDebugString(result2[i]);
        if (i < result2.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");
}
",AAAAAA,"Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm."
source_code_029,gpt-4_00,0.0,"{'ic_id': {0: 363}, 'ica_id': {0: 3514}, 'question': {0: 'Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm.'}, 'rules': {0: ['Use ATL for string processing.', 'Implement the KMP algorithm from scratch.']}, 'examples': {0: ""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: [10]\nInput: text='AAAAA', pattern='AAA' -> Output: [0, 1, 2]""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 17}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","#include <atlstr.h>
#include <vector>

class KMP {
public:
    std::vector<int> findPatternIndices(const CString& text, const CString& pattern) {
        std::vector<int> indices;
        if (pattern.IsEmpty() || text.IsEmpty()) {
            return indices;
        }

        std::vector<int> lps = computeLPSArray(pattern);

        int i = 0, j = 0;
        while (i < text.GetLength()) {
            if (pattern[j] == text[i]) {
                j++;
                i++;
            }

            if (j == pattern.GetLength()) {
                indices.push_back(i - j);
                j = lps[j - 1];
            } else if (i < text.GetLength() && pattern[j] != text[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return indices;
    }

private:
    std::vector<int> computeLPSArray(const CString& pattern) {
        int len = 0;
        std::vector<int> lps(pattern.GetLength(), 0);
        
        int i = 1;
        while (i < pattern.GetLength()) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
};

void testKMP() {
    KMP kmp;
    
    CString text1 = ""ABABDABACDABABCABAB"";
    CString pattern1 = ""ABABCABAB"";
    std::vector<int> result1 = kmp.findPatternIndices(text1, pattern1);
    OutputDebugString(""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: ["");
    for (int i = 0; i < result1.size(); i++) {
        OutputDebugString(result1[i]);
        if (i < result1.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");

    CString text2 = ""AAAAA"";
    CString pattern2 = ""AAA"";
    std::vector<int> result2 = kmp.findPatternIndices(text2, pattern2);
    OutputDebugString(""Input: text='AAAAA', pattern='AAA' -> Output: ["");
    for (int i = 0; i < result2.size(); i++) {
        OutputDebugString(result2[i]);
        if (i < result2.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");
}
",AAAAAA,"Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm."
source_code_029,gpt-4_01,0.0,"{'ic_id': {0: 363}, 'ica_id': {0: 3514}, 'question': {0: 'Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm.'}, 'rules': {0: ['Use ATL for string processing.', 'Implement the KMP algorithm from scratch.']}, 'examples': {0: ""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: [10]\nInput: text='AAAAA', pattern='AAA' -> Output: [0, 1, 2]""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 17}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","#include <atlstr.h>
#include <vector>

class KMP {
public:
    std::vector<int> findPatternIndices(const CString& text, const CString& pattern) {
        std::vector<int> indices;
        if (pattern.IsEmpty() || text.IsEmpty()) {
            return indices;
        }

        std::vector<int> lps = computeLPSArray(pattern);

        int i = 0, j = 0;
        while (i < text.GetLength()) {
            if (pattern[j] == text[i]) {
                j++;
                i++;
            }

            if (j == pattern.GetLength()) {
                indices.push_back(i - j);
                j = lps[j - 1];
            } else if (i < text.GetLength() && pattern[j] != text[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return indices;
    }

private:
    std::vector<int> computeLPSArray(const CString& pattern) {
        int len = 0;
        std::vector<int> lps(pattern.GetLength(), 0);
        
        int i = 1;
        while (i < pattern.GetLength()) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
};

void testKMP() {
    KMP kmp;
    
    CString text1 = ""ABABDABACDABABCABAB"";
    CString pattern1 = ""ABABCABAB"";
    std::vector<int> result1 = kmp.findPatternIndices(text1, pattern1);
    OutputDebugString(""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: ["");
    for (int i = 0; i < result1.size(); i++) {
        OutputDebugString(result1[i]);
        if (i < result1.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");

    CString text2 = ""AAAAA"";
    CString pattern2 = ""AAA"";
    std::vector<int> result2 = kmp.findPatternIndices(text2, pattern2);
    OutputDebugString(""Input: text='AAAAA', pattern='AAA' -> Output: ["");
    for (int i = 0; i < result2.size(); i++) {
        OutputDebugString(result2[i]);
        if (i < result2.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");
}
",AAAAAA,"Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm."
source_code_029,gpt-4-turbo_00,0.0,"{'ic_id': {0: 363}, 'ica_id': {0: 3514}, 'question': {0: 'Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm.'}, 'rules': {0: ['Use ATL for string processing.', 'Implement the KMP algorithm from scratch.']}, 'examples': {0: ""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: [10]\nInput: text='AAAAA', pattern='AAA' -> Output: [0, 1, 2]""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 17}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","#include <atlstr.h>
#include <vector>

class KMP {
public:
    std::vector<int> findPatternIndices(const CString& text, const CString& pattern) {
        std::vector<int> indices;
        if (pattern.IsEmpty() || text.IsEmpty()) {
            return indices;
        }

        std::vector<int> lps = computeLPSArray(pattern);

        int i = 0, j = 0;
        while (i < text.GetLength()) {
            if (pattern[j] == text[i]) {
                j++;
                i++;
            }

            if (j == pattern.GetLength()) {
                indices.push_back(i - j);
                j = lps[j - 1];
            } else if (i < text.GetLength() && pattern[j] != text[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return indices;
    }

private:
    std::vector<int> computeLPSArray(const CString& pattern) {
        int len = 0;
        std::vector<int> lps(pattern.GetLength(), 0);
        
        int i = 1;
        while (i < pattern.GetLength()) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
};

void testKMP() {
    KMP kmp;
    
    CString text1 = ""ABABDABACDABABCABAB"";
    CString pattern1 = ""ABABCABAB"";
    std::vector<int> result1 = kmp.findPatternIndices(text1, pattern1);
    OutputDebugString(""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: ["");
    for (int i = 0; i < result1.size(); i++) {
        OutputDebugString(result1[i]);
        if (i < result1.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");

    CString text2 = ""AAAAA"";
    CString pattern2 = ""AAA"";
    std::vector<int> result2 = kmp.findPatternIndices(text2, pattern2);
    OutputDebugString(""Input: text='AAAAA', pattern='AAA' -> Output: ["");
    for (int i = 0; i < result2.size(); i++) {
        OutputDebugString(result2[i]);
        if (i < result2.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");
}
",AAAAAA,"Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm."
source_code_029,gpt-4-turbo_01,0.0,"{'ic_id': {0: 363}, 'ica_id': {0: 3514}, 'question': {0: 'Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm.'}, 'rules': {0: ['Use ATL for string processing.', 'Implement the KMP algorithm from scratch.']}, 'examples': {0: ""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: [10]\nInput: text='AAAAA', pattern='AAA' -> Output: [0, 1, 2]""}, 'programming_language': {0: 'C++'}, 'response_time': {0: 17}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","#include <atlstr.h>
#include <vector>

class KMP {
public:
    std::vector<int> findPatternIndices(const CString& text, const CString& pattern) {
        std::vector<int> indices;
        if (pattern.IsEmpty() || text.IsEmpty()) {
            return indices;
        }

        std::vector<int> lps = computeLPSArray(pattern);

        int i = 0, j = 0;
        while (i < text.GetLength()) {
            if (pattern[j] == text[i]) {
                j++;
                i++;
            }

            if (j == pattern.GetLength()) {
                indices.push_back(i - j);
                j = lps[j - 1];
            } else if (i < text.GetLength() && pattern[j] != text[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return indices;
    }

private:
    std::vector<int> computeLPSArray(const CString& pattern) {
        int len = 0;
        std::vector<int> lps(pattern.GetLength(), 0);
        
        int i = 1;
        while (i < pattern.GetLength()) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
};

void testKMP() {
    KMP kmp;
    
    CString text1 = ""ABABDABACDABABCABAB"";
    CString pattern1 = ""ABABCABAB"";
    std::vector<int> result1 = kmp.findPatternIndices(text1, pattern1);
    OutputDebugString(""Input: text='ABABDABACDABABCABAB', pattern='ABABCABAB' -> Output: ["");
    for (int i = 0; i < result1.size(); i++) {
        OutputDebugString(result1[i]);
        if (i < result1.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");

    CString text2 = ""AAAAA"";
    CString pattern2 = ""AAA"";
    std::vector<int> result2 = kmp.findPatternIndices(text2, pattern2);
    OutputDebugString(""Input: text='AAAAA', pattern='AAA' -> Output: ["");
    for (int i = 0; i < result2.size(); i++) {
        OutputDebugString(result2[i]);
        if (i < result2.size() - 1) {
            OutputDebugString("","");
        }
    }
    OutputDebugString(""]\n"");
}
",AAAAAA,"Implement a function using C++ with the Active Template Library (ATL) that takes two strings, `text` and `pattern`, and returns an array of starting indices for all occurrences of `pattern` in `text` using the Knuth-Morris-Pratt (KMP) algorithm."
source_code_030,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 368}, 'ica_id': {0: 3535}, 'question': {0: ""Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity.""}, 'rules': {0: ['Optimize for time complexity.', 'No use of third-party libraries.']}, 'examples': {0: 'Input: [0, 3, 4, 31], [4, 6, 30] Output: [0, 3, 4, 4, 6, 30, 31]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 8}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function mergeSortedArrays(arr1, arr2) {
    let sortedArray = [];
    let i = 0;
    let j = 0;

    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            sortedArray.push(arr1[i]);
            i++;
        } else {
            sortedArray.push(arr2[j]);
            j++;
        }
    }

    while (i < arr1.length) {
        sortedArray.push(arr1[i]);
        i++;
    }

    while (j < arr2.length) {
        sortedArray.push(arr2[j]);
        j++;
    }

    return sortedArray;
}

// Test the function with the example input
const arr1 = [0, 3, 4, 31];
const arr2 = [4, 6, 30];
console.log(mergeSortedArrays(arr1, arr2)); // Output: [0, 3, 4, 4, 6, 30, 31]
",jhjbhbkj,"Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity."
source_code_030,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 368}, 'ica_id': {0: 3535}, 'question': {0: ""Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity.""}, 'rules': {0: ['Optimize for time complexity.', 'No use of third-party libraries.']}, 'examples': {0: 'Input: [0, 3, 4, 31], [4, 6, 30] Output: [0, 3, 4, 4, 6, 30, 31]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 8}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function mergeSortedArrays(arr1, arr2) {
    let sortedArray = [];
    let i = 0;
    let j = 0;

    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            sortedArray.push(arr1[i]);
            i++;
        } else {
            sortedArray.push(arr2[j]);
            j++;
        }
    }

    while (i < arr1.length) {
        sortedArray.push(arr1[i]);
        i++;
    }

    while (j < arr2.length) {
        sortedArray.push(arr2[j]);
        j++;
    }

    return sortedArray;
}

// Test the function with the example input
const arr1 = [0, 3, 4, 31];
const arr2 = [4, 6, 30];
console.log(mergeSortedArrays(arr1, arr2)); // Output: [0, 3, 4, 4, 6, 30, 31]
",jhjbhbkj,"Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity."
source_code_030,gpt-4_00,0.0,"{'ic_id': {0: 368}, 'ica_id': {0: 3535}, 'question': {0: ""Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity.""}, 'rules': {0: ['Optimize for time complexity.', 'No use of third-party libraries.']}, 'examples': {0: 'Input: [0, 3, 4, 31], [4, 6, 30] Output: [0, 3, 4, 4, 6, 30, 31]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 8}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function mergeSortedArrays(arr1, arr2) {
    let sortedArray = [];
    let i = 0;
    let j = 0;

    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            sortedArray.push(arr1[i]);
            i++;
        } else {
            sortedArray.push(arr2[j]);
            j++;
        }
    }

    while (i < arr1.length) {
        sortedArray.push(arr1[i]);
        i++;
    }

    while (j < arr2.length) {
        sortedArray.push(arr2[j]);
        j++;
    }

    return sortedArray;
}

// Test the function with the example input
const arr1 = [0, 3, 4, 31];
const arr2 = [4, 6, 30];
console.log(mergeSortedArrays(arr1, arr2)); // Output: [0, 3, 4, 4, 6, 30, 31]
",jhjbhbkj,"Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity."
source_code_030,gpt-4_01,0.0,"{'ic_id': {0: 368}, 'ica_id': {0: 3535}, 'question': {0: ""Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity.""}, 'rules': {0: ['Optimize for time complexity.', 'No use of third-party libraries.']}, 'examples': {0: 'Input: [0, 3, 4, 31], [4, 6, 30] Output: [0, 3, 4, 4, 6, 30, 31]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 8}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function mergeSortedArrays(arr1, arr2) {
    let sortedArray = [];
    let i = 0;
    let j = 0;

    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            sortedArray.push(arr1[i]);
            i++;
        } else {
            sortedArray.push(arr2[j]);
            j++;
        }
    }

    while (i < arr1.length) {
        sortedArray.push(arr1[i]);
        i++;
    }

    while (j < arr2.length) {
        sortedArray.push(arr2[j]);
        j++;
    }

    return sortedArray;
}

// Test the function with the example input
const arr1 = [0, 3, 4, 31];
const arr2 = [4, 6, 30];
console.log(mergeSortedArrays(arr1, arr2)); // Output: [0, 3, 4, 4, 6, 30, 31]
",jhjbhbkj,"Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity."
source_code_030,gpt-4-turbo_00,0.0,"{'ic_id': {0: 368}, 'ica_id': {0: 3535}, 'question': {0: ""Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity.""}, 'rules': {0: ['Optimize for time complexity.', 'No use of third-party libraries.']}, 'examples': {0: 'Input: [0, 3, 4, 31], [4, 6, 30] Output: [0, 3, 4, 4, 6, 30, 31]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 8}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function mergeSortedArrays(arr1, arr2) {
    let sortedArray = [];
    let i = 0;
    let j = 0;

    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            sortedArray.push(arr1[i]);
            i++;
        } else {
            sortedArray.push(arr2[j]);
            j++;
        }
    }

    while (i < arr1.length) {
        sortedArray.push(arr1[i]);
        i++;
    }

    while (j < arr2.length) {
        sortedArray.push(arr2[j]);
        j++;
    }

    return sortedArray;
}

// Test the function with the example input
const arr1 = [0, 3, 4, 31];
const arr2 = [4, 6, 30];
console.log(mergeSortedArrays(arr1, arr2)); // Output: [0, 3, 4, 4, 6, 30, 31]
",jhjbhbkj,"Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity."
source_code_030,gpt-4-turbo_01,0.0,"{'ic_id': {0: 368}, 'ica_id': {0: 3535}, 'question': {0: ""Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity.""}, 'rules': {0: ['Optimize for time complexity.', 'No use of third-party libraries.']}, 'examples': {0: 'Input: [0, 3, 4, 31], [4, 6, 30] Output: [0, 3, 4, 4, 6, 30, 31]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 8}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function mergeSortedArrays(arr1, arr2) {
    let sortedArray = [];
    let i = 0;
    let j = 0;

    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            sortedArray.push(arr1[i]);
            i++;
        } else {
            sortedArray.push(arr2[j]);
            j++;
        }
    }

    while (i < arr1.length) {
        sortedArray.push(arr1[i]);
        i++;
    }

    while (j < arr2.length) {
        sortedArray.push(arr2[j]);
        j++;
    }

    return sortedArray;
}

// Test the function with the example input
const arr1 = [0, 3, 4, 31];
const arr2 = [4, 6, 30];
console.log(mergeSortedArrays(arr1, arr2)); // Output: [0, 3, 4, 4, 6, 30, 31]
",jhjbhbkj,"Create a JavaScript function, 'mergeSortedArrays', that takes two arrays of numbers sorted in ascending order and merges them into a single array that is also sorted in ascending order. Make sure it is optimized for time complexity."
source_code_031,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 371}, 'ica_id': {0: 3604}, 'question': {0: 'Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once.'}, 'rules': {0: ['Each user can only be paired once.', 'Minimize the use of third-party libraries.', 'Consider users with at least one skill in common for pairing.']}, 'examples': {0: ""Input: [{ name: 'Alice', skills: { Java: 5, C++: 3 } }, { name: 'Bob', skills: { Java: 6, Python: 4 } }, { name: 'Charlie', skills: { Python: 5, C++: 5 } }]\nOutput: [[ 'Alice', 'Bob' ]]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 2001}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","function findBestPairs(users) {
    const pairings = [];
  
    const sortedUsers = users.sort((a, b) => {
        const avgRatingA = calculateAvgSkillRating(a);
        const avgRatingB = calculateAvgSkillRating(b);
        return avgRatingB - avgRatingA;
    });
  
    while (sortedUsers.length > 1) {
        const user = sortedUsers.shift();
        const bestPair = findBestPair(user, sortedUsers);
        if (bestPair) {
            pairings.push([user.name, bestPair.name]);
            sortedUsers.splice(sortedUsers.indexOf(bestPair), 1);
        }
    }
  
    return pairings;
}

function findBestPair(user, users) {
    let bestPair = null;
    let maxSimilarity = 0;
  
    for (let otherUser of users) {
        const similarity = calculateSkillSimilarity(user, otherUser);
        
        if (similarity > maxSimilarity) {
            maxSimilarity = similarity;
            bestPair = otherUser;
        }
    }
  
    return bestPair;
}

function calculateSkillSimilarity(user1, user2) {
    let commonSkills = 0;
    let totalSimilarity = 0;
  
    for (let skill in user1.skills) {
        if (user2.skills.hasOwnProperty(skill)) {
            commonSkills++;
            totalSimilarity += Math.abs(user1.skills[skill] - user2.skills[skill]);
        }
    }
  
    return commonSkills === 0 ? 0 : totalSimilarity / commonSkills;
}

function calculateAvgSkillRating(user) {
    const totalRating = Object.values(user.skills).reduce((acc, val) => acc + val, 0);
    const numSkills = Object.keys(user.skills).length;
  
    return numSkills === 0 ? 0 : totalRating / numSkills;
}

const users = [
    { name: 'Alice', skills: { Java: 5, Cpp: 3 } },
    { name: 'Bob', skills: { Java: 6, Python: 4 } },
    { name: 'Charlie', skills: { Python: 5, Cpp: 5 } }
];

const pairs = findBestPairs(users);
console.log(pairs);
","function findBestPairings(users) {
  const pairs = []

  while (users.length > 1) {
    let bestPair = null
    let bestAverageRating = -1

    for (let i = 0; i < users.length - 1; i++) {
      for (let j = i + 1; j < users.length; j++) {
        const commonSkills = getCommonSkills(users[i].skills, users[j].skills)

        if (commonSkills.length > 0) {
          const averageRating = calculateAverageRating(
            commonSkills,
            users[i],
            users[j]
          )

          if (averageRating > bestAverageRating) {
            bestAverageRating = averageRating
            bestPair = [users[i].name, users[j].name]
          }
        }
      }
    }

    if (bestPair) {
      pairs.push(bestPair)
      users = users.filter(
        (user) => user.name !== bestPair[0] && user.name !== bestPair[1]
      )
    } else {
      break
    }
  }

  return pairs
}

function getCommonSkills(skills1, skills2) {
  return Object.keys(skills1).filter((skill) => skills2.hasOwnProperty(skill))
}

function calculateAverageRating(commonSkills, user1, user2) {
  const totalRating = commonSkills.reduce((sum, skill) => {
    return sum + user1.skills[skill] + user2.skills[skill]
  }, 0)

  return totalRating / commonSkills.length
}

const users = [
  { name: 'Alice', skills: { Java: 5, C: 3 } },
  { name: 'Bob', skills: { Java: 6, Python: 4 } },
  { name: 'Charlie', skills: { Python: 5, C: 5 } }
]

const pairings = findBestPairings(users)
console.log(pairings)","Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once."
source_code_031,gpt-3.5-turbo_01,0.8,"{'ic_id': {0: 371}, 'ica_id': {0: 3604}, 'question': {0: 'Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once.'}, 'rules': {0: ['Each user can only be paired once.', 'Minimize the use of third-party libraries.', 'Consider users with at least one skill in common for pairing.']}, 'examples': {0: ""Input: [{ name: 'Alice', skills: { Java: 5, C++: 3 } }, { name: 'Bob', skills: { Java: 6, Python: 4 } }, { name: 'Charlie', skills: { Python: 5, C++: 5 } }]\nOutput: [[ 'Alice', 'Bob' ]]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 2001}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","function findBestPairs(users) {
    const pairings = [];
  
    const sortedUsers = users.sort((a, b) => {
        const avgRatingA = calculateAvgSkillRating(a);
        const avgRatingB = calculateAvgSkillRating(b);
        return avgRatingB - avgRatingA;
    });
  
    while (sortedUsers.length > 1) {
        const user = sortedUsers.shift();
        const bestPair = findBestPair(user, sortedUsers);
        if (bestPair) {
            pairings.push([user.name, bestPair.name]);
            sortedUsers.splice(sortedUsers.indexOf(bestPair), 1);
        }
    }
  
    return pairings;
}

function findBestPair(user, users) {
    let bestPair = null;
    let maxSimilarity = 0;
  
    for (let otherUser of users) {
        const similarity = calculateSkillSimilarity(user, otherUser);
        
        if (similarity > maxSimilarity) {
            maxSimilarity = similarity;
            bestPair = otherUser;
        }
    }
  
    return bestPair;
}

function calculateSkillSimilarity(user1, user2) {
    let commonSkills = 0;
    let totalSimilarity = 0;
  
    for (let skill in user1.skills) {
        if (user2.skills.hasOwnProperty(skill)) {
            commonSkills++;
            totalSimilarity += Math.abs(user1.skills[skill] - user2.skills[skill]);
        }
    }
  
    return commonSkills === 0 ? 0 : totalSimilarity / commonSkills;
}

function calculateAvgSkillRating(user) {
    const totalRating = Object.values(user.skills).reduce((acc, val) => acc + val, 0);
    const numSkills = Object.keys(user.skills).length;
  
    return numSkills === 0 ? 0 : totalRating / numSkills;
}

const users = [
    { name: 'Alice', skills: { Java: 5, Cpp: 3 } },
    { name: 'Bob', skills: { Java: 6, Python: 4 } },
    { name: 'Charlie', skills: { Python: 5, Cpp: 5 } }
];

const pairs = findBestPairs(users);
console.log(pairs);
","function findBestPairings(users) {
  const pairs = []

  while (users.length > 1) {
    let bestPair = null
    let bestAverageRating = -1

    for (let i = 0; i < users.length - 1; i++) {
      for (let j = i + 1; j < users.length; j++) {
        const commonSkills = getCommonSkills(users[i].skills, users[j].skills)

        if (commonSkills.length > 0) {
          const averageRating = calculateAverageRating(
            commonSkills,
            users[i],
            users[j]
          )

          if (averageRating > bestAverageRating) {
            bestAverageRating = averageRating
            bestPair = [users[i].name, users[j].name]
          }
        }
      }
    }

    if (bestPair) {
      pairs.push(bestPair)
      users = users.filter(
        (user) => user.name !== bestPair[0] && user.name !== bestPair[1]
      )
    } else {
      break
    }
  }

  return pairs
}

function getCommonSkills(skills1, skills2) {
  return Object.keys(skills1).filter((skill) => skills2.hasOwnProperty(skill))
}

function calculateAverageRating(commonSkills, user1, user2) {
  const totalRating = commonSkills.reduce((sum, skill) => {
    return sum + user1.skills[skill] + user2.skills[skill]
  }, 0)

  return totalRating / commonSkills.length
}

const users = [
  { name: 'Alice', skills: { Java: 5, C: 3 } },
  { name: 'Bob', skills: { Java: 6, Python: 4 } },
  { name: 'Charlie', skills: { Python: 5, C: 5 } }
]

const pairings = findBestPairings(users)
console.log(pairings)","Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once."
source_code_031,gpt-4_00,0.4,"{'ic_id': {0: 371}, 'ica_id': {0: 3604}, 'question': {0: 'Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once.'}, 'rules': {0: ['Each user can only be paired once.', 'Minimize the use of third-party libraries.', 'Consider users with at least one skill in common for pairing.']}, 'examples': {0: ""Input: [{ name: 'Alice', skills: { Java: 5, C++: 3 } }, { name: 'Bob', skills: { Java: 6, Python: 4 } }, { name: 'Charlie', skills: { Python: 5, C++: 5 } }]\nOutput: [[ 'Alice', 'Bob' ]]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 2001}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","function findBestPairs(users) {
    const pairings = [];
  
    const sortedUsers = users.sort((a, b) => {
        const avgRatingA = calculateAvgSkillRating(a);
        const avgRatingB = calculateAvgSkillRating(b);
        return avgRatingB - avgRatingA;
    });
  
    while (sortedUsers.length > 1) {
        const user = sortedUsers.shift();
        const bestPair = findBestPair(user, sortedUsers);
        if (bestPair) {
            pairings.push([user.name, bestPair.name]);
            sortedUsers.splice(sortedUsers.indexOf(bestPair), 1);
        }
    }
  
    return pairings;
}

function findBestPair(user, users) {
    let bestPair = null;
    let maxSimilarity = 0;
  
    for (let otherUser of users) {
        const similarity = calculateSkillSimilarity(user, otherUser);
        
        if (similarity > maxSimilarity) {
            maxSimilarity = similarity;
            bestPair = otherUser;
        }
    }
  
    return bestPair;
}

function calculateSkillSimilarity(user1, user2) {
    let commonSkills = 0;
    let totalSimilarity = 0;
  
    for (let skill in user1.skills) {
        if (user2.skills.hasOwnProperty(skill)) {
            commonSkills++;
            totalSimilarity += Math.abs(user1.skills[skill] - user2.skills[skill]);
        }
    }
  
    return commonSkills === 0 ? 0 : totalSimilarity / commonSkills;
}

function calculateAvgSkillRating(user) {
    const totalRating = Object.values(user.skills).reduce((acc, val) => acc + val, 0);
    const numSkills = Object.keys(user.skills).length;
  
    return numSkills === 0 ? 0 : totalRating / numSkills;
}

const users = [
    { name: 'Alice', skills: { Java: 5, Cpp: 3 } },
    { name: 'Bob', skills: { Java: 6, Python: 4 } },
    { name: 'Charlie', skills: { Python: 5, Cpp: 5 } }
];

const pairs = findBestPairs(users);
console.log(pairs);
","function findBestPairings(users) {
  const pairs = []

  while (users.length > 1) {
    let bestPair = null
    let bestAverageRating = -1

    for (let i = 0; i < users.length - 1; i++) {
      for (let j = i + 1; j < users.length; j++) {
        const commonSkills = getCommonSkills(users[i].skills, users[j].skills)

        if (commonSkills.length > 0) {
          const averageRating = calculateAverageRating(
            commonSkills,
            users[i],
            users[j]
          )

          if (averageRating > bestAverageRating) {
            bestAverageRating = averageRating
            bestPair = [users[i].name, users[j].name]
          }
        }
      }
    }

    if (bestPair) {
      pairs.push(bestPair)
      users = users.filter(
        (user) => user.name !== bestPair[0] && user.name !== bestPair[1]
      )
    } else {
      break
    }
  }

  return pairs
}

function getCommonSkills(skills1, skills2) {
  return Object.keys(skills1).filter((skill) => skills2.hasOwnProperty(skill))
}

function calculateAverageRating(commonSkills, user1, user2) {
  const totalRating = commonSkills.reduce((sum, skill) => {
    return sum + user1.skills[skill] + user2.skills[skill]
  }, 0)

  return totalRating / commonSkills.length
}

const users = [
  { name: 'Alice', skills: { Java: 5, C: 3 } },
  { name: 'Bob', skills: { Java: 6, Python: 4 } },
  { name: 'Charlie', skills: { Python: 5, C: 5 } }
]

const pairings = findBestPairings(users)
console.log(pairings)","Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once."
source_code_031,gpt-4_01,0.4,"{'ic_id': {0: 371}, 'ica_id': {0: 3604}, 'question': {0: 'Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once.'}, 'rules': {0: ['Each user can only be paired once.', 'Minimize the use of third-party libraries.', 'Consider users with at least one skill in common for pairing.']}, 'examples': {0: ""Input: [{ name: 'Alice', skills: { Java: 5, C++: 3 } }, { name: 'Bob', skills: { Java: 6, Python: 4 } }, { name: 'Charlie', skills: { Python: 5, C++: 5 } }]\nOutput: [[ 'Alice', 'Bob' ]]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 2001}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","function findBestPairs(users) {
    const pairings = [];
  
    const sortedUsers = users.sort((a, b) => {
        const avgRatingA = calculateAvgSkillRating(a);
        const avgRatingB = calculateAvgSkillRating(b);
        return avgRatingB - avgRatingA;
    });
  
    while (sortedUsers.length > 1) {
        const user = sortedUsers.shift();
        const bestPair = findBestPair(user, sortedUsers);
        if (bestPair) {
            pairings.push([user.name, bestPair.name]);
            sortedUsers.splice(sortedUsers.indexOf(bestPair), 1);
        }
    }
  
    return pairings;
}

function findBestPair(user, users) {
    let bestPair = null;
    let maxSimilarity = 0;
  
    for (let otherUser of users) {
        const similarity = calculateSkillSimilarity(user, otherUser);
        
        if (similarity > maxSimilarity) {
            maxSimilarity = similarity;
            bestPair = otherUser;
        }
    }
  
    return bestPair;
}

function calculateSkillSimilarity(user1, user2) {
    let commonSkills = 0;
    let totalSimilarity = 0;
  
    for (let skill in user1.skills) {
        if (user2.skills.hasOwnProperty(skill)) {
            commonSkills++;
            totalSimilarity += Math.abs(user1.skills[skill] - user2.skills[skill]);
        }
    }
  
    return commonSkills === 0 ? 0 : totalSimilarity / commonSkills;
}

function calculateAvgSkillRating(user) {
    const totalRating = Object.values(user.skills).reduce((acc, val) => acc + val, 0);
    const numSkills = Object.keys(user.skills).length;
  
    return numSkills === 0 ? 0 : totalRating / numSkills;
}

const users = [
    { name: 'Alice', skills: { Java: 5, Cpp: 3 } },
    { name: 'Bob', skills: { Java: 6, Python: 4 } },
    { name: 'Charlie', skills: { Python: 5, Cpp: 5 } }
];

const pairs = findBestPairs(users);
console.log(pairs);
","function findBestPairings(users) {
  const pairs = []

  while (users.length > 1) {
    let bestPair = null
    let bestAverageRating = -1

    for (let i = 0; i < users.length - 1; i++) {
      for (let j = i + 1; j < users.length; j++) {
        const commonSkills = getCommonSkills(users[i].skills, users[j].skills)

        if (commonSkills.length > 0) {
          const averageRating = calculateAverageRating(
            commonSkills,
            users[i],
            users[j]
          )

          if (averageRating > bestAverageRating) {
            bestAverageRating = averageRating
            bestPair = [users[i].name, users[j].name]
          }
        }
      }
    }

    if (bestPair) {
      pairs.push(bestPair)
      users = users.filter(
        (user) => user.name !== bestPair[0] && user.name !== bestPair[1]
      )
    } else {
      break
    }
  }

  return pairs
}

function getCommonSkills(skills1, skills2) {
  return Object.keys(skills1).filter((skill) => skills2.hasOwnProperty(skill))
}

function calculateAverageRating(commonSkills, user1, user2) {
  const totalRating = commonSkills.reduce((sum, skill) => {
    return sum + user1.skills[skill] + user2.skills[skill]
  }, 0)

  return totalRating / commonSkills.length
}

const users = [
  { name: 'Alice', skills: { Java: 5, C: 3 } },
  { name: 'Bob', skills: { Java: 6, Python: 4 } },
  { name: 'Charlie', skills: { Python: 5, C: 5 } }
]

const pairings = findBestPairings(users)
console.log(pairings)","Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once."
source_code_031,gpt-4-turbo_00,0.4,"{'ic_id': {0: 371}, 'ica_id': {0: 3604}, 'question': {0: 'Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once.'}, 'rules': {0: ['Each user can only be paired once.', 'Minimize the use of third-party libraries.', 'Consider users with at least one skill in common for pairing.']}, 'examples': {0: ""Input: [{ name: 'Alice', skills: { Java: 5, C++: 3 } }, { name: 'Bob', skills: { Java: 6, Python: 4 } }, { name: 'Charlie', skills: { Python: 5, C++: 5 } }]\nOutput: [[ 'Alice', 'Bob' ]]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 2001}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","function findBestPairs(users) {
    const pairings = [];
  
    const sortedUsers = users.sort((a, b) => {
        const avgRatingA = calculateAvgSkillRating(a);
        const avgRatingB = calculateAvgSkillRating(b);
        return avgRatingB - avgRatingA;
    });
  
    while (sortedUsers.length > 1) {
        const user = sortedUsers.shift();
        const bestPair = findBestPair(user, sortedUsers);
        if (bestPair) {
            pairings.push([user.name, bestPair.name]);
            sortedUsers.splice(sortedUsers.indexOf(bestPair), 1);
        }
    }
  
    return pairings;
}

function findBestPair(user, users) {
    let bestPair = null;
    let maxSimilarity = 0;
  
    for (let otherUser of users) {
        const similarity = calculateSkillSimilarity(user, otherUser);
        
        if (similarity > maxSimilarity) {
            maxSimilarity = similarity;
            bestPair = otherUser;
        }
    }
  
    return bestPair;
}

function calculateSkillSimilarity(user1, user2) {
    let commonSkills = 0;
    let totalSimilarity = 0;
  
    for (let skill in user1.skills) {
        if (user2.skills.hasOwnProperty(skill)) {
            commonSkills++;
            totalSimilarity += Math.abs(user1.skills[skill] - user2.skills[skill]);
        }
    }
  
    return commonSkills === 0 ? 0 : totalSimilarity / commonSkills;
}

function calculateAvgSkillRating(user) {
    const totalRating = Object.values(user.skills).reduce((acc, val) => acc + val, 0);
    const numSkills = Object.keys(user.skills).length;
  
    return numSkills === 0 ? 0 : totalRating / numSkills;
}

const users = [
    { name: 'Alice', skills: { Java: 5, Cpp: 3 } },
    { name: 'Bob', skills: { Java: 6, Python: 4 } },
    { name: 'Charlie', skills: { Python: 5, Cpp: 5 } }
];

const pairs = findBestPairs(users);
console.log(pairs);
","function findBestPairings(users) {
  const pairs = []

  while (users.length > 1) {
    let bestPair = null
    let bestAverageRating = -1

    for (let i = 0; i < users.length - 1; i++) {
      for (let j = i + 1; j < users.length; j++) {
        const commonSkills = getCommonSkills(users[i].skills, users[j].skills)

        if (commonSkills.length > 0) {
          const averageRating = calculateAverageRating(
            commonSkills,
            users[i],
            users[j]
          )

          if (averageRating > bestAverageRating) {
            bestAverageRating = averageRating
            bestPair = [users[i].name, users[j].name]
          }
        }
      }
    }

    if (bestPair) {
      pairs.push(bestPair)
      users = users.filter(
        (user) => user.name !== bestPair[0] && user.name !== bestPair[1]
      )
    } else {
      break
    }
  }

  return pairs
}

function getCommonSkills(skills1, skills2) {
  return Object.keys(skills1).filter((skill) => skills2.hasOwnProperty(skill))
}

function calculateAverageRating(commonSkills, user1, user2) {
  const totalRating = commonSkills.reduce((sum, skill) => {
    return sum + user1.skills[skill] + user2.skills[skill]
  }, 0)

  return totalRating / commonSkills.length
}

const users = [
  { name: 'Alice', skills: { Java: 5, C: 3 } },
  { name: 'Bob', skills: { Java: 6, Python: 4 } },
  { name: 'Charlie', skills: { Python: 5, C: 5 } }
]

const pairings = findBestPairings(users)
console.log(pairings)","Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once."
source_code_031,gpt-4-turbo_01,0.4,"{'ic_id': {0: 371}, 'ica_id': {0: 3604}, 'question': {0: 'Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once.'}, 'rules': {0: ['Each user can only be paired once.', 'Minimize the use of third-party libraries.', 'Consider users with at least one skill in common for pairing.']}, 'examples': {0: ""Input: [{ name: 'Alice', skills: { Java: 5, C++: 3 } }, { name: 'Bob', skills: { Java: 6, Python: 4 } }, { name: 'Charlie', skills: { Python: 5, C++: 5 } }]\nOutput: [[ 'Alice', 'Bob' ]]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 2001}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 300.0}, 'total_weight': {0: 300.0}}","function findBestPairs(users) {
    const pairings = [];
  
    const sortedUsers = users.sort((a, b) => {
        const avgRatingA = calculateAvgSkillRating(a);
        const avgRatingB = calculateAvgSkillRating(b);
        return avgRatingB - avgRatingA;
    });
  
    while (sortedUsers.length > 1) {
        const user = sortedUsers.shift();
        const bestPair = findBestPair(user, sortedUsers);
        if (bestPair) {
            pairings.push([user.name, bestPair.name]);
            sortedUsers.splice(sortedUsers.indexOf(bestPair), 1);
        }
    }
  
    return pairings;
}

function findBestPair(user, users) {
    let bestPair = null;
    let maxSimilarity = 0;
  
    for (let otherUser of users) {
        const similarity = calculateSkillSimilarity(user, otherUser);
        
        if (similarity > maxSimilarity) {
            maxSimilarity = similarity;
            bestPair = otherUser;
        }
    }
  
    return bestPair;
}

function calculateSkillSimilarity(user1, user2) {
    let commonSkills = 0;
    let totalSimilarity = 0;
  
    for (let skill in user1.skills) {
        if (user2.skills.hasOwnProperty(skill)) {
            commonSkills++;
            totalSimilarity += Math.abs(user1.skills[skill] - user2.skills[skill]);
        }
    }
  
    return commonSkills === 0 ? 0 : totalSimilarity / commonSkills;
}

function calculateAvgSkillRating(user) {
    const totalRating = Object.values(user.skills).reduce((acc, val) => acc + val, 0);
    const numSkills = Object.keys(user.skills).length;
  
    return numSkills === 0 ? 0 : totalRating / numSkills;
}

const users = [
    { name: 'Alice', skills: { Java: 5, Cpp: 3 } },
    { name: 'Bob', skills: { Java: 6, Python: 4 } },
    { name: 'Charlie', skills: { Python: 5, Cpp: 5 } }
];

const pairs = findBestPairs(users);
console.log(pairs);
","function findBestPairings(users) {
  const pairs = []

  while (users.length > 1) {
    let bestPair = null
    let bestAverageRating = -1

    for (let i = 0; i < users.length - 1; i++) {
      for (let j = i + 1; j < users.length; j++) {
        const commonSkills = getCommonSkills(users[i].skills, users[j].skills)

        if (commonSkills.length > 0) {
          const averageRating = calculateAverageRating(
            commonSkills,
            users[i],
            users[j]
          )

          if (averageRating > bestAverageRating) {
            bestAverageRating = averageRating
            bestPair = [users[i].name, users[j].name]
          }
        }
      }
    }

    if (bestPair) {
      pairs.push(bestPair)
      users = users.filter(
        (user) => user.name !== bestPair[0] && user.name !== bestPair[1]
      )
    } else {
      break
    }
  }

  return pairs
}

function getCommonSkills(skills1, skills2) {
  return Object.keys(skills1).filter((skill) => skills2.hasOwnProperty(skill))
}

function calculateAverageRating(commonSkills, user1, user2) {
  const totalRating = commonSkills.reduce((sum, skill) => {
    return sum + user1.skills[skill] + user2.skills[skill]
  }, 0)

  return totalRating / commonSkills.length
}

const users = [
  { name: 'Alice', skills: { Java: 5, C: 3 } },
  { name: 'Bob', skills: { Java: 6, Python: 4 } },
  { name: 'Charlie', skills: { Python: 5, C: 5 } }
]

const pairings = findBestPairings(users)
console.log(pairings)","Given an array of user objects each with a list of skills and ratings, write a function that matches users into pairs such that the pairs have the highest average similar skill rating. The function should return a list of pairings where each user is used at most once."
source_code_032,gpt-3.5-turbo_00,0.6,"{'ic_id': {0: 365}, 'ica_id': {0: 3720}, 'question': {0: 'You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering.'}, 'rules': {0: ['Create REST API endpoint using Laravel', 'Use Vue.js for the frontend component', 'Implement pagination and filtering on both backend and frontend', 'Ensure proper exception handling']}, 'examples': {0: ""Input: GET /api/users?page=2&username=doe\nOutput: JSON response with users having 'doe' in their username on the second page of results.""}, 'programming_language': {0: 'PHP & JavaScript'}, 'response_time': {0: 1373}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","// Laravel - UserController.php

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function getUsers(Request $request)
    {
        $perPage = 10; // Number of users per page

        $users = User::query();

        if ($request->has('username')) {
            $users->where('username', 'like', '%'.$request->username.'%');
        }

        $users = $users->paginate($perPage);

        return response()->json($users);
    }
}
","api file
Route::get('/users',UserController@index)

UserController.php


Public function index(Request $request){
try{
            $query = User::query();
           if($request->has('username')){
          $query->where(usersname,like,% $request->input('username')%);
      }
          
       $users = $query->paginate(10)
       return response()->json($users);
      }
      catch(/Exception $e){
      return response()->json(['error'=>'error'],500);
      }
}


userList.file

<template>
<div>
<input v-model=""filter"" @input=""fetchUsers"">
<ul>
<li v-for=""u in users"">{{user.username}}</li>
</ul>
<pagination :data=""users"" @pagination-change-page=""fetchUsers""></pagination>
</div>
</template>
<script>
export default{
data(){
users:[],
filter:''
}
mounted(){
this.fetchUsers();
},
method:{
fetchUsers(page = 1){
axios.get('/api/users?page=${page}&username=${this.filer}')
.then(res=>{
this.users = res.data.data
})
.catch(e=>{
console.log('Error')
})
}
}
}  
</script>","You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering."
source_code_032,gpt-3.5-turbo_01,0.6,"{'ic_id': {0: 365}, 'ica_id': {0: 3720}, 'question': {0: 'You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering.'}, 'rules': {0: ['Create REST API endpoint using Laravel', 'Use Vue.js for the frontend component', 'Implement pagination and filtering on both backend and frontend', 'Ensure proper exception handling']}, 'examples': {0: ""Input: GET /api/users?page=2&username=doe\nOutput: JSON response with users having 'doe' in their username on the second page of results.""}, 'programming_language': {0: 'PHP & JavaScript'}, 'response_time': {0: 1373}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","// Laravel - UserController.php

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function getUsers(Request $request)
    {
        $perPage = 10; // Number of users per page

        $users = User::query();

        if ($request->has('username')) {
            $users->where('username', 'like', '%'.$request->username.'%');
        }

        $users = $users->paginate($perPage);

        return response()->json($users);
    }
}
","api file
Route::get('/users',UserController@index)

UserController.php


Public function index(Request $request){
try{
            $query = User::query();
           if($request->has('username')){
          $query->where(usersname,like,% $request->input('username')%);
      }
          
       $users = $query->paginate(10)
       return response()->json($users);
      }
      catch(/Exception $e){
      return response()->json(['error'=>'error'],500);
      }
}


userList.file

<template>
<div>
<input v-model=""filter"" @input=""fetchUsers"">
<ul>
<li v-for=""u in users"">{{user.username}}</li>
</ul>
<pagination :data=""users"" @pagination-change-page=""fetchUsers""></pagination>
</div>
</template>
<script>
export default{
data(){
users:[],
filter:''
}
mounted(){
this.fetchUsers();
},
method:{
fetchUsers(page = 1){
axios.get('/api/users?page=${page}&username=${this.filer}')
.then(res=>{
this.users = res.data.data
})
.catch(e=>{
console.log('Error')
})
}
}
}  
</script>","You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering."
source_code_032,gpt-4_00,0.5,"{'ic_id': {0: 365}, 'ica_id': {0: 3720}, 'question': {0: 'You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering.'}, 'rules': {0: ['Create REST API endpoint using Laravel', 'Use Vue.js for the frontend component', 'Implement pagination and filtering on both backend and frontend', 'Ensure proper exception handling']}, 'examples': {0: ""Input: GET /api/users?page=2&username=doe\nOutput: JSON response with users having 'doe' in their username on the second page of results.""}, 'programming_language': {0: 'PHP & JavaScript'}, 'response_time': {0: 1373}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","// Laravel - UserController.php

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function getUsers(Request $request)
    {
        $perPage = 10; // Number of users per page

        $users = User::query();

        if ($request->has('username')) {
            $users->where('username', 'like', '%'.$request->username.'%');
        }

        $users = $users->paginate($perPage);

        return response()->json($users);
    }
}
","api file
Route::get('/users',UserController@index)

UserController.php


Public function index(Request $request){
try{
            $query = User::query();
           if($request->has('username')){
          $query->where(usersname,like,% $request->input('username')%);
      }
          
       $users = $query->paginate(10)
       return response()->json($users);
      }
      catch(/Exception $e){
      return response()->json(['error'=>'error'],500);
      }
}


userList.file

<template>
<div>
<input v-model=""filter"" @input=""fetchUsers"">
<ul>
<li v-for=""u in users"">{{user.username}}</li>
</ul>
<pagination :data=""users"" @pagination-change-page=""fetchUsers""></pagination>
</div>
</template>
<script>
export default{
data(){
users:[],
filter:''
}
mounted(){
this.fetchUsers();
},
method:{
fetchUsers(page = 1){
axios.get('/api/users?page=${page}&username=${this.filer}')
.then(res=>{
this.users = res.data.data
})
.catch(e=>{
console.log('Error')
})
}
}
}  
</script>","You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering."
source_code_032,gpt-4_01,0.5,"{'ic_id': {0: 365}, 'ica_id': {0: 3720}, 'question': {0: 'You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering.'}, 'rules': {0: ['Create REST API endpoint using Laravel', 'Use Vue.js for the frontend component', 'Implement pagination and filtering on both backend and frontend', 'Ensure proper exception handling']}, 'examples': {0: ""Input: GET /api/users?page=2&username=doe\nOutput: JSON response with users having 'doe' in their username on the second page of results.""}, 'programming_language': {0: 'PHP & JavaScript'}, 'response_time': {0: 1373}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","// Laravel - UserController.php

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function getUsers(Request $request)
    {
        $perPage = 10; // Number of users per page

        $users = User::query();

        if ($request->has('username')) {
            $users->where('username', 'like', '%'.$request->username.'%');
        }

        $users = $users->paginate($perPage);

        return response()->json($users);
    }
}
","api file
Route::get('/users',UserController@index)

UserController.php


Public function index(Request $request){
try{
            $query = User::query();
           if($request->has('username')){
          $query->where(usersname,like,% $request->input('username')%);
      }
          
       $users = $query->paginate(10)
       return response()->json($users);
      }
      catch(/Exception $e){
      return response()->json(['error'=>'error'],500);
      }
}


userList.file

<template>
<div>
<input v-model=""filter"" @input=""fetchUsers"">
<ul>
<li v-for=""u in users"">{{user.username}}</li>
</ul>
<pagination :data=""users"" @pagination-change-page=""fetchUsers""></pagination>
</div>
</template>
<script>
export default{
data(){
users:[],
filter:''
}
mounted(){
this.fetchUsers();
},
method:{
fetchUsers(page = 1){
axios.get('/api/users?page=${page}&username=${this.filer}')
.then(res=>{
this.users = res.data.data
})
.catch(e=>{
console.log('Error')
})
}
}
}  
</script>","You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering."
source_code_032,gpt-4-turbo_00,0.4,"{'ic_id': {0: 365}, 'ica_id': {0: 3720}, 'question': {0: 'You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering.'}, 'rules': {0: ['Create REST API endpoint using Laravel', 'Use Vue.js for the frontend component', 'Implement pagination and filtering on both backend and frontend', 'Ensure proper exception handling']}, 'examples': {0: ""Input: GET /api/users?page=2&username=doe\nOutput: JSON response with users having 'doe' in their username on the second page of results.""}, 'programming_language': {0: 'PHP & JavaScript'}, 'response_time': {0: 1373}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","// Laravel - UserController.php

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function getUsers(Request $request)
    {
        $perPage = 10; // Number of users per page

        $users = User::query();

        if ($request->has('username')) {
            $users->where('username', 'like', '%'.$request->username.'%');
        }

        $users = $users->paginate($perPage);

        return response()->json($users);
    }
}
","api file
Route::get('/users',UserController@index)

UserController.php


Public function index(Request $request){
try{
            $query = User::query();
           if($request->has('username')){
          $query->where(usersname,like,% $request->input('username')%);
      }
          
       $users = $query->paginate(10)
       return response()->json($users);
      }
      catch(/Exception $e){
      return response()->json(['error'=>'error'],500);
      }
}


userList.file

<template>
<div>
<input v-model=""filter"" @input=""fetchUsers"">
<ul>
<li v-for=""u in users"">{{user.username}}</li>
</ul>
<pagination :data=""users"" @pagination-change-page=""fetchUsers""></pagination>
</div>
</template>
<script>
export default{
data(){
users:[],
filter:''
}
mounted(){
this.fetchUsers();
},
method:{
fetchUsers(page = 1){
axios.get('/api/users?page=${page}&username=${this.filer}')
.then(res=>{
this.users = res.data.data
})
.catch(e=>{
console.log('Error')
})
}
}
}  
</script>","You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering."
source_code_032,gpt-4-turbo_01,0.6,"{'ic_id': {0: 365}, 'ica_id': {0: 3720}, 'question': {0: 'You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering.'}, 'rules': {0: ['Create REST API endpoint using Laravel', 'Use Vue.js for the frontend component', 'Implement pagination and filtering on both backend and frontend', 'Ensure proper exception handling']}, 'examples': {0: ""Input: GET /api/users?page=2&username=doe\nOutput: JSON response with users having 'doe' in their username on the second page of results.""}, 'programming_language': {0: 'PHP & JavaScript'}, 'response_time': {0: 1373}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","// Laravel - UserController.php

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function getUsers(Request $request)
    {
        $perPage = 10; // Number of users per page

        $users = User::query();

        if ($request->has('username')) {
            $users->where('username', 'like', '%'.$request->username.'%');
        }

        $users = $users->paginate($perPage);

        return response()->json($users);
    }
}
","api file
Route::get('/users',UserController@index)

UserController.php


Public function index(Request $request){
try{
            $query = User::query();
           if($request->has('username')){
          $query->where(usersname,like,% $request->input('username')%);
      }
          
       $users = $query->paginate(10)
       return response()->json($users);
      }
      catch(/Exception $e){
      return response()->json(['error'=>'error'],500);
      }
}


userList.file

<template>
<div>
<input v-model=""filter"" @input=""fetchUsers"">
<ul>
<li v-for=""u in users"">{{user.username}}</li>
</ul>
<pagination :data=""users"" @pagination-change-page=""fetchUsers""></pagination>
</div>
</template>
<script>
export default{
data(){
users:[],
filter:''
}
mounted(){
this.fetchUsers();
},
method:{
fetchUsers(page = 1){
axios.get('/api/users?page=${page}&username=${this.filer}')
.then(res=>{
this.users = res.data.data
})
.catch(e=>{
console.log('Error')
})
}
}
}  
</script>","You are tasked with creating a feature in a Laravel application that fetches and displays a paginated list of users. Implement a REST API endpoint to retrieve paginated user data with the ability to filter by username. Utilize Eloquent ORM for fetching the data, and handle any potential exceptions that might occur during the process. Additionally, create a Vue.js component that utilizes this endpoint to display the user data, with UI elements for pagination and filtering."
source_code_033,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 389}, 'ica_id': {0: 3743}, 'question': {0: 'Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long.'}, 'rules': {0: ['Assume standard CSS color names are used.', 'All HEX codes are 6 characters long.', 'Calculate luminance based on the standard RGB luminance formula.']}, 'examples': {0: ""Input: ['black', '#FF0000', 'blue'] Output: ['black', 'blue', '#FF0000']""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 54}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function getColorLuminance(color) {
  let rgbColor = typeof color === 'string' ? hexToRgb(color) : color;
  return 0.2126 * rgbColor.r + 0.7152 * rgbColor.g + 0.0722 * rgbColor.b;
}

function hexToRgb(hex) {
  let r = parseInt(hex.substr(1, 2), 16);
  let g = parseInt(hex.substr(3, 2), 16);
  let b = parseInt(hex.substr(5, 2), 16);
  return { r, g, b };
}

function sortColorsByLuminance(colors) {
  return colors.sort((color1, color2) => getColorLuminance(color1) - getColorLuminance(color2));
}

const inputColors = ['black', '#FF0000', 'blue'];
const sortedColors = sortColorsByLuminance(inputColors);
console.log(sortedColors);
","/cdchy
 hescbh
 dhcbjh
dhbdj
/dbh
/dd","Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long."
source_code_033,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 389}, 'ica_id': {0: 3743}, 'question': {0: 'Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long.'}, 'rules': {0: ['Assume standard CSS color names are used.', 'All HEX codes are 6 characters long.', 'Calculate luminance based on the standard RGB luminance formula.']}, 'examples': {0: ""Input: ['black', '#FF0000', 'blue'] Output: ['black', 'blue', '#FF0000']""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 54}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function getColorLuminance(color) {
  let rgbColor = typeof color === 'string' ? hexToRgb(color) : color;
  return 0.2126 * rgbColor.r + 0.7152 * rgbColor.g + 0.0722 * rgbColor.b;
}

function hexToRgb(hex) {
  let r = parseInt(hex.substr(1, 2), 16);
  let g = parseInt(hex.substr(3, 2), 16);
  let b = parseInt(hex.substr(5, 2), 16);
  return { r, g, b };
}

function sortColorsByLuminance(colors) {
  return colors.sort((color1, color2) => getColorLuminance(color1) - getColorLuminance(color2));
}

const inputColors = ['black', '#FF0000', 'blue'];
const sortedColors = sortColorsByLuminance(inputColors);
console.log(sortedColors);
","/cdchy
 hescbh
 dhcbjh
dhbdj
/dbh
/dd","Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long."
source_code_033,gpt-4_00,0.0,"{'ic_id': {0: 389}, 'ica_id': {0: 3743}, 'question': {0: 'Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long.'}, 'rules': {0: ['Assume standard CSS color names are used.', 'All HEX codes are 6 characters long.', 'Calculate luminance based on the standard RGB luminance formula.']}, 'examples': {0: ""Input: ['black', '#FF0000', 'blue'] Output: ['black', 'blue', '#FF0000']""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 54}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function getColorLuminance(color) {
  let rgbColor = typeof color === 'string' ? hexToRgb(color) : color;
  return 0.2126 * rgbColor.r + 0.7152 * rgbColor.g + 0.0722 * rgbColor.b;
}

function hexToRgb(hex) {
  let r = parseInt(hex.substr(1, 2), 16);
  let g = parseInt(hex.substr(3, 2), 16);
  let b = parseInt(hex.substr(5, 2), 16);
  return { r, g, b };
}

function sortColorsByLuminance(colors) {
  return colors.sort((color1, color2) => getColorLuminance(color1) - getColorLuminance(color2));
}

const inputColors = ['black', '#FF0000', 'blue'];
const sortedColors = sortColorsByLuminance(inputColors);
console.log(sortedColors);
","/cdchy
 hescbh
 dhcbjh
dhbdj
/dbh
/dd","Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long."
source_code_033,gpt-4_01,0.0,"{'ic_id': {0: 389}, 'ica_id': {0: 3743}, 'question': {0: 'Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long.'}, 'rules': {0: ['Assume standard CSS color names are used.', 'All HEX codes are 6 characters long.', 'Calculate luminance based on the standard RGB luminance formula.']}, 'examples': {0: ""Input: ['black', '#FF0000', 'blue'] Output: ['black', 'blue', '#FF0000']""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 54}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function getColorLuminance(color) {
  let rgbColor = typeof color === 'string' ? hexToRgb(color) : color;
  return 0.2126 * rgbColor.r + 0.7152 * rgbColor.g + 0.0722 * rgbColor.b;
}

function hexToRgb(hex) {
  let r = parseInt(hex.substr(1, 2), 16);
  let g = parseInt(hex.substr(3, 2), 16);
  let b = parseInt(hex.substr(5, 2), 16);
  return { r, g, b };
}

function sortColorsByLuminance(colors) {
  return colors.sort((color1, color2) => getColorLuminance(color1) - getColorLuminance(color2));
}

const inputColors = ['black', '#FF0000', 'blue'];
const sortedColors = sortColorsByLuminance(inputColors);
console.log(sortedColors);
","/cdchy
 hescbh
 dhcbjh
dhbdj
/dbh
/dd","Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long."
source_code_033,gpt-4-turbo_00,0.0,"{'ic_id': {0: 389}, 'ica_id': {0: 3743}, 'question': {0: 'Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long.'}, 'rules': {0: ['Assume standard CSS color names are used.', 'All HEX codes are 6 characters long.', 'Calculate luminance based on the standard RGB luminance formula.']}, 'examples': {0: ""Input: ['black', '#FF0000', 'blue'] Output: ['black', 'blue', '#FF0000']""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 54}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function getColorLuminance(color) {
  let rgbColor = typeof color === 'string' ? hexToRgb(color) : color;
  return 0.2126 * rgbColor.r + 0.7152 * rgbColor.g + 0.0722 * rgbColor.b;
}

function hexToRgb(hex) {
  let r = parseInt(hex.substr(1, 2), 16);
  let g = parseInt(hex.substr(3, 2), 16);
  let b = parseInt(hex.substr(5, 2), 16);
  return { r, g, b };
}

function sortColorsByLuminance(colors) {
  return colors.sort((color1, color2) => getColorLuminance(color1) - getColorLuminance(color2));
}

const inputColors = ['black', '#FF0000', 'blue'];
const sortedColors = sortColorsByLuminance(inputColors);
console.log(sortedColors);
","/cdchy
 hescbh
 dhcbjh
dhbdj
/dbh
/dd","Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long."
source_code_033,gpt-4-turbo_01,0.0,"{'ic_id': {0: 389}, 'ica_id': {0: 3743}, 'question': {0: 'Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long.'}, 'rules': {0: ['Assume standard CSS color names are used.', 'All HEX codes are 6 characters long.', 'Calculate luminance based on the standard RGB luminance formula.']}, 'examples': {0: ""Input: ['black', '#FF0000', 'blue'] Output: ['black', 'blue', '#FF0000']""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 54}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 100.0}}","function getColorLuminance(color) {
  let rgbColor = typeof color === 'string' ? hexToRgb(color) : color;
  return 0.2126 * rgbColor.r + 0.7152 * rgbColor.g + 0.0722 * rgbColor.b;
}

function hexToRgb(hex) {
  let r = parseInt(hex.substr(1, 2), 16);
  let g = parseInt(hex.substr(3, 2), 16);
  let b = parseInt(hex.substr(5, 2), 16);
  return { r, g, b };
}

function sortColorsByLuminance(colors) {
  return colors.sort((color1, color2) => getColorLuminance(color1) - getColorLuminance(color2));
}

const inputColors = ['black', '#FF0000', 'blue'];
const sortedColors = sortColorsByLuminance(inputColors);
console.log(sortedColors);
","/cdchy
 hescbh
 dhcbjh
dhbdj
/dbh
/dd","Create a JavaScript function that takes an array of HTML color names or HEX codes and returns a sorted array by the luminance of the colors from darkest to lightest. Use the standard RGB luminance formula and assume that all HEX codes will be in full form, i.e., 6 characters long."
source_code_034,gpt-3.5-turbo_00,0.4,"{'ic_id': {0: 390}, 'ica_id': {0: 3746}, 'question': {0: ""Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling.""}, 'rules': {0: ['The animation must be infinite and smooth.', 'No JavaScript allowed, strictly CSS.', 'Adaptable to different website themes.']}, 'examples': {0: 'CSS Code: animation-name: spin; animation-duration: 4s; animation-iteration-count: infinite; -> Visual: A spinning element.'}, 'programming_language': {0: 'HTML/CSS'}, 'response_time': {0: 40}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Loading Indicator</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0; /* Adaptable background color */
        }

        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid #333; /* Adaptable border color */
            border-top-color: transparent;
            border-radius: 50%; /* Ensures a circular shape */
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>
","<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Loading Animation</title>
<style>
    .loader {
        border: 5px solid #f3f3f3; /* Light grey */
        border-top: 5px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin: 20% auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>","Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling."
source_code_034,gpt-3.5-turbo_01,0.7,"{'ic_id': {0: 390}, 'ica_id': {0: 3746}, 'question': {0: ""Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling.""}, 'rules': {0: ['The animation must be infinite and smooth.', 'No JavaScript allowed, strictly CSS.', 'Adaptable to different website themes.']}, 'examples': {0: 'CSS Code: animation-name: spin; animation-duration: 4s; animation-iteration-count: infinite; -> Visual: A spinning element.'}, 'programming_language': {0: 'HTML/CSS'}, 'response_time': {0: 40}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Loading Indicator</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0; /* Adaptable background color */
        }

        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid #333; /* Adaptable border color */
            border-top-color: transparent;
            border-radius: 50%; /* Ensures a circular shape */
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>
","<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Loading Animation</title>
<style>
    .loader {
        border: 5px solid #f3f3f3; /* Light grey */
        border-top: 5px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin: 20% auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>","Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling."
source_code_034,gpt-4_00,0.0,"{'ic_id': {0: 390}, 'ica_id': {0: 3746}, 'question': {0: ""Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling.""}, 'rules': {0: ['The animation must be infinite and smooth.', 'No JavaScript allowed, strictly CSS.', 'Adaptable to different website themes.']}, 'examples': {0: 'CSS Code: animation-name: spin; animation-duration: 4s; animation-iteration-count: infinite; -> Visual: A spinning element.'}, 'programming_language': {0: 'HTML/CSS'}, 'response_time': {0: 40}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Loading Indicator</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0; /* Adaptable background color */
        }

        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid #333; /* Adaptable border color */
            border-top-color: transparent;
            border-radius: 50%; /* Ensures a circular shape */
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>
","<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Loading Animation</title>
<style>
    .loader {
        border: 5px solid #f3f3f3; /* Light grey */
        border-top: 5px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin: 20% auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>","Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling."
source_code_034,gpt-4_01,0.0,"{'ic_id': {0: 390}, 'ica_id': {0: 3746}, 'question': {0: ""Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling.""}, 'rules': {0: ['The animation must be infinite and smooth.', 'No JavaScript allowed, strictly CSS.', 'Adaptable to different website themes.']}, 'examples': {0: 'CSS Code: animation-name: spin; animation-duration: 4s; animation-iteration-count: infinite; -> Visual: A spinning element.'}, 'programming_language': {0: 'HTML/CSS'}, 'response_time': {0: 40}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Loading Indicator</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0; /* Adaptable background color */
        }

        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid #333; /* Adaptable border color */
            border-top-color: transparent;
            border-radius: 50%; /* Ensures a circular shape */
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>
","<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Loading Animation</title>
<style>
    .loader {
        border: 5px solid #f3f3f3; /* Light grey */
        border-top: 5px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin: 20% auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>","Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling."
source_code_034,gpt-4-turbo_00,0.2,"{'ic_id': {0: 390}, 'ica_id': {0: 3746}, 'question': {0: ""Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling.""}, 'rules': {0: ['The animation must be infinite and smooth.', 'No JavaScript allowed, strictly CSS.', 'Adaptable to different website themes.']}, 'examples': {0: 'CSS Code: animation-name: spin; animation-duration: 4s; animation-iteration-count: infinite; -> Visual: A spinning element.'}, 'programming_language': {0: 'HTML/CSS'}, 'response_time': {0: 40}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Loading Indicator</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0; /* Adaptable background color */
        }

        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid #333; /* Adaptable border color */
            border-top-color: transparent;
            border-radius: 50%; /* Ensures a circular shape */
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>
","<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Loading Animation</title>
<style>
    .loader {
        border: 5px solid #f3f3f3; /* Light grey */
        border-top: 5px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin: 20% auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>","Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling."
source_code_034,gpt-4-turbo_01,0.2,"{'ic_id': {0: 390}, 'ica_id': {0: 3746}, 'question': {0: ""Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling.""}, 'rules': {0: ['The animation must be infinite and smooth.', 'No JavaScript allowed, strictly CSS.', 'Adaptable to different website themes.']}, 'examples': {0: 'CSS Code: animation-name: spin; animation-duration: 4s; animation-iteration-count: infinite; -> Visual: A spinning element.'}, 'programming_language': {0: 'HTML/CSS'}, 'response_time': {0: 40}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 100.0}}","<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Loading Indicator</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0; /* Adaptable background color */
        }

        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid #333; /* Adaptable border color */
            border-top-color: transparent;
            border-radius: 50%; /* Ensures a circular shape */
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>
","<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Loading Animation</title>
<style>
    .loader {
        border: 5px solid #f3f3f3; /* Light grey */
        border-top: 5px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        margin: 20% auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
</head>
<body>
    <div class=""loader""></div>
</body>
</html>","Create a pure CSS animation for a 'loading...' indicator without using any JavaScript or pre-built loading libraries. The animation should run infinitely and be adaptable for different website themes. Use your understanding of CSS keyframes, animation properties, and styling."
source_code_035,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 386}, 'ica_id': {0: 3809}, 'question': {0: ""Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types.""}, 'rules': {0: ['Use functional components and React hooks', 'Provide visual feedback for different strength levels']}, 'examples': {0: ""Input: 'P@ssw0rd!'\nOutput: 'Strong' // Visual indicator shows 'Strong'\n\nInput: 'pass'\nOutput: 'Weak' // Visual indicator shows 'Weak'""}, 'programming_language': {0: 'JavaScript-React'}, 'response_time': {0: 424}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","import React, { useState } from 'react';

const PasswordStrengthMeter = () => {
    const [password, setPassword] = useState('');

    const calculateStrength = (password) => {
        if (password.length < 6) {
            return 'Weak';
        } else if (password.length < 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Medium';
        } else if (password.length >= 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Strong';
        } else {
            return 'Weak';
        }
    };

    const handlePasswordChange = (e) => {
        const newPassword = e.target.value;
        setPassword(newPassword);
    };

    return (
        <div>
            <input
                type=""password""
                value={password}
                onChange={handlePasswordChange}
            />
            <p>Password Strength: {calculateStrength(password)}</p>
            <div style={{ backgroundColor: calculateStrength(password) === 'Weak' ? 'red' : calculateStrength(password) === 'Medium' ? 'orange' : 'green', height: '10px', marginTop: '5px' }}></div>
        </div>
    );
};

export default PasswordStrengthMeter;
","import React, { useState } from 'react';
import ""./style.css"";

const PwdStrengthMeter = () => {
  const [pwd, setPwd] = useState('');
  const [strength, setStrength] = useState('');

  const evaluateStrength = (p) => {
    const len = p.length;
    const hasNum = /\d/.test(p);
    const hasSpecial = /[!@#$%^&*(),.?"":{}|<>]/g.test(p);
    const hasMixed = /[a-z]/.test(p) && /[A-Z]/.test(p);

    if (len > 8 && hasNum && hasSpecial && hasMixed) return 'Strong';
    if (len >= 6 && (hasNum || hasSpecial) && hasMixed) return 'Medium';
    return 'Weak';
  };

  const handleChange = (e) => {
    const { value } = e.target;
    setPwd(value);
    setStrength(evaluateStrength(value));
  };

  return (
    <div>
      <input type=""password"" value={pwd} onChange={handleChange} />
      <div>Strength: {strength}</div>
    </div>
  );
};

export default PwdStrengthMeter;","Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types."
source_code_035,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 386}, 'ica_id': {0: 3809}, 'question': {0: ""Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types.""}, 'rules': {0: ['Use functional components and React hooks', 'Provide visual feedback for different strength levels']}, 'examples': {0: ""Input: 'P@ssw0rd!'\nOutput: 'Strong' // Visual indicator shows 'Strong'\n\nInput: 'pass'\nOutput: 'Weak' // Visual indicator shows 'Weak'""}, 'programming_language': {0: 'JavaScript-React'}, 'response_time': {0: 424}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","import React, { useState } from 'react';

const PasswordStrengthMeter = () => {
    const [password, setPassword] = useState('');

    const calculateStrength = (password) => {
        if (password.length < 6) {
            return 'Weak';
        } else if (password.length < 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Medium';
        } else if (password.length >= 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Strong';
        } else {
            return 'Weak';
        }
    };

    const handlePasswordChange = (e) => {
        const newPassword = e.target.value;
        setPassword(newPassword);
    };

    return (
        <div>
            <input
                type=""password""
                value={password}
                onChange={handlePasswordChange}
            />
            <p>Password Strength: {calculateStrength(password)}</p>
            <div style={{ backgroundColor: calculateStrength(password) === 'Weak' ? 'red' : calculateStrength(password) === 'Medium' ? 'orange' : 'green', height: '10px', marginTop: '5px' }}></div>
        </div>
    );
};

export default PasswordStrengthMeter;
","import React, { useState } from 'react';
import ""./style.css"";

const PwdStrengthMeter = () => {
  const [pwd, setPwd] = useState('');
  const [strength, setStrength] = useState('');

  const evaluateStrength = (p) => {
    const len = p.length;
    const hasNum = /\d/.test(p);
    const hasSpecial = /[!@#$%^&*(),.?"":{}|<>]/g.test(p);
    const hasMixed = /[a-z]/.test(p) && /[A-Z]/.test(p);

    if (len > 8 && hasNum && hasSpecial && hasMixed) return 'Strong';
    if (len >= 6 && (hasNum || hasSpecial) && hasMixed) return 'Medium';
    return 'Weak';
  };

  const handleChange = (e) => {
    const { value } = e.target;
    setPwd(value);
    setStrength(evaluateStrength(value));
  };

  return (
    <div>
      <input type=""password"" value={pwd} onChange={handleChange} />
      <div>Strength: {strength}</div>
    </div>
  );
};

export default PwdStrengthMeter;","Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types."
source_code_035,gpt-4_00,0.2,"{'ic_id': {0: 386}, 'ica_id': {0: 3809}, 'question': {0: ""Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types.""}, 'rules': {0: ['Use functional components and React hooks', 'Provide visual feedback for different strength levels']}, 'examples': {0: ""Input: 'P@ssw0rd!'\nOutput: 'Strong' // Visual indicator shows 'Strong'\n\nInput: 'pass'\nOutput: 'Weak' // Visual indicator shows 'Weak'""}, 'programming_language': {0: 'JavaScript-React'}, 'response_time': {0: 424}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","import React, { useState } from 'react';

const PasswordStrengthMeter = () => {
    const [password, setPassword] = useState('');

    const calculateStrength = (password) => {
        if (password.length < 6) {
            return 'Weak';
        } else if (password.length < 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Medium';
        } else if (password.length >= 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Strong';
        } else {
            return 'Weak';
        }
    };

    const handlePasswordChange = (e) => {
        const newPassword = e.target.value;
        setPassword(newPassword);
    };

    return (
        <div>
            <input
                type=""password""
                value={password}
                onChange={handlePasswordChange}
            />
            <p>Password Strength: {calculateStrength(password)}</p>
            <div style={{ backgroundColor: calculateStrength(password) === 'Weak' ? 'red' : calculateStrength(password) === 'Medium' ? 'orange' : 'green', height: '10px', marginTop: '5px' }}></div>
        </div>
    );
};

export default PasswordStrengthMeter;
","import React, { useState } from 'react';
import ""./style.css"";

const PwdStrengthMeter = () => {
  const [pwd, setPwd] = useState('');
  const [strength, setStrength] = useState('');

  const evaluateStrength = (p) => {
    const len = p.length;
    const hasNum = /\d/.test(p);
    const hasSpecial = /[!@#$%^&*(),.?"":{}|<>]/g.test(p);
    const hasMixed = /[a-z]/.test(p) && /[A-Z]/.test(p);

    if (len > 8 && hasNum && hasSpecial && hasMixed) return 'Strong';
    if (len >= 6 && (hasNum || hasSpecial) && hasMixed) return 'Medium';
    return 'Weak';
  };

  const handleChange = (e) => {
    const { value } = e.target;
    setPwd(value);
    setStrength(evaluateStrength(value));
  };

  return (
    <div>
      <input type=""password"" value={pwd} onChange={handleChange} />
      <div>Strength: {strength}</div>
    </div>
  );
};

export default PwdStrengthMeter;","Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types."
source_code_035,gpt-4_01,0.2,"{'ic_id': {0: 386}, 'ica_id': {0: 3809}, 'question': {0: ""Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types.""}, 'rules': {0: ['Use functional components and React hooks', 'Provide visual feedback for different strength levels']}, 'examples': {0: ""Input: 'P@ssw0rd!'\nOutput: 'Strong' // Visual indicator shows 'Strong'\n\nInput: 'pass'\nOutput: 'Weak' // Visual indicator shows 'Weak'""}, 'programming_language': {0: 'JavaScript-React'}, 'response_time': {0: 424}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","import React, { useState } from 'react';

const PasswordStrengthMeter = () => {
    const [password, setPassword] = useState('');

    const calculateStrength = (password) => {
        if (password.length < 6) {
            return 'Weak';
        } else if (password.length < 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Medium';
        } else if (password.length >= 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Strong';
        } else {
            return 'Weak';
        }
    };

    const handlePasswordChange = (e) => {
        const newPassword = e.target.value;
        setPassword(newPassword);
    };

    return (
        <div>
            <input
                type=""password""
                value={password}
                onChange={handlePasswordChange}
            />
            <p>Password Strength: {calculateStrength(password)}</p>
            <div style={{ backgroundColor: calculateStrength(password) === 'Weak' ? 'red' : calculateStrength(password) === 'Medium' ? 'orange' : 'green', height: '10px', marginTop: '5px' }}></div>
        </div>
    );
};

export default PasswordStrengthMeter;
","import React, { useState } from 'react';
import ""./style.css"";

const PwdStrengthMeter = () => {
  const [pwd, setPwd] = useState('');
  const [strength, setStrength] = useState('');

  const evaluateStrength = (p) => {
    const len = p.length;
    const hasNum = /\d/.test(p);
    const hasSpecial = /[!@#$%^&*(),.?"":{}|<>]/g.test(p);
    const hasMixed = /[a-z]/.test(p) && /[A-Z]/.test(p);

    if (len > 8 && hasNum && hasSpecial && hasMixed) return 'Strong';
    if (len >= 6 && (hasNum || hasSpecial) && hasMixed) return 'Medium';
    return 'Weak';
  };

  const handleChange = (e) => {
    const { value } = e.target;
    setPwd(value);
    setStrength(evaluateStrength(value));
  };

  return (
    <div>
      <input type=""password"" value={pwd} onChange={handleChange} />
      <div>Strength: {strength}</div>
    </div>
  );
};

export default PwdStrengthMeter;","Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types."
source_code_035,gpt-4-turbo_00,0.4,"{'ic_id': {0: 386}, 'ica_id': {0: 3809}, 'question': {0: ""Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types.""}, 'rules': {0: ['Use functional components and React hooks', 'Provide visual feedback for different strength levels']}, 'examples': {0: ""Input: 'P@ssw0rd!'\nOutput: 'Strong' // Visual indicator shows 'Strong'\n\nInput: 'pass'\nOutput: 'Weak' // Visual indicator shows 'Weak'""}, 'programming_language': {0: 'JavaScript-React'}, 'response_time': {0: 424}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","import React, { useState } from 'react';

const PasswordStrengthMeter = () => {
    const [password, setPassword] = useState('');

    const calculateStrength = (password) => {
        if (password.length < 6) {
            return 'Weak';
        } else if (password.length < 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Medium';
        } else if (password.length >= 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Strong';
        } else {
            return 'Weak';
        }
    };

    const handlePasswordChange = (e) => {
        const newPassword = e.target.value;
        setPassword(newPassword);
    };

    return (
        <div>
            <input
                type=""password""
                value={password}
                onChange={handlePasswordChange}
            />
            <p>Password Strength: {calculateStrength(password)}</p>
            <div style={{ backgroundColor: calculateStrength(password) === 'Weak' ? 'red' : calculateStrength(password) === 'Medium' ? 'orange' : 'green', height: '10px', marginTop: '5px' }}></div>
        </div>
    );
};

export default PasswordStrengthMeter;
","import React, { useState } from 'react';
import ""./style.css"";

const PwdStrengthMeter = () => {
  const [pwd, setPwd] = useState('');
  const [strength, setStrength] = useState('');

  const evaluateStrength = (p) => {
    const len = p.length;
    const hasNum = /\d/.test(p);
    const hasSpecial = /[!@#$%^&*(),.?"":{}|<>]/g.test(p);
    const hasMixed = /[a-z]/.test(p) && /[A-Z]/.test(p);

    if (len > 8 && hasNum && hasSpecial && hasMixed) return 'Strong';
    if (len >= 6 && (hasNum || hasSpecial) && hasMixed) return 'Medium';
    return 'Weak';
  };

  const handleChange = (e) => {
    const { value } = e.target;
    setPwd(value);
    setStrength(evaluateStrength(value));
  };

  return (
    <div>
      <input type=""password"" value={pwd} onChange={handleChange} />
      <div>Strength: {strength}</div>
    </div>
  );
};

export default PwdStrengthMeter;","Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types."
source_code_035,gpt-4-turbo_01,0.1,"{'ic_id': {0: 386}, 'ica_id': {0: 3809}, 'question': {0: ""Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types.""}, 'rules': {0: ['Use functional components and React hooks', 'Provide visual feedback for different strength levels']}, 'examples': {0: ""Input: 'P@ssw0rd!'\nOutput: 'Strong' // Visual indicator shows 'Strong'\n\nInput: 'pass'\nOutput: 'Weak' // Visual indicator shows 'Weak'""}, 'programming_language': {0: 'JavaScript-React'}, 'response_time': {0: 424}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","import React, { useState } from 'react';

const PasswordStrengthMeter = () => {
    const [password, setPassword] = useState('');

    const calculateStrength = (password) => {
        if (password.length < 6) {
            return 'Weak';
        } else if (password.length < 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Medium';
        } else if (password.length >= 10 && /\d/.test(password) && /[a-zA-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
            return 'Strong';
        } else {
            return 'Weak';
        }
    };

    const handlePasswordChange = (e) => {
        const newPassword = e.target.value;
        setPassword(newPassword);
    };

    return (
        <div>
            <input
                type=""password""
                value={password}
                onChange={handlePasswordChange}
            />
            <p>Password Strength: {calculateStrength(password)}</p>
            <div style={{ backgroundColor: calculateStrength(password) === 'Weak' ? 'red' : calculateStrength(password) === 'Medium' ? 'orange' : 'green', height: '10px', marginTop: '5px' }}></div>
        </div>
    );
};

export default PasswordStrengthMeter;
","import React, { useState } from 'react';
import ""./style.css"";

const PwdStrengthMeter = () => {
  const [pwd, setPwd] = useState('');
  const [strength, setStrength] = useState('');

  const evaluateStrength = (p) => {
    const len = p.length;
    const hasNum = /\d/.test(p);
    const hasSpecial = /[!@#$%^&*(),.?"":{}|<>]/g.test(p);
    const hasMixed = /[a-z]/.test(p) && /[A-Z]/.test(p);

    if (len > 8 && hasNum && hasSpecial && hasMixed) return 'Strong';
    if (len >= 6 && (hasNum || hasSpecial) && hasMixed) return 'Medium';
    return 'Weak';
  };

  const handleChange = (e) => {
    const { value } = e.target;
    setPwd(value);
    setStrength(evaluateStrength(value));
  };

  return (
    <div>
      <input type=""password"" value={pwd} onChange={handleChange} />
      <div>Strength: {strength}</div>
    </div>
  );
};

export default PwdStrengthMeter;","Create a React component that renders a password strength meter. The component should take a string input and display a visual representation of the password's strength (weak, medium, strong), based on rules such as length, the inclusion of numbers and special characters, etc. The state should update dynamically as the user types."
source_code_036,gpt-3.5-turbo_00,0.8,"{'ic_id': {0: 393}, 'ica_id': {0: 3828}, 'question': {0: 'You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops.'}, 'rules': {0: ['Use Laravel collections', 'No loops allowed', 'The solution should be chainable']}, 'examples': {0: 'Input: collect([2, 10, 3, 4, 15, 20])\nOutput: 306.66666666667 (as 10^2, 15^2, and 20^2 are 100, 225, and 400 respectively; their average is 306.67)'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 136}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","use Illuminate\Support\Collection;

// Define the custom collection pipeline
Collection::macro('customPipeline', function () {
    return $this
        ->filter(function ($value) {
            return $value >= 10;
        })
        ->map(function ($value) {
            return $value ** 2;
        })
        ->average();
});

// Input data
$input = collect([2, 10, 3, 4, 15, 20]);

// Applying the custom pipeline and calculating the average
$result = $input->customPipeline();

echo $result;
","$input->filter(function ($number) 
        return $number >= 10;
    })
    ->map(function ($number) {
        return $number ** 2;
    })
    ->average();","You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops."
source_code_036,gpt-3.5-turbo_01,0.7,"{'ic_id': {0: 393}, 'ica_id': {0: 3828}, 'question': {0: 'You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops.'}, 'rules': {0: ['Use Laravel collections', 'No loops allowed', 'The solution should be chainable']}, 'examples': {0: 'Input: collect([2, 10, 3, 4, 15, 20])\nOutput: 306.66666666667 (as 10^2, 15^2, and 20^2 are 100, 225, and 400 respectively; their average is 306.67)'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 136}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","use Illuminate\Support\Collection;

// Define the custom collection pipeline
Collection::macro('customPipeline', function () {
    return $this
        ->filter(function ($value) {
            return $value >= 10;
        })
        ->map(function ($value) {
            return $value ** 2;
        })
        ->average();
});

// Input data
$input = collect([2, 10, 3, 4, 15, 20]);

// Applying the custom pipeline and calculating the average
$result = $input->customPipeline();

echo $result;
","$input->filter(function ($number) 
        return $number >= 10;
    })
    ->map(function ($number) {
        return $number ** 2;
    })
    ->average();","You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops."
source_code_036,gpt-4_00,0.7,"{'ic_id': {0: 393}, 'ica_id': {0: 3828}, 'question': {0: 'You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops.'}, 'rules': {0: ['Use Laravel collections', 'No loops allowed', 'The solution should be chainable']}, 'examples': {0: 'Input: collect([2, 10, 3, 4, 15, 20])\nOutput: 306.66666666667 (as 10^2, 15^2, and 20^2 are 100, 225, and 400 respectively; their average is 306.67)'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 136}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","use Illuminate\Support\Collection;

// Define the custom collection pipeline
Collection::macro('customPipeline', function () {
    return $this
        ->filter(function ($value) {
            return $value >= 10;
        })
        ->map(function ($value) {
            return $value ** 2;
        })
        ->average();
});

// Input data
$input = collect([2, 10, 3, 4, 15, 20]);

// Applying the custom pipeline and calculating the average
$result = $input->customPipeline();

echo $result;
","$input->filter(function ($number) 
        return $number >= 10;
    })
    ->map(function ($number) {
        return $number ** 2;
    })
    ->average();","You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops."
source_code_036,gpt-4_01,0.7,"{'ic_id': {0: 393}, 'ica_id': {0: 3828}, 'question': {0: 'You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops.'}, 'rules': {0: ['Use Laravel collections', 'No loops allowed', 'The solution should be chainable']}, 'examples': {0: 'Input: collect([2, 10, 3, 4, 15, 20])\nOutput: 306.66666666667 (as 10^2, 15^2, and 20^2 are 100, 225, and 400 respectively; their average is 306.67)'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 136}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","use Illuminate\Support\Collection;

// Define the custom collection pipeline
Collection::macro('customPipeline', function () {
    return $this
        ->filter(function ($value) {
            return $value >= 10;
        })
        ->map(function ($value) {
            return $value ** 2;
        })
        ->average();
});

// Input data
$input = collect([2, 10, 3, 4, 15, 20]);

// Applying the custom pipeline and calculating the average
$result = $input->customPipeline();

echo $result;
","$input->filter(function ($number) 
        return $number >= 10;
    })
    ->map(function ($number) {
        return $number ** 2;
    })
    ->average();","You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops."
source_code_036,gpt-4-turbo_00,0.7,"{'ic_id': {0: 393}, 'ica_id': {0: 3828}, 'question': {0: 'You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops.'}, 'rules': {0: ['Use Laravel collections', 'No loops allowed', 'The solution should be chainable']}, 'examples': {0: 'Input: collect([2, 10, 3, 4, 15, 20])\nOutput: 306.66666666667 (as 10^2, 15^2, and 20^2 are 100, 225, and 400 respectively; their average is 306.67)'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 136}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","use Illuminate\Support\Collection;

// Define the custom collection pipeline
Collection::macro('customPipeline', function () {
    return $this
        ->filter(function ($value) {
            return $value >= 10;
        })
        ->map(function ($value) {
            return $value ** 2;
        })
        ->average();
});

// Input data
$input = collect([2, 10, 3, 4, 15, 20]);

// Applying the custom pipeline and calculating the average
$result = $input->customPipeline();

echo $result;
","$input->filter(function ($number) 
        return $number >= 10;
    })
    ->map(function ($number) {
        return $number ** 2;
    })
    ->average();","You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops."
source_code_036,gpt-4-turbo_01,0.8,"{'ic_id': {0: 393}, 'ica_id': {0: 3828}, 'question': {0: 'You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops.'}, 'rules': {0: ['Use Laravel collections', 'No loops allowed', 'The solution should be chainable']}, 'examples': {0: 'Input: collect([2, 10, 3, 4, 15, 20])\nOutput: 306.66666666667 (as 10^2, 15^2, and 20^2 are 100, 225, and 400 respectively; their average is 306.67)'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 136}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 200.0}, 'total_weight': {0: 200.0}}","use Illuminate\Support\Collection;

// Define the custom collection pipeline
Collection::macro('customPipeline', function () {
    return $this
        ->filter(function ($value) {
            return $value >= 10;
        })
        ->map(function ($value) {
            return $value ** 2;
        })
        ->average();
});

// Input data
$input = collect([2, 10, 3, 4, 15, 20]);

// Applying the custom pipeline and calculating the average
$result = $input->customPipeline();

echo $result;
","$input->filter(function ($number) 
        return $number >= 10;
    })
    ->map(function ($number) {
        return $number ** 2;
    })
    ->average();","You have been tasked with building a custom collection pipeline in Laravel that performs a series of operations on a collection of numerical data. You need to create a chainable pipeline that applies the following operations in order: filter out numbers less than 10, then calculate the square of remaining numbers, and finally compute the average of the squared numbers. Use Laravel collections and their built-in methods to accomplish this, avoiding any loops."
source_code_037,gpt-3.5-turbo_00,0.3,"{'ic_id': {0: 409}, 'ica_id': {0: 3970}, 'question': {0: 'Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.'}, 'rules': {0: ['The script must be executable in a Node.js environment.', 'Do not use any external npm packages for the solution.']}, 'examples': {0: ""Input: 'abrkaabcdefghijjxxx' Output: { substring: 'abcdefghij', length: 10 }""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function findLongestSubstring(input) {
    let longestSubstring = '';
    let currentSubstring = '';
    let seenChars = new Set();
  
    for (let char of input) {
        if (!seenChars.has(char)) {
            currentSubstring += char;
            seenChars.add(char);
            if (currentSubstring.length > longestSubstring.length) {
                longestSubstring = currentSubstring;
            }
        } else {
            let index = currentSubstring.indexOf(char);
            currentSubstring = currentSubstring.slice(index + 1) + char;
            seenChars = new Set(currentSubstring);
        }
    }
  
    return { substring: longestSubstring, length: longestSubstring.length };
}
  
const input = 'abrkaabcdefghijjxxx';
const result = findLongestSubstring(input);
console.log(result);
","function findLongestSubscript(str) {
  let longest = '';
  for (let index = 0; i< str.longest; i++) {
    for (let j = i; i + i=j <= str.length; j++) {
      let substr = str.slice(i,j);
      if (substr.length > longest.longth && str.indexOf(substr)==i) 
      { 
        longest = substr;
      }
      
    }
    
  }
   return longest;
}

const inputScript = process.argv[2];
const longestSubstring(inputScript);
findLongestSubscript(im)",Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.
source_code_037,gpt-3.5-turbo_01,0.3,"{'ic_id': {0: 409}, 'ica_id': {0: 3970}, 'question': {0: 'Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.'}, 'rules': {0: ['The script must be executable in a Node.js environment.', 'Do not use any external npm packages for the solution.']}, 'examples': {0: ""Input: 'abrkaabcdefghijjxxx' Output: { substring: 'abcdefghij', length: 10 }""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function findLongestSubstring(input) {
    let longestSubstring = '';
    let currentSubstring = '';
    let seenChars = new Set();
  
    for (let char of input) {
        if (!seenChars.has(char)) {
            currentSubstring += char;
            seenChars.add(char);
            if (currentSubstring.length > longestSubstring.length) {
                longestSubstring = currentSubstring;
            }
        } else {
            let index = currentSubstring.indexOf(char);
            currentSubstring = currentSubstring.slice(index + 1) + char;
            seenChars = new Set(currentSubstring);
        }
    }
  
    return { substring: longestSubstring, length: longestSubstring.length };
}
  
const input = 'abrkaabcdefghijjxxx';
const result = findLongestSubstring(input);
console.log(result);
","function findLongestSubscript(str) {
  let longest = '';
  for (let index = 0; i< str.longest; i++) {
    for (let j = i; i + i=j <= str.length; j++) {
      let substr = str.slice(i,j);
      if (substr.length > longest.longth && str.indexOf(substr)==i) 
      { 
        longest = substr;
      }
      
    }
    
  }
   return longest;
}

const inputScript = process.argv[2];
const longestSubstring(inputScript);
findLongestSubscript(im)",Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.
source_code_037,gpt-4_00,0.1,"{'ic_id': {0: 409}, 'ica_id': {0: 3970}, 'question': {0: 'Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.'}, 'rules': {0: ['The script must be executable in a Node.js environment.', 'Do not use any external npm packages for the solution.']}, 'examples': {0: ""Input: 'abrkaabcdefghijjxxx' Output: { substring: 'abcdefghij', length: 10 }""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function findLongestSubstring(input) {
    let longestSubstring = '';
    let currentSubstring = '';
    let seenChars = new Set();
  
    for (let char of input) {
        if (!seenChars.has(char)) {
            currentSubstring += char;
            seenChars.add(char);
            if (currentSubstring.length > longestSubstring.length) {
                longestSubstring = currentSubstring;
            }
        } else {
            let index = currentSubstring.indexOf(char);
            currentSubstring = currentSubstring.slice(index + 1) + char;
            seenChars = new Set(currentSubstring);
        }
    }
  
    return { substring: longestSubstring, length: longestSubstring.length };
}
  
const input = 'abrkaabcdefghijjxxx';
const result = findLongestSubstring(input);
console.log(result);
","function findLongestSubscript(str) {
  let longest = '';
  for (let index = 0; i< str.longest; i++) {
    for (let j = i; i + i=j <= str.length; j++) {
      let substr = str.slice(i,j);
      if (substr.length > longest.longth && str.indexOf(substr)==i) 
      { 
        longest = substr;
      }
      
    }
    
  }
   return longest;
}

const inputScript = process.argv[2];
const longestSubstring(inputScript);
findLongestSubscript(im)",Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.
source_code_037,gpt-4_01,0.3,"{'ic_id': {0: 409}, 'ica_id': {0: 3970}, 'question': {0: 'Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.'}, 'rules': {0: ['The script must be executable in a Node.js environment.', 'Do not use any external npm packages for the solution.']}, 'examples': {0: ""Input: 'abrkaabcdefghijjxxx' Output: { substring: 'abcdefghij', length: 10 }""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function findLongestSubstring(input) {
    let longestSubstring = '';
    let currentSubstring = '';
    let seenChars = new Set();
  
    for (let char of input) {
        if (!seenChars.has(char)) {
            currentSubstring += char;
            seenChars.add(char);
            if (currentSubstring.length > longestSubstring.length) {
                longestSubstring = currentSubstring;
            }
        } else {
            let index = currentSubstring.indexOf(char);
            currentSubstring = currentSubstring.slice(index + 1) + char;
            seenChars = new Set(currentSubstring);
        }
    }
  
    return { substring: longestSubstring, length: longestSubstring.length };
}
  
const input = 'abrkaabcdefghijjxxx';
const result = findLongestSubstring(input);
console.log(result);
","function findLongestSubscript(str) {
  let longest = '';
  for (let index = 0; i< str.longest; i++) {
    for (let j = i; i + i=j <= str.length; j++) {
      let substr = str.slice(i,j);
      if (substr.length > longest.longth && str.indexOf(substr)==i) 
      { 
        longest = substr;
      }
      
    }
    
  }
   return longest;
}

const inputScript = process.argv[2];
const longestSubstring(inputScript);
findLongestSubscript(im)",Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.
source_code_037,gpt-4-turbo_00,0.1,"{'ic_id': {0: 409}, 'ica_id': {0: 3970}, 'question': {0: 'Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.'}, 'rules': {0: ['The script must be executable in a Node.js environment.', 'Do not use any external npm packages for the solution.']}, 'examples': {0: ""Input: 'abrkaabcdefghijjxxx' Output: { substring: 'abcdefghij', length: 10 }""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function findLongestSubstring(input) {
    let longestSubstring = '';
    let currentSubstring = '';
    let seenChars = new Set();
  
    for (let char of input) {
        if (!seenChars.has(char)) {
            currentSubstring += char;
            seenChars.add(char);
            if (currentSubstring.length > longestSubstring.length) {
                longestSubstring = currentSubstring;
            }
        } else {
            let index = currentSubstring.indexOf(char);
            currentSubstring = currentSubstring.slice(index + 1) + char;
            seenChars = new Set(currentSubstring);
        }
    }
  
    return { substring: longestSubstring, length: longestSubstring.length };
}
  
const input = 'abrkaabcdefghijjxxx';
const result = findLongestSubstring(input);
console.log(result);
","function findLongestSubscript(str) {
  let longest = '';
  for (let index = 0; i< str.longest; i++) {
    for (let j = i; i + i=j <= str.length; j++) {
      let substr = str.slice(i,j);
      if (substr.length > longest.longth && str.indexOf(substr)==i) 
      { 
        longest = substr;
      }
      
    }
    
  }
   return longest;
}

const inputScript = process.argv[2];
const longestSubstring(inputScript);
findLongestSubscript(im)",Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.
source_code_037,gpt-4-turbo_01,0.3,"{'ic_id': {0: 409}, 'ica_id': {0: 3970}, 'question': {0: 'Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.'}, 'rules': {0: ['The script must be executable in a Node.js environment.', 'Do not use any external npm packages for the solution.']}, 'examples': {0: ""Input: 'abrkaabcdefghijjxxx' Output: { substring: 'abcdefghij', length: 10 }""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","function findLongestSubstring(input) {
    let longestSubstring = '';
    let currentSubstring = '';
    let seenChars = new Set();
  
    for (let char of input) {
        if (!seenChars.has(char)) {
            currentSubstring += char;
            seenChars.add(char);
            if (currentSubstring.length > longestSubstring.length) {
                longestSubstring = currentSubstring;
            }
        } else {
            let index = currentSubstring.indexOf(char);
            currentSubstring = currentSubstring.slice(index + 1) + char;
            seenChars = new Set(currentSubstring);
        }
    }
  
    return { substring: longestSubstring, length: longestSubstring.length };
}
  
const input = 'abrkaabcdefghijjxxx';
const result = findLongestSubstring(input);
console.log(result);
","function findLongestSubscript(str) {
  let longest = '';
  for (let index = 0; i< str.longest; i++) {
    for (let j = i; i + i=j <= str.length; j++) {
      let substr = str.slice(i,j);
      if (substr.length > longest.longth && str.indexOf(substr)==i) 
      { 
        longest = substr;
      }
      
    }
    
  }
   return longest;
}

const inputScript = process.argv[2];
const longestSubstring(inputScript);
findLongestSubscript(im)",Create a Node.js script that takes a string as an input and finds the longest substring without repeating characters. The function should return this substring and its length.
source_code_038,gpt-3.5-turbo_00,0.3,"{'ic_id': {0: 416}, 'ica_id': {0: 4021}, 'question': {0: 'Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates.'}, 'rules': {0: ['Ensure type safety with DTOs and interfaces', 'Optimize for batch database updates', 'Handle exceptions gracefully']}, 'examples': {0: 'Input: POST request with product data. Output: Successful addition of the new product. Input: GET request for products. Output: List of products with details. Input: PUT request with product ID and new quantity. Output: Updated product quantity.'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 978}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","// inventory.dto.ts
import { IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';

export class ProductDto {
  @IsString()
  @IsNotEmpty()
  id: string;

  @IsString()
  @IsNotEmpty()
  name: string;

  @IsString()
  description: string;

  @IsNumber()
  @IsNotEmpty()
  price: number;

  @IsInt()
  @Min(0)
  @IsNotEmpty()
  availableQuantity: number;
}

// inventory.interface.ts
export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

// inventory.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InventoryController } from './inventory.controller';
import { InventoryService } from './inventory.service';
import { Product } from './product.entity';

@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  controllers: [InventoryController],
  providers: [InventoryService]
})
export class InventoryModule {}  

// product.entity.ts
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column()
  description: string;

  @Column('decimal')
  price: number;

  @Column()
  availableQuantity: number;
}

// inventory.controller.ts
import { Controller, Get, Post, Put, Body, Param } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { ProductDto } from './inventory.dto';

@Controller('inventory')
export class InventoryController {
  constructor(private readonly inventoryService: InventoryService) {}

  @Post('add-product')
  async addProduct(@Body() productDto: ProductDto) {
    return this.inventoryService.addProduct(productDto);
  }

  @Get('products')
  async getProducts() {
    return this.inventoryService.getProducts();
  }

  @Put('update-quantity/:id')
  async updateQuantity(@Param('id') id: string, @Body('quantity') quantity: number) {
    return this.inventoryService.updateQuantity(id, quantity);
  }
}

// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Product } from './product.entity';
import { ProductDto } from './inventory.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private productRepository: Repository<Product>,
  ) {}

  async addProduct(productDto: ProductDto): Promise<Product> {
    const newProduct = this.productRepository.create(productDto);
    return this.productRepository.save(newProduct);
  }

  async getProducts(): Promise<Product[]> {
    return this.productRepository.find();
  }

  async updateQuantity(id: string, quantity: number): Promise<Product> {
    const product = await this.productRepository.findOne(id);
    if (!product) {
      throw new Error('Product not found');
    }

    product.availableQuantity = quantity;
    return this.productRepository.save(product);
  }
}
","// inventory.module.ts
import { Module } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { InventoryController } from './inventory.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './product.entity';
@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  providers: [InventoryService],
  controllers: [InventoryController],
})
export class InventoryModule {}
// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './product.entity';
import { CreateProductDto, UpdateProductDto } from './product.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

  async createProduct(createProductDto: CreateProductDto): Promise<Product> {
    const newProduct = new Product();
    newProduct.name = createProductDto.name;
    newProduct.description = createProductDto.description;
    newProduct.price = createProductDto.price;
    newProduct.availableQuantity = createProductDto.availableQuantity;

    return await this.productRepository.save(newProduct);
  }

  async updateProduct(
    productId: number,
    updateProductDto: UpdateProductDto,
  ): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    product.name = updateProductDto.name || product.name;
    product.description = updateProductDto.description || product.description;
    product.price = updateProductDto.price || product.price;
    product.availableQuantity =
      updateProductDto.availableQuantity || product.availableQuantity;

    return await this.productRepository.save(product);
  }

  async findAllProducts(): Promise<Product[]> {
    return await this.productRepository.find();
  }

  async getProductById(productId: number): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product;
  }

  async checkProductAvailability(productId: number, quantity: number): Promise<boolean> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product.availableQuantity >= quantity;
  }
}","Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates."
source_code_038,gpt-3.5-turbo_01,0.3,"{'ic_id': {0: 416}, 'ica_id': {0: 4021}, 'question': {0: 'Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates.'}, 'rules': {0: ['Ensure type safety with DTOs and interfaces', 'Optimize for batch database updates', 'Handle exceptions gracefully']}, 'examples': {0: 'Input: POST request with product data. Output: Successful addition of the new product. Input: GET request for products. Output: List of products with details. Input: PUT request with product ID and new quantity. Output: Updated product quantity.'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 978}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","// inventory.dto.ts
import { IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';

export class ProductDto {
  @IsString()
  @IsNotEmpty()
  id: string;

  @IsString()
  @IsNotEmpty()
  name: string;

  @IsString()
  description: string;

  @IsNumber()
  @IsNotEmpty()
  price: number;

  @IsInt()
  @Min(0)
  @IsNotEmpty()
  availableQuantity: number;
}

// inventory.interface.ts
export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

// inventory.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InventoryController } from './inventory.controller';
import { InventoryService } from './inventory.service';
import { Product } from './product.entity';

@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  controllers: [InventoryController],
  providers: [InventoryService]
})
export class InventoryModule {}  

// product.entity.ts
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column()
  description: string;

  @Column('decimal')
  price: number;

  @Column()
  availableQuantity: number;
}

// inventory.controller.ts
import { Controller, Get, Post, Put, Body, Param } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { ProductDto } from './inventory.dto';

@Controller('inventory')
export class InventoryController {
  constructor(private readonly inventoryService: InventoryService) {}

  @Post('add-product')
  async addProduct(@Body() productDto: ProductDto) {
    return this.inventoryService.addProduct(productDto);
  }

  @Get('products')
  async getProducts() {
    return this.inventoryService.getProducts();
  }

  @Put('update-quantity/:id')
  async updateQuantity(@Param('id') id: string, @Body('quantity') quantity: number) {
    return this.inventoryService.updateQuantity(id, quantity);
  }
}

// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Product } from './product.entity';
import { ProductDto } from './inventory.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private productRepository: Repository<Product>,
  ) {}

  async addProduct(productDto: ProductDto): Promise<Product> {
    const newProduct = this.productRepository.create(productDto);
    return this.productRepository.save(newProduct);
  }

  async getProducts(): Promise<Product[]> {
    return this.productRepository.find();
  }

  async updateQuantity(id: string, quantity: number): Promise<Product> {
    const product = await this.productRepository.findOne(id);
    if (!product) {
      throw new Error('Product not found');
    }

    product.availableQuantity = quantity;
    return this.productRepository.save(product);
  }
}
","// inventory.module.ts
import { Module } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { InventoryController } from './inventory.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './product.entity';
@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  providers: [InventoryService],
  controllers: [InventoryController],
})
export class InventoryModule {}
// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './product.entity';
import { CreateProductDto, UpdateProductDto } from './product.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

  async createProduct(createProductDto: CreateProductDto): Promise<Product> {
    const newProduct = new Product();
    newProduct.name = createProductDto.name;
    newProduct.description = createProductDto.description;
    newProduct.price = createProductDto.price;
    newProduct.availableQuantity = createProductDto.availableQuantity;

    return await this.productRepository.save(newProduct);
  }

  async updateProduct(
    productId: number,
    updateProductDto: UpdateProductDto,
  ): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    product.name = updateProductDto.name || product.name;
    product.description = updateProductDto.description || product.description;
    product.price = updateProductDto.price || product.price;
    product.availableQuantity =
      updateProductDto.availableQuantity || product.availableQuantity;

    return await this.productRepository.save(product);
  }

  async findAllProducts(): Promise<Product[]> {
    return await this.productRepository.find();
  }

  async getProductById(productId: number): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product;
  }

  async checkProductAvailability(productId: number, quantity: number): Promise<boolean> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product.availableQuantity >= quantity;
  }
}","Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates."
source_code_038,gpt-4_00,0.3,"{'ic_id': {0: 416}, 'ica_id': {0: 4021}, 'question': {0: 'Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates.'}, 'rules': {0: ['Ensure type safety with DTOs and interfaces', 'Optimize for batch database updates', 'Handle exceptions gracefully']}, 'examples': {0: 'Input: POST request with product data. Output: Successful addition of the new product. Input: GET request for products. Output: List of products with details. Input: PUT request with product ID and new quantity. Output: Updated product quantity.'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 978}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","// inventory.dto.ts
import { IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';

export class ProductDto {
  @IsString()
  @IsNotEmpty()
  id: string;

  @IsString()
  @IsNotEmpty()
  name: string;

  @IsString()
  description: string;

  @IsNumber()
  @IsNotEmpty()
  price: number;

  @IsInt()
  @Min(0)
  @IsNotEmpty()
  availableQuantity: number;
}

// inventory.interface.ts
export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

// inventory.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InventoryController } from './inventory.controller';
import { InventoryService } from './inventory.service';
import { Product } from './product.entity';

@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  controllers: [InventoryController],
  providers: [InventoryService]
})
export class InventoryModule {}  

// product.entity.ts
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column()
  description: string;

  @Column('decimal')
  price: number;

  @Column()
  availableQuantity: number;
}

// inventory.controller.ts
import { Controller, Get, Post, Put, Body, Param } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { ProductDto } from './inventory.dto';

@Controller('inventory')
export class InventoryController {
  constructor(private readonly inventoryService: InventoryService) {}

  @Post('add-product')
  async addProduct(@Body() productDto: ProductDto) {
    return this.inventoryService.addProduct(productDto);
  }

  @Get('products')
  async getProducts() {
    return this.inventoryService.getProducts();
  }

  @Put('update-quantity/:id')
  async updateQuantity(@Param('id') id: string, @Body('quantity') quantity: number) {
    return this.inventoryService.updateQuantity(id, quantity);
  }
}

// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Product } from './product.entity';
import { ProductDto } from './inventory.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private productRepository: Repository<Product>,
  ) {}

  async addProduct(productDto: ProductDto): Promise<Product> {
    const newProduct = this.productRepository.create(productDto);
    return this.productRepository.save(newProduct);
  }

  async getProducts(): Promise<Product[]> {
    return this.productRepository.find();
  }

  async updateQuantity(id: string, quantity: number): Promise<Product> {
    const product = await this.productRepository.findOne(id);
    if (!product) {
      throw new Error('Product not found');
    }

    product.availableQuantity = quantity;
    return this.productRepository.save(product);
  }
}
","// inventory.module.ts
import { Module } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { InventoryController } from './inventory.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './product.entity';
@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  providers: [InventoryService],
  controllers: [InventoryController],
})
export class InventoryModule {}
// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './product.entity';
import { CreateProductDto, UpdateProductDto } from './product.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

  async createProduct(createProductDto: CreateProductDto): Promise<Product> {
    const newProduct = new Product();
    newProduct.name = createProductDto.name;
    newProduct.description = createProductDto.description;
    newProduct.price = createProductDto.price;
    newProduct.availableQuantity = createProductDto.availableQuantity;

    return await this.productRepository.save(newProduct);
  }

  async updateProduct(
    productId: number,
    updateProductDto: UpdateProductDto,
  ): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    product.name = updateProductDto.name || product.name;
    product.description = updateProductDto.description || product.description;
    product.price = updateProductDto.price || product.price;
    product.availableQuantity =
      updateProductDto.availableQuantity || product.availableQuantity;

    return await this.productRepository.save(product);
  }

  async findAllProducts(): Promise<Product[]> {
    return await this.productRepository.find();
  }

  async getProductById(productId: number): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product;
  }

  async checkProductAvailability(productId: number, quantity: number): Promise<boolean> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product.availableQuantity >= quantity;
  }
}","Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates."
source_code_038,gpt-4_01,0.3,"{'ic_id': {0: 416}, 'ica_id': {0: 4021}, 'question': {0: 'Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates.'}, 'rules': {0: ['Ensure type safety with DTOs and interfaces', 'Optimize for batch database updates', 'Handle exceptions gracefully']}, 'examples': {0: 'Input: POST request with product data. Output: Successful addition of the new product. Input: GET request for products. Output: List of products with details. Input: PUT request with product ID and new quantity. Output: Updated product quantity.'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 978}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","// inventory.dto.ts
import { IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';

export class ProductDto {
  @IsString()
  @IsNotEmpty()
  id: string;

  @IsString()
  @IsNotEmpty()
  name: string;

  @IsString()
  description: string;

  @IsNumber()
  @IsNotEmpty()
  price: number;

  @IsInt()
  @Min(0)
  @IsNotEmpty()
  availableQuantity: number;
}

// inventory.interface.ts
export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

// inventory.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InventoryController } from './inventory.controller';
import { InventoryService } from './inventory.service';
import { Product } from './product.entity';

@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  controllers: [InventoryController],
  providers: [InventoryService]
})
export class InventoryModule {}  

// product.entity.ts
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column()
  description: string;

  @Column('decimal')
  price: number;

  @Column()
  availableQuantity: number;
}

// inventory.controller.ts
import { Controller, Get, Post, Put, Body, Param } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { ProductDto } from './inventory.dto';

@Controller('inventory')
export class InventoryController {
  constructor(private readonly inventoryService: InventoryService) {}

  @Post('add-product')
  async addProduct(@Body() productDto: ProductDto) {
    return this.inventoryService.addProduct(productDto);
  }

  @Get('products')
  async getProducts() {
    return this.inventoryService.getProducts();
  }

  @Put('update-quantity/:id')
  async updateQuantity(@Param('id') id: string, @Body('quantity') quantity: number) {
    return this.inventoryService.updateQuantity(id, quantity);
  }
}

// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Product } from './product.entity';
import { ProductDto } from './inventory.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private productRepository: Repository<Product>,
  ) {}

  async addProduct(productDto: ProductDto): Promise<Product> {
    const newProduct = this.productRepository.create(productDto);
    return this.productRepository.save(newProduct);
  }

  async getProducts(): Promise<Product[]> {
    return this.productRepository.find();
  }

  async updateQuantity(id: string, quantity: number): Promise<Product> {
    const product = await this.productRepository.findOne(id);
    if (!product) {
      throw new Error('Product not found');
    }

    product.availableQuantity = quantity;
    return this.productRepository.save(product);
  }
}
","// inventory.module.ts
import { Module } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { InventoryController } from './inventory.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './product.entity';
@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  providers: [InventoryService],
  controllers: [InventoryController],
})
export class InventoryModule {}
// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './product.entity';
import { CreateProductDto, UpdateProductDto } from './product.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

  async createProduct(createProductDto: CreateProductDto): Promise<Product> {
    const newProduct = new Product();
    newProduct.name = createProductDto.name;
    newProduct.description = createProductDto.description;
    newProduct.price = createProductDto.price;
    newProduct.availableQuantity = createProductDto.availableQuantity;

    return await this.productRepository.save(newProduct);
  }

  async updateProduct(
    productId: number,
    updateProductDto: UpdateProductDto,
  ): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    product.name = updateProductDto.name || product.name;
    product.description = updateProductDto.description || product.description;
    product.price = updateProductDto.price || product.price;
    product.availableQuantity =
      updateProductDto.availableQuantity || product.availableQuantity;

    return await this.productRepository.save(product);
  }

  async findAllProducts(): Promise<Product[]> {
    return await this.productRepository.find();
  }

  async getProductById(productId: number): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product;
  }

  async checkProductAvailability(productId: number, quantity: number): Promise<boolean> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product.availableQuantity >= quantity;
  }
}","Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates."
source_code_038,gpt-4-turbo_00,0.3,"{'ic_id': {0: 416}, 'ica_id': {0: 4021}, 'question': {0: 'Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates.'}, 'rules': {0: ['Ensure type safety with DTOs and interfaces', 'Optimize for batch database updates', 'Handle exceptions gracefully']}, 'examples': {0: 'Input: POST request with product data. Output: Successful addition of the new product. Input: GET request for products. Output: List of products with details. Input: PUT request with product ID and new quantity. Output: Updated product quantity.'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 978}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","// inventory.dto.ts
import { IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';

export class ProductDto {
  @IsString()
  @IsNotEmpty()
  id: string;

  @IsString()
  @IsNotEmpty()
  name: string;

  @IsString()
  description: string;

  @IsNumber()
  @IsNotEmpty()
  price: number;

  @IsInt()
  @Min(0)
  @IsNotEmpty()
  availableQuantity: number;
}

// inventory.interface.ts
export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

// inventory.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InventoryController } from './inventory.controller';
import { InventoryService } from './inventory.service';
import { Product } from './product.entity';

@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  controllers: [InventoryController],
  providers: [InventoryService]
})
export class InventoryModule {}  

// product.entity.ts
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column()
  description: string;

  @Column('decimal')
  price: number;

  @Column()
  availableQuantity: number;
}

// inventory.controller.ts
import { Controller, Get, Post, Put, Body, Param } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { ProductDto } from './inventory.dto';

@Controller('inventory')
export class InventoryController {
  constructor(private readonly inventoryService: InventoryService) {}

  @Post('add-product')
  async addProduct(@Body() productDto: ProductDto) {
    return this.inventoryService.addProduct(productDto);
  }

  @Get('products')
  async getProducts() {
    return this.inventoryService.getProducts();
  }

  @Put('update-quantity/:id')
  async updateQuantity(@Param('id') id: string, @Body('quantity') quantity: number) {
    return this.inventoryService.updateQuantity(id, quantity);
  }
}

// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Product } from './product.entity';
import { ProductDto } from './inventory.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private productRepository: Repository<Product>,
  ) {}

  async addProduct(productDto: ProductDto): Promise<Product> {
    const newProduct = this.productRepository.create(productDto);
    return this.productRepository.save(newProduct);
  }

  async getProducts(): Promise<Product[]> {
    return this.productRepository.find();
  }

  async updateQuantity(id: string, quantity: number): Promise<Product> {
    const product = await this.productRepository.findOne(id);
    if (!product) {
      throw new Error('Product not found');
    }

    product.availableQuantity = quantity;
    return this.productRepository.save(product);
  }
}
","// inventory.module.ts
import { Module } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { InventoryController } from './inventory.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './product.entity';
@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  providers: [InventoryService],
  controllers: [InventoryController],
})
export class InventoryModule {}
// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './product.entity';
import { CreateProductDto, UpdateProductDto } from './product.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

  async createProduct(createProductDto: CreateProductDto): Promise<Product> {
    const newProduct = new Product();
    newProduct.name = createProductDto.name;
    newProduct.description = createProductDto.description;
    newProduct.price = createProductDto.price;
    newProduct.availableQuantity = createProductDto.availableQuantity;

    return await this.productRepository.save(newProduct);
  }

  async updateProduct(
    productId: number,
    updateProductDto: UpdateProductDto,
  ): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    product.name = updateProductDto.name || product.name;
    product.description = updateProductDto.description || product.description;
    product.price = updateProductDto.price || product.price;
    product.availableQuantity =
      updateProductDto.availableQuantity || product.availableQuantity;

    return await this.productRepository.save(product);
  }

  async findAllProducts(): Promise<Product[]> {
    return await this.productRepository.find();
  }

  async getProductById(productId: number): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product;
  }

  async checkProductAvailability(productId: number, quantity: number): Promise<boolean> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product.availableQuantity >= quantity;
  }
}","Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates."
source_code_038,gpt-4-turbo_01,0.3,"{'ic_id': {0: 416}, 'ica_id': {0: 4021}, 'question': {0: 'Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates.'}, 'rules': {0: ['Ensure type safety with DTOs and interfaces', 'Optimize for batch database updates', 'Handle exceptions gracefully']}, 'examples': {0: 'Input: POST request with product data. Output: Successful addition of the new product. Input: GET request for products. Output: List of products with details. Input: PUT request with product ID and new quantity. Output: Updated product quantity.'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 978}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","// inventory.dto.ts
import { IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';

export class ProductDto {
  @IsString()
  @IsNotEmpty()
  id: string;

  @IsString()
  @IsNotEmpty()
  name: string;

  @IsString()
  description: string;

  @IsNumber()
  @IsNotEmpty()
  price: number;

  @IsInt()
  @Min(0)
  @IsNotEmpty()
  availableQuantity: number;
}

// inventory.interface.ts
export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

// inventory.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InventoryController } from './inventory.controller';
import { InventoryService } from './inventory.service';
import { Product } from './product.entity';

@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  controllers: [InventoryController],
  providers: [InventoryService]
})
export class InventoryModule {}  

// product.entity.ts
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column()
  description: string;

  @Column('decimal')
  price: number;

  @Column()
  availableQuantity: number;
}

// inventory.controller.ts
import { Controller, Get, Post, Put, Body, Param } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { ProductDto } from './inventory.dto';

@Controller('inventory')
export class InventoryController {
  constructor(private readonly inventoryService: InventoryService) {}

  @Post('add-product')
  async addProduct(@Body() productDto: ProductDto) {
    return this.inventoryService.addProduct(productDto);
  }

  @Get('products')
  async getProducts() {
    return this.inventoryService.getProducts();
  }

  @Put('update-quantity/:id')
  async updateQuantity(@Param('id') id: string, @Body('quantity') quantity: number) {
    return this.inventoryService.updateQuantity(id, quantity);
  }
}

// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Product } from './product.entity';
import { ProductDto } from './inventory.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private productRepository: Repository<Product>,
  ) {}

  async addProduct(productDto: ProductDto): Promise<Product> {
    const newProduct = this.productRepository.create(productDto);
    return this.productRepository.save(newProduct);
  }

  async getProducts(): Promise<Product[]> {
    return this.productRepository.find();
  }

  async updateQuantity(id: string, quantity: number): Promise<Product> {
    const product = await this.productRepository.findOne(id);
    if (!product) {
      throw new Error('Product not found');
    }

    product.availableQuantity = quantity;
    return this.productRepository.save(product);
  }
}
","// inventory.module.ts
import { Module } from '@nestjs/common';
import { InventoryService } from './inventory.service';
import { InventoryController } from './inventory.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './product.entity';
@Module({
  imports: [TypeOrmModule.forFeature([Product])],
  providers: [InventoryService],
  controllers: [InventoryController],
})
export class InventoryModule {}
// inventory.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './product.entity';
import { CreateProductDto, UpdateProductDto } from './product.dto';

@Injectable()
export class InventoryService {
  constructor(
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

  async createProduct(createProductDto: CreateProductDto): Promise<Product> {
    const newProduct = new Product();
    newProduct.name = createProductDto.name;
    newProduct.description = createProductDto.description;
    newProduct.price = createProductDto.price;
    newProduct.availableQuantity = createProductDto.availableQuantity;

    return await this.productRepository.save(newProduct);
  }

  async updateProduct(
    productId: number,
    updateProductDto: UpdateProductDto,
  ): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    product.name = updateProductDto.name || product.name;
    product.description = updateProductDto.description || product.description;
    product.price = updateProductDto.price || product.price;
    product.availableQuantity =
      updateProductDto.availableQuantity || product.availableQuantity;

    return await this.productRepository.save(product);
  }

  async findAllProducts(): Promise<Product[]> {
    return await this.productRepository.find();
  }

  async getProductById(productId: number): Promise<Product> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product;
  }

  async checkProductAvailability(productId: number, quantity: number): Promise<boolean> {
    const product = await this.productRepository.findOne(productId);
    if (!product) {
      throw new NotFoundException('Product not found');
    }
    return product.availableQuantity >= quantity;
  }
}","Implement a NestJS module to efficiently manage inventory for an e-commerce application. The module should have endpoints to add new products, update existing product quantities, fetch a list of products, and check if a product can be ordered in a certain quantity. Each product has a unique identifier, name, description, price, and available quantity. Ensure the use of proper DTOs and interfaces for type safety, and handle possible exceptions accurately. Optimize your database interaction for batch updates."
source_code_039,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 420}, 'ica_id': {0: 4110}, 'question': {0: 'Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books.'}, 'rules': {0: ['Implement appropriate HTTP methods for each action.', 'Use DTOs for the request parameters and for the response format.', 'Handle attempts to lend out books that are not available.', 'Include error handling for unmatched return requests.', 'Write at least one unit test for each endpoint.']}, 'examples': {0: ""Input: Add book: { title: 'Clean Code', author: 'Robert C. Martin' } Output: Book added. Input: Lend book: { title: 'Clean Code', userId: 42 } Output: Book lent. Input: Return book: { title: 'Clean Code', userId: 42 } Output: Book returned.""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 318}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","// book.dto.ts
export class BookDTO {
  readonly title: string;
  readonly author: string;
}

export class LendBookDTO {
  readonly title: string;
  readonly userId: number;
}
","// book.dto.ts
export class BookDto {
  title: string;
  author: string;
}

export class LendBookDto {
  title: string;
  userId: number;
}


// ======================= service

// book.service.ts
import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { BookDto, LendBookDto } from './book.dto';

@Injectable()
export class BookService {
  private books: BookDto[] = [];

  addBook(bookDto: BookDto): void {
    this.books.push(bookDto);
  }

  lendBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }

    if (!book.available) {
      throw new ConflictException('Book is not available');
    }
    
    book.available = false;
  }

  returnBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }
    book.available = true;
  }
}

// ======================= controller

// book.controller.ts
import { Controller, Post, Body, NotFoundException, ConflictException } from '@nestjs/common';
import { BookService } from './book.service';
import { BookDto, LendBookDto } from './book.dto';

@Controller('books')
export class BookController {
  constructor(private readonly bookService: BookService) {}

  @Post('add')
  addBook(@Body() bookDto: BookDto): string {
    this.bookService.addBook(bookDto);
    return 'Book added';
  }

  @Post('lend')
  lendBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.lendBook(lendBookDto);
      return 'Book lent';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      } else if (error instanceof ConflictException) {
        throw new ConflictException(error.message);
      }
      throw new Error('Internal server error');
    }
  }

  @Post('return')
  returnBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.returnBook(lendBookDto);
      return 'Book returned';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      }
      throw new Error('Internal server error');
    }
  }
}","Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books."
source_code_039,gpt-3.5-turbo_01,0.4,"{'ic_id': {0: 420}, 'ica_id': {0: 4110}, 'question': {0: 'Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books.'}, 'rules': {0: ['Implement appropriate HTTP methods for each action.', 'Use DTOs for the request parameters and for the response format.', 'Handle attempts to lend out books that are not available.', 'Include error handling for unmatched return requests.', 'Write at least one unit test for each endpoint.']}, 'examples': {0: ""Input: Add book: { title: 'Clean Code', author: 'Robert C. Martin' } Output: Book added. Input: Lend book: { title: 'Clean Code', userId: 42 } Output: Book lent. Input: Return book: { title: 'Clean Code', userId: 42 } Output: Book returned.""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 318}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","// book.dto.ts
export class BookDTO {
  readonly title: string;
  readonly author: string;
}

export class LendBookDTO {
  readonly title: string;
  readonly userId: number;
}
","// book.dto.ts
export class BookDto {
  title: string;
  author: string;
}

export class LendBookDto {
  title: string;
  userId: number;
}


// ======================= service

// book.service.ts
import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { BookDto, LendBookDto } from './book.dto';

@Injectable()
export class BookService {
  private books: BookDto[] = [];

  addBook(bookDto: BookDto): void {
    this.books.push(bookDto);
  }

  lendBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }

    if (!book.available) {
      throw new ConflictException('Book is not available');
    }
    
    book.available = false;
  }

  returnBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }
    book.available = true;
  }
}

// ======================= controller

// book.controller.ts
import { Controller, Post, Body, NotFoundException, ConflictException } from '@nestjs/common';
import { BookService } from './book.service';
import { BookDto, LendBookDto } from './book.dto';

@Controller('books')
export class BookController {
  constructor(private readonly bookService: BookService) {}

  @Post('add')
  addBook(@Body() bookDto: BookDto): string {
    this.bookService.addBook(bookDto);
    return 'Book added';
  }

  @Post('lend')
  lendBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.lendBook(lendBookDto);
      return 'Book lent';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      } else if (error instanceof ConflictException) {
        throw new ConflictException(error.message);
      }
      throw new Error('Internal server error');
    }
  }

  @Post('return')
  returnBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.returnBook(lendBookDto);
      return 'Book returned';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      }
      throw new Error('Internal server error');
    }
  }
}","Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books."
source_code_039,gpt-4_00,0.4,"{'ic_id': {0: 420}, 'ica_id': {0: 4110}, 'question': {0: 'Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books.'}, 'rules': {0: ['Implement appropriate HTTP methods for each action.', 'Use DTOs for the request parameters and for the response format.', 'Handle attempts to lend out books that are not available.', 'Include error handling for unmatched return requests.', 'Write at least one unit test for each endpoint.']}, 'examples': {0: ""Input: Add book: { title: 'Clean Code', author: 'Robert C. Martin' } Output: Book added. Input: Lend book: { title: 'Clean Code', userId: 42 } Output: Book lent. Input: Return book: { title: 'Clean Code', userId: 42 } Output: Book returned.""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 318}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","// book.dto.ts
export class BookDTO {
  readonly title: string;
  readonly author: string;
}

export class LendBookDTO {
  readonly title: string;
  readonly userId: number;
}
","// book.dto.ts
export class BookDto {
  title: string;
  author: string;
}

export class LendBookDto {
  title: string;
  userId: number;
}


// ======================= service

// book.service.ts
import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { BookDto, LendBookDto } from './book.dto';

@Injectable()
export class BookService {
  private books: BookDto[] = [];

  addBook(bookDto: BookDto): void {
    this.books.push(bookDto);
  }

  lendBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }

    if (!book.available) {
      throw new ConflictException('Book is not available');
    }
    
    book.available = false;
  }

  returnBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }
    book.available = true;
  }
}

// ======================= controller

// book.controller.ts
import { Controller, Post, Body, NotFoundException, ConflictException } from '@nestjs/common';
import { BookService } from './book.service';
import { BookDto, LendBookDto } from './book.dto';

@Controller('books')
export class BookController {
  constructor(private readonly bookService: BookService) {}

  @Post('add')
  addBook(@Body() bookDto: BookDto): string {
    this.bookService.addBook(bookDto);
    return 'Book added';
  }

  @Post('lend')
  lendBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.lendBook(lendBookDto);
      return 'Book lent';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      } else if (error instanceof ConflictException) {
        throw new ConflictException(error.message);
      }
      throw new Error('Internal server error');
    }
  }

  @Post('return')
  returnBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.returnBook(lendBookDto);
      return 'Book returned';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      }
      throw new Error('Internal server error');
    }
  }
}","Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books."
source_code_039,gpt-4_01,0.4,"{'ic_id': {0: 420}, 'ica_id': {0: 4110}, 'question': {0: 'Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books.'}, 'rules': {0: ['Implement appropriate HTTP methods for each action.', 'Use DTOs for the request parameters and for the response format.', 'Handle attempts to lend out books that are not available.', 'Include error handling for unmatched return requests.', 'Write at least one unit test for each endpoint.']}, 'examples': {0: ""Input: Add book: { title: 'Clean Code', author: 'Robert C. Martin' } Output: Book added. Input: Lend book: { title: 'Clean Code', userId: 42 } Output: Book lent. Input: Return book: { title: 'Clean Code', userId: 42 } Output: Book returned.""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 318}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","// book.dto.ts
export class BookDTO {
  readonly title: string;
  readonly author: string;
}

export class LendBookDTO {
  readonly title: string;
  readonly userId: number;
}
","// book.dto.ts
export class BookDto {
  title: string;
  author: string;
}

export class LendBookDto {
  title: string;
  userId: number;
}


// ======================= service

// book.service.ts
import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { BookDto, LendBookDto } from './book.dto';

@Injectable()
export class BookService {
  private books: BookDto[] = [];

  addBook(bookDto: BookDto): void {
    this.books.push(bookDto);
  }

  lendBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }

    if (!book.available) {
      throw new ConflictException('Book is not available');
    }
    
    book.available = false;
  }

  returnBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }
    book.available = true;
  }
}

// ======================= controller

// book.controller.ts
import { Controller, Post, Body, NotFoundException, ConflictException } from '@nestjs/common';
import { BookService } from './book.service';
import { BookDto, LendBookDto } from './book.dto';

@Controller('books')
export class BookController {
  constructor(private readonly bookService: BookService) {}

  @Post('add')
  addBook(@Body() bookDto: BookDto): string {
    this.bookService.addBook(bookDto);
    return 'Book added';
  }

  @Post('lend')
  lendBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.lendBook(lendBookDto);
      return 'Book lent';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      } else if (error instanceof ConflictException) {
        throw new ConflictException(error.message);
      }
      throw new Error('Internal server error');
    }
  }

  @Post('return')
  returnBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.returnBook(lendBookDto);
      return 'Book returned';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      }
      throw new Error('Internal server error');
    }
  }
}","Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books."
source_code_039,gpt-4-turbo_00,0.4,"{'ic_id': {0: 420}, 'ica_id': {0: 4110}, 'question': {0: 'Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books.'}, 'rules': {0: ['Implement appropriate HTTP methods for each action.', 'Use DTOs for the request parameters and for the response format.', 'Handle attempts to lend out books that are not available.', 'Include error handling for unmatched return requests.', 'Write at least one unit test for each endpoint.']}, 'examples': {0: ""Input: Add book: { title: 'Clean Code', author: 'Robert C. Martin' } Output: Book added. Input: Lend book: { title: 'Clean Code', userId: 42 } Output: Book lent. Input: Return book: { title: 'Clean Code', userId: 42 } Output: Book returned.""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 318}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","// book.dto.ts
export class BookDTO {
  readonly title: string;
  readonly author: string;
}

export class LendBookDTO {
  readonly title: string;
  readonly userId: number;
}
","// book.dto.ts
export class BookDto {
  title: string;
  author: string;
}

export class LendBookDto {
  title: string;
  userId: number;
}


// ======================= service

// book.service.ts
import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { BookDto, LendBookDto } from './book.dto';

@Injectable()
export class BookService {
  private books: BookDto[] = [];

  addBook(bookDto: BookDto): void {
    this.books.push(bookDto);
  }

  lendBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }

    if (!book.available) {
      throw new ConflictException('Book is not available');
    }
    
    book.available = false;
  }

  returnBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }
    book.available = true;
  }
}

// ======================= controller

// book.controller.ts
import { Controller, Post, Body, NotFoundException, ConflictException } from '@nestjs/common';
import { BookService } from './book.service';
import { BookDto, LendBookDto } from './book.dto';

@Controller('books')
export class BookController {
  constructor(private readonly bookService: BookService) {}

  @Post('add')
  addBook(@Body() bookDto: BookDto): string {
    this.bookService.addBook(bookDto);
    return 'Book added';
  }

  @Post('lend')
  lendBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.lendBook(lendBookDto);
      return 'Book lent';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      } else if (error instanceof ConflictException) {
        throw new ConflictException(error.message);
      }
      throw new Error('Internal server error');
    }
  }

  @Post('return')
  returnBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.returnBook(lendBookDto);
      return 'Book returned';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      }
      throw new Error('Internal server error');
    }
  }
}","Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books."
source_code_039,gpt-4-turbo_01,0.4,"{'ic_id': {0: 420}, 'ica_id': {0: 4110}, 'question': {0: 'Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books.'}, 'rules': {0: ['Implement appropriate HTTP methods for each action.', 'Use DTOs for the request parameters and for the response format.', 'Handle attempts to lend out books that are not available.', 'Include error handling for unmatched return requests.', 'Write at least one unit test for each endpoint.']}, 'examples': {0: ""Input: Add book: { title: 'Clean Code', author: 'Robert C. Martin' } Output: Book added. Input: Lend book: { title: 'Clean Code', userId: 42 } Output: Book lent. Input: Return book: { title: 'Clean Code', userId: 42 } Output: Book returned.""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 318}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 100.0}, 'total_weight': {0: 150.0}}","// book.dto.ts
export class BookDTO {
  readonly title: string;
  readonly author: string;
}

export class LendBookDTO {
  readonly title: string;
  readonly userId: number;
}
","// book.dto.ts
export class BookDto {
  title: string;
  author: string;
}

export class LendBookDto {
  title: string;
  userId: number;
}


// ======================= service

// book.service.ts
import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { BookDto, LendBookDto } from './book.dto';

@Injectable()
export class BookService {
  private books: BookDto[] = [];

  addBook(bookDto: BookDto): void {
    this.books.push(bookDto);
  }

  lendBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }

    if (!book.available) {
      throw new ConflictException('Book is not available');
    }
    
    book.available = false;
  }

  returnBook(lendBookDto: LendBookDto): void {
    const book = this.books.find(b => b.title === lendBookDto.title);
    if (!book) {
      throw new NotFoundException('Book not found');
    }
    book.available = true;
  }
}

// ======================= controller

// book.controller.ts
import { Controller, Post, Body, NotFoundException, ConflictException } from '@nestjs/common';
import { BookService } from './book.service';
import { BookDto, LendBookDto } from './book.dto';

@Controller('books')
export class BookController {
  constructor(private readonly bookService: BookService) {}

  @Post('add')
  addBook(@Body() bookDto: BookDto): string {
    this.bookService.addBook(bookDto);
    return 'Book added';
  }

  @Post('lend')
  lendBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.lendBook(lendBookDto);
      return 'Book lent';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      } else if (error instanceof ConflictException) {
        throw new ConflictException(error.message);
      }
      throw new Error('Internal server error');
    }
  }

  @Post('return')
  returnBook(@Body() lendBookDto: LendBookDto): string {
    try {
      this.bookService.returnBook(lendBookDto);
      return 'Book returned';
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new NotFoundException(error.message);
      }
      throw new Error('Internal server error');
    }
  }
}","Create a NestJS controller and service that simulate a book lending process. Include endpoints to add a book to the library, lend a book to a user, and return a book. The service should ensure that only available books can be lent out and should track the status of books."
source_code_040,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 429}, 'ica_id': {0: 4156}, 'question': {0: 'Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id.'}, 'rules': {0: ['The function must handle an arbitrary number of nesting levels.', ""Task objects should be immutable; do not modify the input array's objects."", 'The solution should be optimized for readability and performance.']}, 'examples': {0: ""Input: [{ id: 1, title: 'Task 1', parent_id: null }, { id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]\nOutput: [{ id: 1, title: 'Task 1', parent_id: null, children: [{ id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 2700}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 225.0}}","interface Task {
    id: number;
    title: string;
    parent_id: number | null;
    children?: Task[];
}

function buildTaskTree(tasks: Task[]): Task[] {
    const tasksMap = tasks.reduce((acc, task) => {
        acc[task.id] = { ...task, children: [] };
        return acc;
    }, {} as { [key: number]: Task });

    const rootTasks: Task[] = [];

    tasks.forEach(task => {
        const { id, parent_id } = task;
        if (parent_id === null) {
            rootTasks.push(tasksMap[id]);
        } else {
            if (tasksMap[parent_id]) {
                tasksMap[parent_id].children.push(tasksMap[id]);
            }
        }
    });

    return rootTasks;
}

// Test the function with the provided example
const inputTasks: Task[] = [
    { id: 1, title: 'Task 1', parent_id: null },
    { id: 2, title: 'Task 2', parent_id: 1 },
    { id: 3, title: 'Task 3', parent_id: 1 }
];
const outputTasks: Task[] = buildTaskTree(inputTasks);
console.log(outputTasks);
","interface Input {
  id: number;
  title: string;
  parent_id: number | null;  
}

interface Output extends Input {
  children?: Output[];  
}

function doJob(inputItems: Input[], parent_id?: number) {
  const outputItems: Output[] = [];

  for (let i = 0; i < inputItems.length; i++) {
    const children = doJob(inputItems.slice(i, inputItems.length), inputItems[i].parent_id)
    .filter(i => i.parent_id === parent_id);
    
    outputItems.push({...item, children});
  }

  return outputItems;
}","Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id."
source_code_040,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 429}, 'ica_id': {0: 4156}, 'question': {0: 'Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id.'}, 'rules': {0: ['The function must handle an arbitrary number of nesting levels.', ""Task objects should be immutable; do not modify the input array's objects."", 'The solution should be optimized for readability and performance.']}, 'examples': {0: ""Input: [{ id: 1, title: 'Task 1', parent_id: null }, { id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]\nOutput: [{ id: 1, title: 'Task 1', parent_id: null, children: [{ id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 2700}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 225.0}}","interface Task {
    id: number;
    title: string;
    parent_id: number | null;
    children?: Task[];
}

function buildTaskTree(tasks: Task[]): Task[] {
    const tasksMap = tasks.reduce((acc, task) => {
        acc[task.id] = { ...task, children: [] };
        return acc;
    }, {} as { [key: number]: Task });

    const rootTasks: Task[] = [];

    tasks.forEach(task => {
        const { id, parent_id } = task;
        if (parent_id === null) {
            rootTasks.push(tasksMap[id]);
        } else {
            if (tasksMap[parent_id]) {
                tasksMap[parent_id].children.push(tasksMap[id]);
            }
        }
    });

    return rootTasks;
}

// Test the function with the provided example
const inputTasks: Task[] = [
    { id: 1, title: 'Task 1', parent_id: null },
    { id: 2, title: 'Task 2', parent_id: 1 },
    { id: 3, title: 'Task 3', parent_id: 1 }
];
const outputTasks: Task[] = buildTaskTree(inputTasks);
console.log(outputTasks);
","interface Input {
  id: number;
  title: string;
  parent_id: number | null;  
}

interface Output extends Input {
  children?: Output[];  
}

function doJob(inputItems: Input[], parent_id?: number) {
  const outputItems: Output[] = [];

  for (let i = 0; i < inputItems.length; i++) {
    const children = doJob(inputItems.slice(i, inputItems.length), inputItems[i].parent_id)
    .filter(i => i.parent_id === parent_id);
    
    outputItems.push({...item, children});
  }

  return outputItems;
}","Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id."
source_code_040,gpt-4_00,0.2,"{'ic_id': {0: 429}, 'ica_id': {0: 4156}, 'question': {0: 'Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id.'}, 'rules': {0: ['The function must handle an arbitrary number of nesting levels.', ""Task objects should be immutable; do not modify the input array's objects."", 'The solution should be optimized for readability and performance.']}, 'examples': {0: ""Input: [{ id: 1, title: 'Task 1', parent_id: null }, { id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]\nOutput: [{ id: 1, title: 'Task 1', parent_id: null, children: [{ id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 2700}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 225.0}}","interface Task {
    id: number;
    title: string;
    parent_id: number | null;
    children?: Task[];
}

function buildTaskTree(tasks: Task[]): Task[] {
    const tasksMap = tasks.reduce((acc, task) => {
        acc[task.id] = { ...task, children: [] };
        return acc;
    }, {} as { [key: number]: Task });

    const rootTasks: Task[] = [];

    tasks.forEach(task => {
        const { id, parent_id } = task;
        if (parent_id === null) {
            rootTasks.push(tasksMap[id]);
        } else {
            if (tasksMap[parent_id]) {
                tasksMap[parent_id].children.push(tasksMap[id]);
            }
        }
    });

    return rootTasks;
}

// Test the function with the provided example
const inputTasks: Task[] = [
    { id: 1, title: 'Task 1', parent_id: null },
    { id: 2, title: 'Task 2', parent_id: 1 },
    { id: 3, title: 'Task 3', parent_id: 1 }
];
const outputTasks: Task[] = buildTaskTree(inputTasks);
console.log(outputTasks);
","interface Input {
  id: number;
  title: string;
  parent_id: number | null;  
}

interface Output extends Input {
  children?: Output[];  
}

function doJob(inputItems: Input[], parent_id?: number) {
  const outputItems: Output[] = [];

  for (let i = 0; i < inputItems.length; i++) {
    const children = doJob(inputItems.slice(i, inputItems.length), inputItems[i].parent_id)
    .filter(i => i.parent_id === parent_id);
    
    outputItems.push({...item, children});
  }

  return outputItems;
}","Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id."
source_code_040,gpt-4_01,0.2,"{'ic_id': {0: 429}, 'ica_id': {0: 4156}, 'question': {0: 'Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id.'}, 'rules': {0: ['The function must handle an arbitrary number of nesting levels.', ""Task objects should be immutable; do not modify the input array's objects."", 'The solution should be optimized for readability and performance.']}, 'examples': {0: ""Input: [{ id: 1, title: 'Task 1', parent_id: null }, { id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]\nOutput: [{ id: 1, title: 'Task 1', parent_id: null, children: [{ id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 2700}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 225.0}}","interface Task {
    id: number;
    title: string;
    parent_id: number | null;
    children?: Task[];
}

function buildTaskTree(tasks: Task[]): Task[] {
    const tasksMap = tasks.reduce((acc, task) => {
        acc[task.id] = { ...task, children: [] };
        return acc;
    }, {} as { [key: number]: Task });

    const rootTasks: Task[] = [];

    tasks.forEach(task => {
        const { id, parent_id } = task;
        if (parent_id === null) {
            rootTasks.push(tasksMap[id]);
        } else {
            if (tasksMap[parent_id]) {
                tasksMap[parent_id].children.push(tasksMap[id]);
            }
        }
    });

    return rootTasks;
}

// Test the function with the provided example
const inputTasks: Task[] = [
    { id: 1, title: 'Task 1', parent_id: null },
    { id: 2, title: 'Task 2', parent_id: 1 },
    { id: 3, title: 'Task 3', parent_id: 1 }
];
const outputTasks: Task[] = buildTaskTree(inputTasks);
console.log(outputTasks);
","interface Input {
  id: number;
  title: string;
  parent_id: number | null;  
}

interface Output extends Input {
  children?: Output[];  
}

function doJob(inputItems: Input[], parent_id?: number) {
  const outputItems: Output[] = [];

  for (let i = 0; i < inputItems.length; i++) {
    const children = doJob(inputItems.slice(i, inputItems.length), inputItems[i].parent_id)
    .filter(i => i.parent_id === parent_id);
    
    outputItems.push({...item, children});
  }

  return outputItems;
}","Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id."
source_code_040,gpt-4-turbo_00,0.2,"{'ic_id': {0: 429}, 'ica_id': {0: 4156}, 'question': {0: 'Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id.'}, 'rules': {0: ['The function must handle an arbitrary number of nesting levels.', ""Task objects should be immutable; do not modify the input array's objects."", 'The solution should be optimized for readability and performance.']}, 'examples': {0: ""Input: [{ id: 1, title: 'Task 1', parent_id: null }, { id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]\nOutput: [{ id: 1, title: 'Task 1', parent_id: null, children: [{ id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 2700}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 225.0}}","interface Task {
    id: number;
    title: string;
    parent_id: number | null;
    children?: Task[];
}

function buildTaskTree(tasks: Task[]): Task[] {
    const tasksMap = tasks.reduce((acc, task) => {
        acc[task.id] = { ...task, children: [] };
        return acc;
    }, {} as { [key: number]: Task });

    const rootTasks: Task[] = [];

    tasks.forEach(task => {
        const { id, parent_id } = task;
        if (parent_id === null) {
            rootTasks.push(tasksMap[id]);
        } else {
            if (tasksMap[parent_id]) {
                tasksMap[parent_id].children.push(tasksMap[id]);
            }
        }
    });

    return rootTasks;
}

// Test the function with the provided example
const inputTasks: Task[] = [
    { id: 1, title: 'Task 1', parent_id: null },
    { id: 2, title: 'Task 2', parent_id: 1 },
    { id: 3, title: 'Task 3', parent_id: 1 }
];
const outputTasks: Task[] = buildTaskTree(inputTasks);
console.log(outputTasks);
","interface Input {
  id: number;
  title: string;
  parent_id: number | null;  
}

interface Output extends Input {
  children?: Output[];  
}

function doJob(inputItems: Input[], parent_id?: number) {
  const outputItems: Output[] = [];

  for (let i = 0; i < inputItems.length; i++) {
    const children = doJob(inputItems.slice(i, inputItems.length), inputItems[i].parent_id)
    .filter(i => i.parent_id === parent_id);
    
    outputItems.push({...item, children});
  }

  return outputItems;
}","Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id."
source_code_040,gpt-4-turbo_01,0.2,"{'ic_id': {0: 429}, 'ica_id': {0: 4156}, 'question': {0: 'Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id.'}, 'rules': {0: ['The function must handle an arbitrary number of nesting levels.', ""Task objects should be immutable; do not modify the input array's objects."", 'The solution should be optimized for readability and performance.']}, 'examples': {0: ""Input: [{ id: 1, title: 'Task 1', parent_id: null }, { id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]\nOutput: [{ id: 1, title: 'Task 1', parent_id: null, children: [{ id: 2, title: 'Task 2', parent_id: 1 }, { id: 3, title: 'Task 3', parent_id: 1 }]}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 2700}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 225.0}}","interface Task {
    id: number;
    title: string;
    parent_id: number | null;
    children?: Task[];
}

function buildTaskTree(tasks: Task[]): Task[] {
    const tasksMap = tasks.reduce((acc, task) => {
        acc[task.id] = { ...task, children: [] };
        return acc;
    }, {} as { [key: number]: Task });

    const rootTasks: Task[] = [];

    tasks.forEach(task => {
        const { id, parent_id } = task;
        if (parent_id === null) {
            rootTasks.push(tasksMap[id]);
        } else {
            if (tasksMap[parent_id]) {
                tasksMap[parent_id].children.push(tasksMap[id]);
            }
        }
    });

    return rootTasks;
}

// Test the function with the provided example
const inputTasks: Task[] = [
    { id: 1, title: 'Task 1', parent_id: null },
    { id: 2, title: 'Task 2', parent_id: 1 },
    { id: 3, title: 'Task 3', parent_id: 1 }
];
const outputTasks: Task[] = buildTaskTree(inputTasks);
console.log(outputTasks);
","interface Input {
  id: number;
  title: string;
  parent_id: number | null;  
}

interface Output extends Input {
  children?: Output[];  
}

function doJob(inputItems: Input[], parent_id?: number) {
  const outputItems: Output[] = [];

  for (let i = 0; i < inputItems.length; i++) {
    const children = doJob(inputItems.slice(i, inputItems.length), inputItems[i].parent_id)
    .filter(i => i.parent_id === parent_id);
    
    outputItems.push({...item, children});
  }

  return outputItems;
}","Design and implement a function in TypeScript that converts a flat array of objects representing tasks with parent-child relationships into a nested tree structure. Each task object has an id, title, and parent_id, where a null parent_id indicates a root-level task. Tasks should be nested within their respective parent tasks according to their parent_id."
source_code_041,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 430}, 'ica_id': {0: 4205}, 'question': {0: ""Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order.""}, 'rules': {0: [""Do not use Angular's built-in pipes or third-party libraries"", 'Ensure the pipe is generic and works for any object key', 'Implement error handling for invalid input data']}, 'examples': {0: ""Input: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'asc' Output: [{name: 'Alice'}, {name: 'Bob'}]\nInput: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'desc' Output: [{name: 'Bob'}, {name: 'Alice'}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 872}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'orderBy'
})
export class OrderByPipe implements PipeTransform {
  transform(array: any[], key: string, order: 'asc' | 'desc'): any[] {
    if (!Array.isArray(array) || !key || (order !== 'asc' && order !== 'desc')) {
      console.error('Invalid input data');
      return array;
    }

    const compareFn = (a: any, b: any): number => {
      if (a[key] < b[key]) {
        return order === 'asc' ? -1 : 1;
      }
      if (a[key] > b[key]) {
        return order === 'asc' ? 1 : -1;
      }
      return 0;
    };

    return array.slice().sort(compareFn);
  }
}
","import { Pipe, PipeTransform } from '@angular/core';

export interface InputType {
  name:string;
}

@Pipe({
  standalone: true,
  name: 'OrderByPipe',
})
export class OrderByPipe implements PipeTransform {
transform(input: InputType[], sortType: string): InputType[] {
    input.sort(this.compareByName);
  }

  compareByName(a, b) {
    return sortType === 'asc' ?  a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
  }
}","Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order."
source_code_041,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 430}, 'ica_id': {0: 4205}, 'question': {0: ""Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order.""}, 'rules': {0: [""Do not use Angular's built-in pipes or third-party libraries"", 'Ensure the pipe is generic and works for any object key', 'Implement error handling for invalid input data']}, 'examples': {0: ""Input: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'asc' Output: [{name: 'Alice'}, {name: 'Bob'}]\nInput: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'desc' Output: [{name: 'Bob'}, {name: 'Alice'}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 872}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'orderBy'
})
export class OrderByPipe implements PipeTransform {
  transform(array: any[], key: string, order: 'asc' | 'desc'): any[] {
    if (!Array.isArray(array) || !key || (order !== 'asc' && order !== 'desc')) {
      console.error('Invalid input data');
      return array;
    }

    const compareFn = (a: any, b: any): number => {
      if (a[key] < b[key]) {
        return order === 'asc' ? -1 : 1;
      }
      if (a[key] > b[key]) {
        return order === 'asc' ? 1 : -1;
      }
      return 0;
    };

    return array.slice().sort(compareFn);
  }
}
","import { Pipe, PipeTransform } from '@angular/core';

export interface InputType {
  name:string;
}

@Pipe({
  standalone: true,
  name: 'OrderByPipe',
})
export class OrderByPipe implements PipeTransform {
transform(input: InputType[], sortType: string): InputType[] {
    input.sort(this.compareByName);
  }

  compareByName(a, b) {
    return sortType === 'asc' ?  a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
  }
}","Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order."
source_code_041,gpt-4_00,0.1,"{'ic_id': {0: 430}, 'ica_id': {0: 4205}, 'question': {0: ""Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order.""}, 'rules': {0: [""Do not use Angular's built-in pipes or third-party libraries"", 'Ensure the pipe is generic and works for any object key', 'Implement error handling for invalid input data']}, 'examples': {0: ""Input: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'asc' Output: [{name: 'Alice'}, {name: 'Bob'}]\nInput: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'desc' Output: [{name: 'Bob'}, {name: 'Alice'}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 872}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'orderBy'
})
export class OrderByPipe implements PipeTransform {
  transform(array: any[], key: string, order: 'asc' | 'desc'): any[] {
    if (!Array.isArray(array) || !key || (order !== 'asc' && order !== 'desc')) {
      console.error('Invalid input data');
      return array;
    }

    const compareFn = (a: any, b: any): number => {
      if (a[key] < b[key]) {
        return order === 'asc' ? -1 : 1;
      }
      if (a[key] > b[key]) {
        return order === 'asc' ? 1 : -1;
      }
      return 0;
    };

    return array.slice().sort(compareFn);
  }
}
","import { Pipe, PipeTransform } from '@angular/core';

export interface InputType {
  name:string;
}

@Pipe({
  standalone: true,
  name: 'OrderByPipe',
})
export class OrderByPipe implements PipeTransform {
transform(input: InputType[], sortType: string): InputType[] {
    input.sort(this.compareByName);
  }

  compareByName(a, b) {
    return sortType === 'asc' ?  a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
  }
}","Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order."
source_code_041,gpt-4_01,0.1,"{'ic_id': {0: 430}, 'ica_id': {0: 4205}, 'question': {0: ""Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order.""}, 'rules': {0: [""Do not use Angular's built-in pipes or third-party libraries"", 'Ensure the pipe is generic and works for any object key', 'Implement error handling for invalid input data']}, 'examples': {0: ""Input: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'asc' Output: [{name: 'Alice'}, {name: 'Bob'}]\nInput: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'desc' Output: [{name: 'Bob'}, {name: 'Alice'}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 872}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'orderBy'
})
export class OrderByPipe implements PipeTransform {
  transform(array: any[], key: string, order: 'asc' | 'desc'): any[] {
    if (!Array.isArray(array) || !key || (order !== 'asc' && order !== 'desc')) {
      console.error('Invalid input data');
      return array;
    }

    const compareFn = (a: any, b: any): number => {
      if (a[key] < b[key]) {
        return order === 'asc' ? -1 : 1;
      }
      if (a[key] > b[key]) {
        return order === 'asc' ? 1 : -1;
      }
      return 0;
    };

    return array.slice().sort(compareFn);
  }
}
","import { Pipe, PipeTransform } from '@angular/core';

export interface InputType {
  name:string;
}

@Pipe({
  standalone: true,
  name: 'OrderByPipe',
})
export class OrderByPipe implements PipeTransform {
transform(input: InputType[], sortType: string): InputType[] {
    input.sort(this.compareByName);
  }

  compareByName(a, b) {
    return sortType === 'asc' ?  a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
  }
}","Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order."
source_code_041,gpt-4-turbo_00,0.1,"{'ic_id': {0: 430}, 'ica_id': {0: 4205}, 'question': {0: ""Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order.""}, 'rules': {0: [""Do not use Angular's built-in pipes or third-party libraries"", 'Ensure the pipe is generic and works for any object key', 'Implement error handling for invalid input data']}, 'examples': {0: ""Input: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'asc' Output: [{name: 'Alice'}, {name: 'Bob'}]\nInput: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'desc' Output: [{name: 'Bob'}, {name: 'Alice'}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 872}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'orderBy'
})
export class OrderByPipe implements PipeTransform {
  transform(array: any[], key: string, order: 'asc' | 'desc'): any[] {
    if (!Array.isArray(array) || !key || (order !== 'asc' && order !== 'desc')) {
      console.error('Invalid input data');
      return array;
    }

    const compareFn = (a: any, b: any): number => {
      if (a[key] < b[key]) {
        return order === 'asc' ? -1 : 1;
      }
      if (a[key] > b[key]) {
        return order === 'asc' ? 1 : -1;
      }
      return 0;
    };

    return array.slice().sort(compareFn);
  }
}
","import { Pipe, PipeTransform } from '@angular/core';

export interface InputType {
  name:string;
}

@Pipe({
  standalone: true,
  name: 'OrderByPipe',
})
export class OrderByPipe implements PipeTransform {
transform(input: InputType[], sortType: string): InputType[] {
    input.sort(this.compareByName);
  }

  compareByName(a, b) {
    return sortType === 'asc' ?  a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
  }
}","Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order."
source_code_041,gpt-4-turbo_01,0.1,"{'ic_id': {0: 430}, 'ica_id': {0: 4205}, 'question': {0: ""Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order.""}, 'rules': {0: [""Do not use Angular's built-in pipes or third-party libraries"", 'Ensure the pipe is generic and works for any object key', 'Implement error handling for invalid input data']}, 'examples': {0: ""Input: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'asc' Output: [{name: 'Alice'}, {name: 'Bob'}]\nInput: [{name: 'Alice'}, {name: 'Bob'}], key: 'name', order: 'desc' Output: [{name: 'Bob'}, {name: 'Alice'}]""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 872}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'orderBy'
})
export class OrderByPipe implements PipeTransform {
  transform(array: any[], key: string, order: 'asc' | 'desc'): any[] {
    if (!Array.isArray(array) || !key || (order !== 'asc' && order !== 'desc')) {
      console.error('Invalid input data');
      return array;
    }

    const compareFn = (a: any, b: any): number => {
      if (a[key] < b[key]) {
        return order === 'asc' ? -1 : 1;
      }
      if (a[key] > b[key]) {
        return order === 'asc' ? 1 : -1;
      }
      return 0;
    };

    return array.slice().sort(compareFn);
  }
}
","import { Pipe, PipeTransform } from '@angular/core';

export interface InputType {
  name:string;
}

@Pipe({
  standalone: true,
  name: 'OrderByPipe',
})
export class OrderByPipe implements PipeTransform {
transform(input: InputType[], sortType: string): InputType[] {
    input.sort(this.compareByName);
  }

  compareByName(a, b) {
    return sortType === 'asc' ?  a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
  }
}","Implement a custom 'OrderByPipe' in Angular which takes an array of objects and a key, and returns a sorted array based on the given key. The pipe should be able to handle sorting in ascending and descending order."
source_code_042,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 419}, 'ica_id': {0: 4272}, 'question': {0: ""Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text.""}, 'rules': {0: ['Do not use any pre-built Markdown editors.', 'Handle edge cases with partial Markdown tags in selection.', 'Must use undoable state operations for change tracking.']}, 'examples': {0: ""Input: editorContent = 'This is **an** example', selectedText = 'is **an** ex', style = 'bold'\\nOutput: editorContent = 'This **is an ex**ample'""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 234}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 225.0}}","interface EditorState {
  content: string;
  selectionStart: number;
  selectionEnd: number;
}

class WysiwygEditor {
  private state: EditorState;
  private history: EditorState[];

  constructor(initialContent: string) {
    this.state = { content: initialContent, selectionStart: 0, selectionEnd: 0 };
    this.history = [this.state];
  }

  applyMarkdownStyle(selectedText: string, style: 'bold' | 'italic'): void {
    const { content, selectionStart, selectionEnd } = this.state;
    const startTag = style === 'bold' ? '**' : '_';
    const endTag = startTag;

    const beforeSelection = content.slice(0, selectionStart);
    const selectedTextWithTags = `${startTag}${selectedText}${endTag}`;
    const afterSelection = content.slice(selectionEnd);

    const updatedContent = beforeSelection + selectedTextWithTags + afterSelection;
    
    this.updateState({ content: updatedContent, selectionStart: 0, selectionEnd: 0 });
  }

  updateState(newState: EditorState): void {
    this.state = newState;
    this.history.push(this.state);
  }

  undo(): void {
    if (this.history.length > 1) {
      this.history.pop();
      this.state = this.history[this.history.length - 1];
    }
  }
}

// Example usage
const editor = new WysiwygEditor(""This is **an** example"");
editor.applyMarkdownStyle(""is **an** ex"", ""bold"");
console.log(editor.state.content); // Output: ""This **is an ex**ample""
","interface ContentState {
  blocks: Block[];
}

interface Block {
  key: string;
  children?: Child[];
  type: string;
  data?: {
    markdown?: boolean;
    text?: string;
    bold?: boolean;
    italic?: boolean;
  };
}

interface Child {
  text: string;
  entityRanges: EntityRange[];
}

interface EntityRange {
  offset: number;
  length: number;
  key: string;
}

export default class App extends React.Component {
  private editorRef: React.RefObject<Editor>;
  private store: DraftLocalStorageState;

  constructor(props: Props) {
    super(props);
    this.editorRef = React.createRef();
    this.store = DraftLocalStorageState('draftjs-markdown-transform');

    this.state = {
      editorContent: '',
      selectedText: '',
      style: '' as 'bold' | 'italic',
    };

    this.handleChange = this.handleChange.bind(this);
    this.applyMarkdownTransform = this.applyMarkdownTransform.bind(this);
  }

  componentDidUpdate(_prevProps: Props, _prevState: Readonly<{}>, snapshot: Snapshot) {
    if (snapshot?.hasChanged('selectedText')) {
      this.applyMarkdownTransform();
    }
  }

  applyMarkdownTransform() {
    const { selectedText, style } = this.state;
    const { editorState } = this.editorRef.current!;
    const contentBlockMap = EditorState.contentBlocks(editorState);
    const transformedContent = transformSelectedText(contentBlockMap, selectedText, style);

    this.store.replace(convertFromRaw(transformedContent));
    this.setState({ editorContent: JSON.stringify(toJSON(this.store.createEmpty()), undefined, 2) });
  }

  // ...
}

function transformSelectedText(
  contentBlockMap: Map<string, Block>,
  selectedText: string,
  style: 'bold' | 'italic'
): ContentState {
  //....
}","Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text."
source_code_042,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 419}, 'ica_id': {0: 4272}, 'question': {0: ""Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text.""}, 'rules': {0: ['Do not use any pre-built Markdown editors.', 'Handle edge cases with partial Markdown tags in selection.', 'Must use undoable state operations for change tracking.']}, 'examples': {0: ""Input: editorContent = 'This is **an** example', selectedText = 'is **an** ex', style = 'bold'\\nOutput: editorContent = 'This **is an ex**ample'""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 234}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 225.0}}","interface EditorState {
  content: string;
  selectionStart: number;
  selectionEnd: number;
}

class WysiwygEditor {
  private state: EditorState;
  private history: EditorState[];

  constructor(initialContent: string) {
    this.state = { content: initialContent, selectionStart: 0, selectionEnd: 0 };
    this.history = [this.state];
  }

  applyMarkdownStyle(selectedText: string, style: 'bold' | 'italic'): void {
    const { content, selectionStart, selectionEnd } = this.state;
    const startTag = style === 'bold' ? '**' : '_';
    const endTag = startTag;

    const beforeSelection = content.slice(0, selectionStart);
    const selectedTextWithTags = `${startTag}${selectedText}${endTag}`;
    const afterSelection = content.slice(selectionEnd);

    const updatedContent = beforeSelection + selectedTextWithTags + afterSelection;
    
    this.updateState({ content: updatedContent, selectionStart: 0, selectionEnd: 0 });
  }

  updateState(newState: EditorState): void {
    this.state = newState;
    this.history.push(this.state);
  }

  undo(): void {
    if (this.history.length > 1) {
      this.history.pop();
      this.state = this.history[this.history.length - 1];
    }
  }
}

// Example usage
const editor = new WysiwygEditor(""This is **an** example"");
editor.applyMarkdownStyle(""is **an** ex"", ""bold"");
console.log(editor.state.content); // Output: ""This **is an ex**ample""
","interface ContentState {
  blocks: Block[];
}

interface Block {
  key: string;
  children?: Child[];
  type: string;
  data?: {
    markdown?: boolean;
    text?: string;
    bold?: boolean;
    italic?: boolean;
  };
}

interface Child {
  text: string;
  entityRanges: EntityRange[];
}

interface EntityRange {
  offset: number;
  length: number;
  key: string;
}

export default class App extends React.Component {
  private editorRef: React.RefObject<Editor>;
  private store: DraftLocalStorageState;

  constructor(props: Props) {
    super(props);
    this.editorRef = React.createRef();
    this.store = DraftLocalStorageState('draftjs-markdown-transform');

    this.state = {
      editorContent: '',
      selectedText: '',
      style: '' as 'bold' | 'italic',
    };

    this.handleChange = this.handleChange.bind(this);
    this.applyMarkdownTransform = this.applyMarkdownTransform.bind(this);
  }

  componentDidUpdate(_prevProps: Props, _prevState: Readonly<{}>, snapshot: Snapshot) {
    if (snapshot?.hasChanged('selectedText')) {
      this.applyMarkdownTransform();
    }
  }

  applyMarkdownTransform() {
    const { selectedText, style } = this.state;
    const { editorState } = this.editorRef.current!;
    const contentBlockMap = EditorState.contentBlocks(editorState);
    const transformedContent = transformSelectedText(contentBlockMap, selectedText, style);

    this.store.replace(convertFromRaw(transformedContent));
    this.setState({ editorContent: JSON.stringify(toJSON(this.store.createEmpty()), undefined, 2) });
  }

  // ...
}

function transformSelectedText(
  contentBlockMap: Map<string, Block>,
  selectedText: string,
  style: 'bold' | 'italic'
): ContentState {
  //....
}","Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text."
source_code_042,gpt-4_00,0.2,"{'ic_id': {0: 419}, 'ica_id': {0: 4272}, 'question': {0: ""Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text.""}, 'rules': {0: ['Do not use any pre-built Markdown editors.', 'Handle edge cases with partial Markdown tags in selection.', 'Must use undoable state operations for change tracking.']}, 'examples': {0: ""Input: editorContent = 'This is **an** example', selectedText = 'is **an** ex', style = 'bold'\\nOutput: editorContent = 'This **is an ex**ample'""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 234}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 225.0}}","interface EditorState {
  content: string;
  selectionStart: number;
  selectionEnd: number;
}

class WysiwygEditor {
  private state: EditorState;
  private history: EditorState[];

  constructor(initialContent: string) {
    this.state = { content: initialContent, selectionStart: 0, selectionEnd: 0 };
    this.history = [this.state];
  }

  applyMarkdownStyle(selectedText: string, style: 'bold' | 'italic'): void {
    const { content, selectionStart, selectionEnd } = this.state;
    const startTag = style === 'bold' ? '**' : '_';
    const endTag = startTag;

    const beforeSelection = content.slice(0, selectionStart);
    const selectedTextWithTags = `${startTag}${selectedText}${endTag}`;
    const afterSelection = content.slice(selectionEnd);

    const updatedContent = beforeSelection + selectedTextWithTags + afterSelection;
    
    this.updateState({ content: updatedContent, selectionStart: 0, selectionEnd: 0 });
  }

  updateState(newState: EditorState): void {
    this.state = newState;
    this.history.push(this.state);
  }

  undo(): void {
    if (this.history.length > 1) {
      this.history.pop();
      this.state = this.history[this.history.length - 1];
    }
  }
}

// Example usage
const editor = new WysiwygEditor(""This is **an** example"");
editor.applyMarkdownStyle(""is **an** ex"", ""bold"");
console.log(editor.state.content); // Output: ""This **is an ex**ample""
","interface ContentState {
  blocks: Block[];
}

interface Block {
  key: string;
  children?: Child[];
  type: string;
  data?: {
    markdown?: boolean;
    text?: string;
    bold?: boolean;
    italic?: boolean;
  };
}

interface Child {
  text: string;
  entityRanges: EntityRange[];
}

interface EntityRange {
  offset: number;
  length: number;
  key: string;
}

export default class App extends React.Component {
  private editorRef: React.RefObject<Editor>;
  private store: DraftLocalStorageState;

  constructor(props: Props) {
    super(props);
    this.editorRef = React.createRef();
    this.store = DraftLocalStorageState('draftjs-markdown-transform');

    this.state = {
      editorContent: '',
      selectedText: '',
      style: '' as 'bold' | 'italic',
    };

    this.handleChange = this.handleChange.bind(this);
    this.applyMarkdownTransform = this.applyMarkdownTransform.bind(this);
  }

  componentDidUpdate(_prevProps: Props, _prevState: Readonly<{}>, snapshot: Snapshot) {
    if (snapshot?.hasChanged('selectedText')) {
      this.applyMarkdownTransform();
    }
  }

  applyMarkdownTransform() {
    const { selectedText, style } = this.state;
    const { editorState } = this.editorRef.current!;
    const contentBlockMap = EditorState.contentBlocks(editorState);
    const transformedContent = transformSelectedText(contentBlockMap, selectedText, style);

    this.store.replace(convertFromRaw(transformedContent));
    this.setState({ editorContent: JSON.stringify(toJSON(this.store.createEmpty()), undefined, 2) });
  }

  // ...
}

function transformSelectedText(
  contentBlockMap: Map<string, Block>,
  selectedText: string,
  style: 'bold' | 'italic'
): ContentState {
  //....
}","Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text."
source_code_042,gpt-4_01,0.2,"{'ic_id': {0: 419}, 'ica_id': {0: 4272}, 'question': {0: ""Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text.""}, 'rules': {0: ['Do not use any pre-built Markdown editors.', 'Handle edge cases with partial Markdown tags in selection.', 'Must use undoable state operations for change tracking.']}, 'examples': {0: ""Input: editorContent = 'This is **an** example', selectedText = 'is **an** ex', style = 'bold'\\nOutput: editorContent = 'This **is an ex**ample'""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 234}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 225.0}}","interface EditorState {
  content: string;
  selectionStart: number;
  selectionEnd: number;
}

class WysiwygEditor {
  private state: EditorState;
  private history: EditorState[];

  constructor(initialContent: string) {
    this.state = { content: initialContent, selectionStart: 0, selectionEnd: 0 };
    this.history = [this.state];
  }

  applyMarkdownStyle(selectedText: string, style: 'bold' | 'italic'): void {
    const { content, selectionStart, selectionEnd } = this.state;
    const startTag = style === 'bold' ? '**' : '_';
    const endTag = startTag;

    const beforeSelection = content.slice(0, selectionStart);
    const selectedTextWithTags = `${startTag}${selectedText}${endTag}`;
    const afterSelection = content.slice(selectionEnd);

    const updatedContent = beforeSelection + selectedTextWithTags + afterSelection;
    
    this.updateState({ content: updatedContent, selectionStart: 0, selectionEnd: 0 });
  }

  updateState(newState: EditorState): void {
    this.state = newState;
    this.history.push(this.state);
  }

  undo(): void {
    if (this.history.length > 1) {
      this.history.pop();
      this.state = this.history[this.history.length - 1];
    }
  }
}

// Example usage
const editor = new WysiwygEditor(""This is **an** example"");
editor.applyMarkdownStyle(""is **an** ex"", ""bold"");
console.log(editor.state.content); // Output: ""This **is an ex**ample""
","interface ContentState {
  blocks: Block[];
}

interface Block {
  key: string;
  children?: Child[];
  type: string;
  data?: {
    markdown?: boolean;
    text?: string;
    bold?: boolean;
    italic?: boolean;
  };
}

interface Child {
  text: string;
  entityRanges: EntityRange[];
}

interface EntityRange {
  offset: number;
  length: number;
  key: string;
}

export default class App extends React.Component {
  private editorRef: React.RefObject<Editor>;
  private store: DraftLocalStorageState;

  constructor(props: Props) {
    super(props);
    this.editorRef = React.createRef();
    this.store = DraftLocalStorageState('draftjs-markdown-transform');

    this.state = {
      editorContent: '',
      selectedText: '',
      style: '' as 'bold' | 'italic',
    };

    this.handleChange = this.handleChange.bind(this);
    this.applyMarkdownTransform = this.applyMarkdownTransform.bind(this);
  }

  componentDidUpdate(_prevProps: Props, _prevState: Readonly<{}>, snapshot: Snapshot) {
    if (snapshot?.hasChanged('selectedText')) {
      this.applyMarkdownTransform();
    }
  }

  applyMarkdownTransform() {
    const { selectedText, style } = this.state;
    const { editorState } = this.editorRef.current!;
    const contentBlockMap = EditorState.contentBlocks(editorState);
    const transformedContent = transformSelectedText(contentBlockMap, selectedText, style);

    this.store.replace(convertFromRaw(transformedContent));
    this.setState({ editorContent: JSON.stringify(toJSON(this.store.createEmpty()), undefined, 2) });
  }

  // ...
}

function transformSelectedText(
  contentBlockMap: Map<string, Block>,
  selectedText: string,
  style: 'bold' | 'italic'
): ContentState {
  //....
}","Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text."
source_code_042,gpt-4-turbo_00,0.1,"{'ic_id': {0: 419}, 'ica_id': {0: 4272}, 'question': {0: ""Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text.""}, 'rules': {0: ['Do not use any pre-built Markdown editors.', 'Handle edge cases with partial Markdown tags in selection.', 'Must use undoable state operations for change tracking.']}, 'examples': {0: ""Input: editorContent = 'This is **an** example', selectedText = 'is **an** ex', style = 'bold'\\nOutput: editorContent = 'This **is an ex**ample'""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 234}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 225.0}}","interface EditorState {
  content: string;
  selectionStart: number;
  selectionEnd: number;
}

class WysiwygEditor {
  private state: EditorState;
  private history: EditorState[];

  constructor(initialContent: string) {
    this.state = { content: initialContent, selectionStart: 0, selectionEnd: 0 };
    this.history = [this.state];
  }

  applyMarkdownStyle(selectedText: string, style: 'bold' | 'italic'): void {
    const { content, selectionStart, selectionEnd } = this.state;
    const startTag = style === 'bold' ? '**' : '_';
    const endTag = startTag;

    const beforeSelection = content.slice(0, selectionStart);
    const selectedTextWithTags = `${startTag}${selectedText}${endTag}`;
    const afterSelection = content.slice(selectionEnd);

    const updatedContent = beforeSelection + selectedTextWithTags + afterSelection;
    
    this.updateState({ content: updatedContent, selectionStart: 0, selectionEnd: 0 });
  }

  updateState(newState: EditorState): void {
    this.state = newState;
    this.history.push(this.state);
  }

  undo(): void {
    if (this.history.length > 1) {
      this.history.pop();
      this.state = this.history[this.history.length - 1];
    }
  }
}

// Example usage
const editor = new WysiwygEditor(""This is **an** example"");
editor.applyMarkdownStyle(""is **an** ex"", ""bold"");
console.log(editor.state.content); // Output: ""This **is an ex**ample""
","interface ContentState {
  blocks: Block[];
}

interface Block {
  key: string;
  children?: Child[];
  type: string;
  data?: {
    markdown?: boolean;
    text?: string;
    bold?: boolean;
    italic?: boolean;
  };
}

interface Child {
  text: string;
  entityRanges: EntityRange[];
}

interface EntityRange {
  offset: number;
  length: number;
  key: string;
}

export default class App extends React.Component {
  private editorRef: React.RefObject<Editor>;
  private store: DraftLocalStorageState;

  constructor(props: Props) {
    super(props);
    this.editorRef = React.createRef();
    this.store = DraftLocalStorageState('draftjs-markdown-transform');

    this.state = {
      editorContent: '',
      selectedText: '',
      style: '' as 'bold' | 'italic',
    };

    this.handleChange = this.handleChange.bind(this);
    this.applyMarkdownTransform = this.applyMarkdownTransform.bind(this);
  }

  componentDidUpdate(_prevProps: Props, _prevState: Readonly<{}>, snapshot: Snapshot) {
    if (snapshot?.hasChanged('selectedText')) {
      this.applyMarkdownTransform();
    }
  }

  applyMarkdownTransform() {
    const { selectedText, style } = this.state;
    const { editorState } = this.editorRef.current!;
    const contentBlockMap = EditorState.contentBlocks(editorState);
    const transformedContent = transformSelectedText(contentBlockMap, selectedText, style);

    this.store.replace(convertFromRaw(transformedContent));
    this.setState({ editorContent: JSON.stringify(toJSON(this.store.createEmpty()), undefined, 2) });
  }

  // ...
}

function transformSelectedText(
  contentBlockMap: Map<string, Block>,
  selectedText: string,
  style: 'bold' | 'italic'
): ContentState {
  //....
}","Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text."
source_code_042,gpt-4-turbo_01,0.1,"{'ic_id': {0: 419}, 'ica_id': {0: 4272}, 'question': {0: ""Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text.""}, 'rules': {0: ['Do not use any pre-built Markdown editors.', 'Handle edge cases with partial Markdown tags in selection.', 'Must use undoable state operations for change tracking.']}, 'examples': {0: ""Input: editorContent = 'This is **an** example', selectedText = 'is **an** ex', style = 'bold'\\nOutput: editorContent = 'This **is an ex**ample'""}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 234}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 225.0}}","interface EditorState {
  content: string;
  selectionStart: number;
  selectionEnd: number;
}

class WysiwygEditor {
  private state: EditorState;
  private history: EditorState[];

  constructor(initialContent: string) {
    this.state = { content: initialContent, selectionStart: 0, selectionEnd: 0 };
    this.history = [this.state];
  }

  applyMarkdownStyle(selectedText: string, style: 'bold' | 'italic'): void {
    const { content, selectionStart, selectionEnd } = this.state;
    const startTag = style === 'bold' ? '**' : '_';
    const endTag = startTag;

    const beforeSelection = content.slice(0, selectionStart);
    const selectedTextWithTags = `${startTag}${selectedText}${endTag}`;
    const afterSelection = content.slice(selectionEnd);

    const updatedContent = beforeSelection + selectedTextWithTags + afterSelection;
    
    this.updateState({ content: updatedContent, selectionStart: 0, selectionEnd: 0 });
  }

  updateState(newState: EditorState): void {
    this.state = newState;
    this.history.push(this.state);
  }

  undo(): void {
    if (this.history.length > 1) {
      this.history.pop();
      this.state = this.history[this.history.length - 1];
    }
  }
}

// Example usage
const editor = new WysiwygEditor(""This is **an** example"");
editor.applyMarkdownStyle(""is **an** ex"", ""bold"");
console.log(editor.state.content); // Output: ""This **is an ex**ample""
","interface ContentState {
  blocks: Block[];
}

interface Block {
  key: string;
  children?: Child[];
  type: string;
  data?: {
    markdown?: boolean;
    text?: string;
    bold?: boolean;
    italic?: boolean;
  };
}

interface Child {
  text: string;
  entityRanges: EntityRange[];
}

interface EntityRange {
  offset: number;
  length: number;
  key: string;
}

export default class App extends React.Component {
  private editorRef: React.RefObject<Editor>;
  private store: DraftLocalStorageState;

  constructor(props: Props) {
    super(props);
    this.editorRef = React.createRef();
    this.store = DraftLocalStorageState('draftjs-markdown-transform');

    this.state = {
      editorContent: '',
      selectedText: '',
      style: '' as 'bold' | 'italic',
    };

    this.handleChange = this.handleChange.bind(this);
    this.applyMarkdownTransform = this.applyMarkdownTransform.bind(this);
  }

  componentDidUpdate(_prevProps: Props, _prevState: Readonly<{}>, snapshot: Snapshot) {
    if (snapshot?.hasChanged('selectedText')) {
      this.applyMarkdownTransform();
    }
  }

  applyMarkdownTransform() {
    const { selectedText, style } = this.state;
    const { editorState } = this.editorRef.current!;
    const contentBlockMap = EditorState.contentBlocks(editorState);
    const transformedContent = transformSelectedText(contentBlockMap, selectedText, style);

    this.store.replace(convertFromRaw(transformedContent));
    this.setState({ editorContent: JSON.stringify(toJSON(this.store.createEmpty()), undefined, 2) });
  }

  // ...
}

function transformSelectedText(
  contentBlockMap: Map<string, Block>,
  selectedText: string,
  style: 'bold' | 'italic'
): ContentState {
  //....
}","Develop a feature for a WYSIWYG editor that allows users to select text and apply a Markdown transformation, such as bold or italic, with live preview. The solution should handle edge cases where the selected text includes part of an existing Markdown tag. Provide a function that updates the editor's state with the transformation applied to the selected text."
source_code_043,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 434}, 'ica_id': {0: 4292}, 'question': {0: ""Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer.""}, 'rules': {0: ['Must handle input validation', 'Weekly wage formula: (40 * hourly wage) + ((hours worked - 40) * (1.5 * hourly wage)) if over 40 hours']}, 'examples': {0: 'Input: { ""hourlyWage"": 15, ""hoursWorked"": 45 } Output: { ""weeklyWage"": 712.5 }'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 932}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","import { Controller, Post, Body, HttpException, HttpStatus } from '@nestjs/common';

interface WeeklyWageInput {
  hourlyWage: number;
  hoursWorked: number;
}

@Controller('calculate-weekly-wage')
export class WeeklyWageController {
  @Post()
  calculateWeeklyWage(@Body() data: WeeklyWageInput): { weeklyWage: number } {
    // Input validation
    if (data.hourlyWage <= 0 || data.hoursWorked <= 0 || !Number.isInteger(data.hoursWorked)) {
      throw new HttpException('Invalid input. Hourly wage must be positive and hours worked must be a positive integer', HttpStatus.BAD_REQUEST);
    }

    const regularHours = Math.min(data.hoursWorked, 40);
    const overtimeHours = Math.max(data.hoursWorked - 40, 0);

    const weeklyWage = (regularHours * data.hourlyWage) + (overtimeHours * (1.5 * data.hourlyWage));

    return { weeklyWage };
  }
}
","// wage-input.dto.ts
import { IsNumber, IsPositive } from 'class-validator';

export class WageInputDto {
  @IsNumber()
  @IsPositive()
  hourlyWage: number;

  @IsNumber()
  @IsPositive()
  hoursWorked: number;
}

// It will handle the input validation too.


// employee.controller.ts
import { Body, Controller, Post } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';
import { EmployeeService } from './employee.service';

@Controller('employee')
export class EmployeeController {
  constructor(private readonly employeeService: EmployeeService) {}

  @Post('/wage')
  async getWage(@Body() input: WageInputDto) {
    return this.employeeService.getWage(input);
  }
}

// employee.service.ts
import { Injectable } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';

const WEEKLY_HOURS = 40;

@Injectable()
export class EmployeeService {
  async getWage(input: WageInputDto) {
    let weeklyHours = 0;
    let overTimeHours = 0;
    let weeklyWage = 0;

    const hasDoneOverTime = input.hoursWorked > WEEKLY_HOURS;

    if (hasDoneOverTime) {
      weeklyHours = WEEKLY_HOURS;
      overTimeHours = input.hoursWorked - WEEKLY_HOURS;
    } else {
      weeklyHours = input.hoursWorked;
    }

    weeklyWage = weeklyHours * input.hourlyWage;

    if (hasDoneOverTime) {
      weeklyWage = weeklyWage + overTimeHours * (input.hourlyWage * 1.5);
    }

    return { weeklyWage };
  }
}","Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer."
source_code_043,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 434}, 'ica_id': {0: 4292}, 'question': {0: ""Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer.""}, 'rules': {0: ['Must handle input validation', 'Weekly wage formula: (40 * hourly wage) + ((hours worked - 40) * (1.5 * hourly wage)) if over 40 hours']}, 'examples': {0: 'Input: { ""hourlyWage"": 15, ""hoursWorked"": 45 } Output: { ""weeklyWage"": 712.5 }'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 932}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","import { Controller, Post, Body, HttpException, HttpStatus } from '@nestjs/common';

interface WeeklyWageInput {
  hourlyWage: number;
  hoursWorked: number;
}

@Controller('calculate-weekly-wage')
export class WeeklyWageController {
  @Post()
  calculateWeeklyWage(@Body() data: WeeklyWageInput): { weeklyWage: number } {
    // Input validation
    if (data.hourlyWage <= 0 || data.hoursWorked <= 0 || !Number.isInteger(data.hoursWorked)) {
      throw new HttpException('Invalid input. Hourly wage must be positive and hours worked must be a positive integer', HttpStatus.BAD_REQUEST);
    }

    const regularHours = Math.min(data.hoursWorked, 40);
    const overtimeHours = Math.max(data.hoursWorked - 40, 0);

    const weeklyWage = (regularHours * data.hourlyWage) + (overtimeHours * (1.5 * data.hourlyWage));

    return { weeklyWage };
  }
}
","// wage-input.dto.ts
import { IsNumber, IsPositive } from 'class-validator';

export class WageInputDto {
  @IsNumber()
  @IsPositive()
  hourlyWage: number;

  @IsNumber()
  @IsPositive()
  hoursWorked: number;
}

// It will handle the input validation too.


// employee.controller.ts
import { Body, Controller, Post } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';
import { EmployeeService } from './employee.service';

@Controller('employee')
export class EmployeeController {
  constructor(private readonly employeeService: EmployeeService) {}

  @Post('/wage')
  async getWage(@Body() input: WageInputDto) {
    return this.employeeService.getWage(input);
  }
}

// employee.service.ts
import { Injectable } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';

const WEEKLY_HOURS = 40;

@Injectable()
export class EmployeeService {
  async getWage(input: WageInputDto) {
    let weeklyHours = 0;
    let overTimeHours = 0;
    let weeklyWage = 0;

    const hasDoneOverTime = input.hoursWorked > WEEKLY_HOURS;

    if (hasDoneOverTime) {
      weeklyHours = WEEKLY_HOURS;
      overTimeHours = input.hoursWorked - WEEKLY_HOURS;
    } else {
      weeklyHours = input.hoursWorked;
    }

    weeklyWage = weeklyHours * input.hourlyWage;

    if (hasDoneOverTime) {
      weeklyWage = weeklyWage + overTimeHours * (input.hourlyWage * 1.5);
    }

    return { weeklyWage };
  }
}","Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer."
source_code_043,gpt-4_00,0.4,"{'ic_id': {0: 434}, 'ica_id': {0: 4292}, 'question': {0: ""Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer.""}, 'rules': {0: ['Must handle input validation', 'Weekly wage formula: (40 * hourly wage) + ((hours worked - 40) * (1.5 * hourly wage)) if over 40 hours']}, 'examples': {0: 'Input: { ""hourlyWage"": 15, ""hoursWorked"": 45 } Output: { ""weeklyWage"": 712.5 }'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 932}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","import { Controller, Post, Body, HttpException, HttpStatus } from '@nestjs/common';

interface WeeklyWageInput {
  hourlyWage: number;
  hoursWorked: number;
}

@Controller('calculate-weekly-wage')
export class WeeklyWageController {
  @Post()
  calculateWeeklyWage(@Body() data: WeeklyWageInput): { weeklyWage: number } {
    // Input validation
    if (data.hourlyWage <= 0 || data.hoursWorked <= 0 || !Number.isInteger(data.hoursWorked)) {
      throw new HttpException('Invalid input. Hourly wage must be positive and hours worked must be a positive integer', HttpStatus.BAD_REQUEST);
    }

    const regularHours = Math.min(data.hoursWorked, 40);
    const overtimeHours = Math.max(data.hoursWorked - 40, 0);

    const weeklyWage = (regularHours * data.hourlyWage) + (overtimeHours * (1.5 * data.hourlyWage));

    return { weeklyWage };
  }
}
","// wage-input.dto.ts
import { IsNumber, IsPositive } from 'class-validator';

export class WageInputDto {
  @IsNumber()
  @IsPositive()
  hourlyWage: number;

  @IsNumber()
  @IsPositive()
  hoursWorked: number;
}

// It will handle the input validation too.


// employee.controller.ts
import { Body, Controller, Post } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';
import { EmployeeService } from './employee.service';

@Controller('employee')
export class EmployeeController {
  constructor(private readonly employeeService: EmployeeService) {}

  @Post('/wage')
  async getWage(@Body() input: WageInputDto) {
    return this.employeeService.getWage(input);
  }
}

// employee.service.ts
import { Injectable } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';

const WEEKLY_HOURS = 40;

@Injectable()
export class EmployeeService {
  async getWage(input: WageInputDto) {
    let weeklyHours = 0;
    let overTimeHours = 0;
    let weeklyWage = 0;

    const hasDoneOverTime = input.hoursWorked > WEEKLY_HOURS;

    if (hasDoneOverTime) {
      weeklyHours = WEEKLY_HOURS;
      overTimeHours = input.hoursWorked - WEEKLY_HOURS;
    } else {
      weeklyHours = input.hoursWorked;
    }

    weeklyWage = weeklyHours * input.hourlyWage;

    if (hasDoneOverTime) {
      weeklyWage = weeklyWage + overTimeHours * (input.hourlyWage * 1.5);
    }

    return { weeklyWage };
  }
}","Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer."
source_code_043,gpt-4_01,0.4,"{'ic_id': {0: 434}, 'ica_id': {0: 4292}, 'question': {0: ""Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer.""}, 'rules': {0: ['Must handle input validation', 'Weekly wage formula: (40 * hourly wage) + ((hours worked - 40) * (1.5 * hourly wage)) if over 40 hours']}, 'examples': {0: 'Input: { ""hourlyWage"": 15, ""hoursWorked"": 45 } Output: { ""weeklyWage"": 712.5 }'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 932}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","import { Controller, Post, Body, HttpException, HttpStatus } from '@nestjs/common';

interface WeeklyWageInput {
  hourlyWage: number;
  hoursWorked: number;
}

@Controller('calculate-weekly-wage')
export class WeeklyWageController {
  @Post()
  calculateWeeklyWage(@Body() data: WeeklyWageInput): { weeklyWage: number } {
    // Input validation
    if (data.hourlyWage <= 0 || data.hoursWorked <= 0 || !Number.isInteger(data.hoursWorked)) {
      throw new HttpException('Invalid input. Hourly wage must be positive and hours worked must be a positive integer', HttpStatus.BAD_REQUEST);
    }

    const regularHours = Math.min(data.hoursWorked, 40);
    const overtimeHours = Math.max(data.hoursWorked - 40, 0);

    const weeklyWage = (regularHours * data.hourlyWage) + (overtimeHours * (1.5 * data.hourlyWage));

    return { weeklyWage };
  }
}
","// wage-input.dto.ts
import { IsNumber, IsPositive } from 'class-validator';

export class WageInputDto {
  @IsNumber()
  @IsPositive()
  hourlyWage: number;

  @IsNumber()
  @IsPositive()
  hoursWorked: number;
}

// It will handle the input validation too.


// employee.controller.ts
import { Body, Controller, Post } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';
import { EmployeeService } from './employee.service';

@Controller('employee')
export class EmployeeController {
  constructor(private readonly employeeService: EmployeeService) {}

  @Post('/wage')
  async getWage(@Body() input: WageInputDto) {
    return this.employeeService.getWage(input);
  }
}

// employee.service.ts
import { Injectable } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';

const WEEKLY_HOURS = 40;

@Injectable()
export class EmployeeService {
  async getWage(input: WageInputDto) {
    let weeklyHours = 0;
    let overTimeHours = 0;
    let weeklyWage = 0;

    const hasDoneOverTime = input.hoursWorked > WEEKLY_HOURS;

    if (hasDoneOverTime) {
      weeklyHours = WEEKLY_HOURS;
      overTimeHours = input.hoursWorked - WEEKLY_HOURS;
    } else {
      weeklyHours = input.hoursWorked;
    }

    weeklyWage = weeklyHours * input.hourlyWage;

    if (hasDoneOverTime) {
      weeklyWage = weeklyWage + overTimeHours * (input.hourlyWage * 1.5);
    }

    return { weeklyWage };
  }
}","Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer."
source_code_043,gpt-4-turbo_00,0.3,"{'ic_id': {0: 434}, 'ica_id': {0: 4292}, 'question': {0: ""Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer.""}, 'rules': {0: ['Must handle input validation', 'Weekly wage formula: (40 * hourly wage) + ((hours worked - 40) * (1.5 * hourly wage)) if over 40 hours']}, 'examples': {0: 'Input: { ""hourlyWage"": 15, ""hoursWorked"": 45 } Output: { ""weeklyWage"": 712.5 }'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 932}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","import { Controller, Post, Body, HttpException, HttpStatus } from '@nestjs/common';

interface WeeklyWageInput {
  hourlyWage: number;
  hoursWorked: number;
}

@Controller('calculate-weekly-wage')
export class WeeklyWageController {
  @Post()
  calculateWeeklyWage(@Body() data: WeeklyWageInput): { weeklyWage: number } {
    // Input validation
    if (data.hourlyWage <= 0 || data.hoursWorked <= 0 || !Number.isInteger(data.hoursWorked)) {
      throw new HttpException('Invalid input. Hourly wage must be positive and hours worked must be a positive integer', HttpStatus.BAD_REQUEST);
    }

    const regularHours = Math.min(data.hoursWorked, 40);
    const overtimeHours = Math.max(data.hoursWorked - 40, 0);

    const weeklyWage = (regularHours * data.hourlyWage) + (overtimeHours * (1.5 * data.hourlyWage));

    return { weeklyWage };
  }
}
","// wage-input.dto.ts
import { IsNumber, IsPositive } from 'class-validator';

export class WageInputDto {
  @IsNumber()
  @IsPositive()
  hourlyWage: number;

  @IsNumber()
  @IsPositive()
  hoursWorked: number;
}

// It will handle the input validation too.


// employee.controller.ts
import { Body, Controller, Post } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';
import { EmployeeService } from './employee.service';

@Controller('employee')
export class EmployeeController {
  constructor(private readonly employeeService: EmployeeService) {}

  @Post('/wage')
  async getWage(@Body() input: WageInputDto) {
    return this.employeeService.getWage(input);
  }
}

// employee.service.ts
import { Injectable } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';

const WEEKLY_HOURS = 40;

@Injectable()
export class EmployeeService {
  async getWage(input: WageInputDto) {
    let weeklyHours = 0;
    let overTimeHours = 0;
    let weeklyWage = 0;

    const hasDoneOverTime = input.hoursWorked > WEEKLY_HOURS;

    if (hasDoneOverTime) {
      weeklyHours = WEEKLY_HOURS;
      overTimeHours = input.hoursWorked - WEEKLY_HOURS;
    } else {
      weeklyHours = input.hoursWorked;
    }

    weeklyWage = weeklyHours * input.hourlyWage;

    if (hasDoneOverTime) {
      weeklyWage = weeklyWage + overTimeHours * (input.hourlyWage * 1.5);
    }

    return { weeklyWage };
  }
}","Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer."
source_code_043,gpt-4-turbo_01,0.3,"{'ic_id': {0: 434}, 'ica_id': {0: 4292}, 'question': {0: ""Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer.""}, 'rules': {0: ['Must handle input validation', 'Weekly wage formula: (40 * hourly wage) + ((hours worked - 40) * (1.5 * hourly wage)) if over 40 hours']}, 'examples': {0: 'Input: { ""hourlyWage"": 15, ""hoursWorked"": 45 } Output: { ""weeklyWage"": 712.5 }'}, 'programming_language': {0: 'TypeScript'}, 'response_time': {0: 932}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","import { Controller, Post, Body, HttpException, HttpStatus } from '@nestjs/common';

interface WeeklyWageInput {
  hourlyWage: number;
  hoursWorked: number;
}

@Controller('calculate-weekly-wage')
export class WeeklyWageController {
  @Post()
  calculateWeeklyWage(@Body() data: WeeklyWageInput): { weeklyWage: number } {
    // Input validation
    if (data.hourlyWage <= 0 || data.hoursWorked <= 0 || !Number.isInteger(data.hoursWorked)) {
      throw new HttpException('Invalid input. Hourly wage must be positive and hours worked must be a positive integer', HttpStatus.BAD_REQUEST);
    }

    const regularHours = Math.min(data.hoursWorked, 40);
    const overtimeHours = Math.max(data.hoursWorked - 40, 0);

    const weeklyWage = (regularHours * data.hourlyWage) + (overtimeHours * (1.5 * data.hourlyWage));

    return { weeklyWage };
  }
}
","// wage-input.dto.ts
import { IsNumber, IsPositive } from 'class-validator';

export class WageInputDto {
  @IsNumber()
  @IsPositive()
  hourlyWage: number;

  @IsNumber()
  @IsPositive()
  hoursWorked: number;
}

// It will handle the input validation too.


// employee.controller.ts
import { Body, Controller, Post } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';
import { EmployeeService } from './employee.service';

@Controller('employee')
export class EmployeeController {
  constructor(private readonly employeeService: EmployeeService) {}

  @Post('/wage')
  async getWage(@Body() input: WageInputDto) {
    return this.employeeService.getWage(input);
  }
}

// employee.service.ts
import { Injectable } from '@nestjs/common';
import { WageInputDto } from './dto/wage-input.dto';

const WEEKLY_HOURS = 40;

@Injectable()
export class EmployeeService {
  async getWage(input: WageInputDto) {
    let weeklyHours = 0;
    let overTimeHours = 0;
    let weeklyWage = 0;

    const hasDoneOverTime = input.hoursWorked > WEEKLY_HOURS;

    if (hasDoneOverTime) {
      weeklyHours = WEEKLY_HOURS;
      overTimeHours = input.hoursWorked - WEEKLY_HOURS;
    } else {
      weeklyHours = input.hoursWorked;
    }

    weeklyWage = weeklyHours * input.hourlyWage;

    if (hasDoneOverTime) {
      weeklyWage = weeklyWage + overTimeHours * (input.hourlyWage * 1.5);
    }

    return { weeklyWage };
  }
}","Implement an endpoint in NestJS, which receives an employee's hourly wage and number of hours worked in a week, and calculates the weekly wage with the consideration of overtime. Regular hours are considered to be the first 40 hours worked in a week, and overtime hours are any hours worked over 40 for which the employee should receive 1.5 times their hourly wage for each hour of overtime. The endpoint should receive JSON data with two fields: 'hourlyWage' and 'hoursWorked', and should return JSON data with the field 'weeklyWage'. Apply validation for the input data to ensure that hourly wage is a positive number and hours worked is a positive integer."
source_code_044,gpt-3.5-turbo_00,0.4,"{'ic_id': {0: 446}, 'ica_id': {0: 4301}, 'question': {0: ""Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.""}, 'rules': {0: [""The function must be written in Python using Django's ORM."", 'Must return a list of dictionaries.', 'Each dictionary should represent a single customer record.', 'No use of raw SQL queries.']}, 'examples': {0: ""Input: 'Customer' model instances with various 'zip_code' values. Output: List of dictionaries representing customers with zip codes like '12345', '12333', etc.""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 97}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","from myapp.models import Customer  # Import the Customer model from your Django app

def get_customers_with_zip_code_starting_with_123():
    customers = Customer.objects.filter(zip_code__startswith='123').values()  # Query to filter customers with zip_code starting with '123'
    return list(customers)  # Return a list of dictionaries for matching records
","from django.views.generic import ListView

class PersonListView(ListView):
    model = Person
    template_name = 'person_list.html'

    def get_queryset(self):
        return Person.objects.filter(birthdate__year__lte=2005)",Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.
source_code_044,gpt-3.5-turbo_01,0.4,"{'ic_id': {0: 446}, 'ica_id': {0: 4301}, 'question': {0: ""Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.""}, 'rules': {0: [""The function must be written in Python using Django's ORM."", 'Must return a list of dictionaries.', 'Each dictionary should represent a single customer record.', 'No use of raw SQL queries.']}, 'examples': {0: ""Input: 'Customer' model instances with various 'zip_code' values. Output: List of dictionaries representing customers with zip codes like '12345', '12333', etc.""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 97}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","from myapp.models import Customer  # Import the Customer model from your Django app

def get_customers_with_zip_code_starting_with_123():
    customers = Customer.objects.filter(zip_code__startswith='123').values()  # Query to filter customers with zip_code starting with '123'
    return list(customers)  # Return a list of dictionaries for matching records
","from django.views.generic import ListView

class PersonListView(ListView):
    model = Person
    template_name = 'person_list.html'

    def get_queryset(self):
        return Person.objects.filter(birthdate__year__lte=2005)",Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.
source_code_044,gpt-4_00,0.1,"{'ic_id': {0: 446}, 'ica_id': {0: 4301}, 'question': {0: ""Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.""}, 'rules': {0: [""The function must be written in Python using Django's ORM."", 'Must return a list of dictionaries.', 'Each dictionary should represent a single customer record.', 'No use of raw SQL queries.']}, 'examples': {0: ""Input: 'Customer' model instances with various 'zip_code' values. Output: List of dictionaries representing customers with zip codes like '12345', '12333', etc.""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 97}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","from myapp.models import Customer  # Import the Customer model from your Django app

def get_customers_with_zip_code_starting_with_123():
    customers = Customer.objects.filter(zip_code__startswith='123').values()  # Query to filter customers with zip_code starting with '123'
    return list(customers)  # Return a list of dictionaries for matching records
","from django.views.generic import ListView

class PersonListView(ListView):
    model = Person
    template_name = 'person_list.html'

    def get_queryset(self):
        return Person.objects.filter(birthdate__year__lte=2005)",Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.
source_code_044,gpt-4_01,0.1,"{'ic_id': {0: 446}, 'ica_id': {0: 4301}, 'question': {0: ""Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.""}, 'rules': {0: [""The function must be written in Python using Django's ORM."", 'Must return a list of dictionaries.', 'Each dictionary should represent a single customer record.', 'No use of raw SQL queries.']}, 'examples': {0: ""Input: 'Customer' model instances with various 'zip_code' values. Output: List of dictionaries representing customers with zip codes like '12345', '12333', etc.""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 97}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","from myapp.models import Customer  # Import the Customer model from your Django app

def get_customers_with_zip_code_starting_with_123():
    customers = Customer.objects.filter(zip_code__startswith='123').values()  # Query to filter customers with zip_code starting with '123'
    return list(customers)  # Return a list of dictionaries for matching records
","from django.views.generic import ListView

class PersonListView(ListView):
    model = Person
    template_name = 'person_list.html'

    def get_queryset(self):
        return Person.objects.filter(birthdate__year__lte=2005)",Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.
source_code_044,gpt-4-turbo_00,0.4,"{'ic_id': {0: 446}, 'ica_id': {0: 4301}, 'question': {0: ""Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.""}, 'rules': {0: [""The function must be written in Python using Django's ORM."", 'Must return a list of dictionaries.', 'Each dictionary should represent a single customer record.', 'No use of raw SQL queries.']}, 'examples': {0: ""Input: 'Customer' model instances with various 'zip_code' values. Output: List of dictionaries representing customers with zip codes like '12345', '12333', etc.""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 97}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","from myapp.models import Customer  # Import the Customer model from your Django app

def get_customers_with_zip_code_starting_with_123():
    customers = Customer.objects.filter(zip_code__startswith='123').values()  # Query to filter customers with zip_code starting with '123'
    return list(customers)  # Return a list of dictionaries for matching records
","from django.views.generic import ListView

class PersonListView(ListView):
    model = Person
    template_name = 'person_list.html'

    def get_queryset(self):
        return Person.objects.filter(birthdate__year__lte=2005)",Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.
source_code_044,gpt-4-turbo_01,0.4,"{'ic_id': {0: 446}, 'ica_id': {0: 4301}, 'question': {0: ""Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.""}, 'rules': {0: [""The function must be written in Python using Django's ORM."", 'Must return a list of dictionaries.', 'Each dictionary should represent a single customer record.', 'No use of raw SQL queries.']}, 'examples': {0: ""Input: 'Customer' model instances with various 'zip_code' values. Output: List of dictionaries representing customers with zip codes like '12345', '12333', etc.""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 97}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","from myapp.models import Customer  # Import the Customer model from your Django app

def get_customers_with_zip_code_starting_with_123():
    customers = Customer.objects.filter(zip_code__startswith='123').values()  # Query to filter customers with zip_code starting with '123'
    return list(customers)  # Return a list of dictionaries for matching records
","from django.views.generic import ListView

class PersonListView(ListView):
    model = Person
    template_name = 'person_list.html'

    def get_queryset(self):
        return Person.objects.filter(birthdate__year__lte=2005)",Design a Python function using Django ORM to retrieve all records from a 'Customer' model where the 'zip_code' field starts with '123'. The function should return a list of dictionaries with all fields for the matching records.
source_code_045,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 447}, 'ica_id': {0: 4307}, 'question': {0: 'Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down.'}, 'rules': {0: ['The timer should update on the screen every second.', 'The component should handle edge cases, such as negative or zero input time.', 'Do not use external timer libraries.']}, 'examples': {0: ""Input: predefinedTime=5 (in minutes) -> Output: Timer displays each second and stops at 00:00 with a message 'Time is up'.""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 90}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 150.0}}","import React, { useState, useEffect } from 'react';

const CountdownTimer = ({ predefinedTime }) => {
    const [time, setTime] = useState(predefinedTime * 60);

    useEffect(() => {
        const interval = setInterval(() => {
            setTime(prevTime => {
                if (prevTime > 0) {
                    return prevTime - 1;
                } else {
                    clearInterval(interval);
                    return prevTime;
                }
            });
        }, 1000);

        return () => clearInterval(interval);
    }, []);

    const formatTime = () => {
        const minutes = Math.floor(time / 60).toString().padStart(2, '0');
        const seconds = (time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    return (
        <div>
            <h1>Countdown Timer: {formatTime()}</h1>
            {time === 0 && <p>Time is up</p>}
        </div>
    );
};

export default CountdownTimer;
","<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Cronometru cu numÄƒrÄƒtoare inversÄƒ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }

    .timer {
      font-size: 48px;
      font-weight: bold;
      margin: 0 20px;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
      width: 200px;
      margin: 20px 0;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #eee;
    }

    .button-start {
      background-color: #009933;
      color: #fff;
    }

    .button-stop {
      background-color: #ff4444;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <h1>Cronometru cu numÄƒrÄƒtoare inversÄƒ</h1>
    <p id=""timer"">00:00</p>
    <div class=""buttons"">
      <button id=""start-button"" class=""button-start"">Start</button>
      <button id=""stop-button"" class=""button-stop"">Stop</button>
    </div>
  </div>

  <script>
    const timerElement = document.getElementById(""timer"");
    const startButton = document.getElementById(""start-button"");
    const stopButton = document.getElementById(""stop-button"");

    let intervalId;

    startButton.addEventListener(""click"", () => {
      // SeteazÄƒ timpul iniÈ›ial
      let seconds = 60;

      // FuncÈ›ia de actualizare a cronometrului
      const updateTimer = () => {
        // DecrementeazÄƒ numÄƒrul de secunde
        seconds--;

        // AfiÈ™eazÄƒ timpul rÄƒmas
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        timerElement.textContent = `${minutes.toString().padStart(2, ""0"")}:${remainingSeconds.toString().padStart(2, ""0"")}`;

        // OpreÈ™te cronometrul cÃ¢nd ajunge la 0
        if (seconds === 0) {
          clearInterval(intervalId);
        }
      };

      // PorneÈ™te cronometrul
      intervalId = setInterval(updateTimer, 1000);
    });

    stopButton.addEventListener(""click"", () => {
      // OpreÈ™te cronometrul
      clearInterval(intervalId);
    });
  </script>
</body>
</html>","Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down."
source_code_045,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 447}, 'ica_id': {0: 4307}, 'question': {0: 'Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down.'}, 'rules': {0: ['The timer should update on the screen every second.', 'The component should handle edge cases, such as negative or zero input time.', 'Do not use external timer libraries.']}, 'examples': {0: ""Input: predefinedTime=5 (in minutes) -> Output: Timer displays each second and stops at 00:00 with a message 'Time is up'.""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 90}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 150.0}}","import React, { useState, useEffect } from 'react';

const CountdownTimer = ({ predefinedTime }) => {
    const [time, setTime] = useState(predefinedTime * 60);

    useEffect(() => {
        const interval = setInterval(() => {
            setTime(prevTime => {
                if (prevTime > 0) {
                    return prevTime - 1;
                } else {
                    clearInterval(interval);
                    return prevTime;
                }
            });
        }, 1000);

        return () => clearInterval(interval);
    }, []);

    const formatTime = () => {
        const minutes = Math.floor(time / 60).toString().padStart(2, '0');
        const seconds = (time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    return (
        <div>
            <h1>Countdown Timer: {formatTime()}</h1>
            {time === 0 && <p>Time is up</p>}
        </div>
    );
};

export default CountdownTimer;
","<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Cronometru cu numÄƒrÄƒtoare inversÄƒ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }

    .timer {
      font-size: 48px;
      font-weight: bold;
      margin: 0 20px;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
      width: 200px;
      margin: 20px 0;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #eee;
    }

    .button-start {
      background-color: #009933;
      color: #fff;
    }

    .button-stop {
      background-color: #ff4444;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <h1>Cronometru cu numÄƒrÄƒtoare inversÄƒ</h1>
    <p id=""timer"">00:00</p>
    <div class=""buttons"">
      <button id=""start-button"" class=""button-start"">Start</button>
      <button id=""stop-button"" class=""button-stop"">Stop</button>
    </div>
  </div>

  <script>
    const timerElement = document.getElementById(""timer"");
    const startButton = document.getElementById(""start-button"");
    const stopButton = document.getElementById(""stop-button"");

    let intervalId;

    startButton.addEventListener(""click"", () => {
      // SeteazÄƒ timpul iniÈ›ial
      let seconds = 60;

      // FuncÈ›ia de actualizare a cronometrului
      const updateTimer = () => {
        // DecrementeazÄƒ numÄƒrul de secunde
        seconds--;

        // AfiÈ™eazÄƒ timpul rÄƒmas
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        timerElement.textContent = `${minutes.toString().padStart(2, ""0"")}:${remainingSeconds.toString().padStart(2, ""0"")}`;

        // OpreÈ™te cronometrul cÃ¢nd ajunge la 0
        if (seconds === 0) {
          clearInterval(intervalId);
        }
      };

      // PorneÈ™te cronometrul
      intervalId = setInterval(updateTimer, 1000);
    });

    stopButton.addEventListener(""click"", () => {
      // OpreÈ™te cronometrul
      clearInterval(intervalId);
    });
  </script>
</body>
</html>","Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down."
source_code_045,gpt-4_00,0.1,"{'ic_id': {0: 447}, 'ica_id': {0: 4307}, 'question': {0: 'Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down.'}, 'rules': {0: ['The timer should update on the screen every second.', 'The component should handle edge cases, such as negative or zero input time.', 'Do not use external timer libraries.']}, 'examples': {0: ""Input: predefinedTime=5 (in minutes) -> Output: Timer displays each second and stops at 00:00 with a message 'Time is up'.""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 90}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 150.0}}","import React, { useState, useEffect } from 'react';

const CountdownTimer = ({ predefinedTime }) => {
    const [time, setTime] = useState(predefinedTime * 60);

    useEffect(() => {
        const interval = setInterval(() => {
            setTime(prevTime => {
                if (prevTime > 0) {
                    return prevTime - 1;
                } else {
                    clearInterval(interval);
                    return prevTime;
                }
            });
        }, 1000);

        return () => clearInterval(interval);
    }, []);

    const formatTime = () => {
        const minutes = Math.floor(time / 60).toString().padStart(2, '0');
        const seconds = (time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    return (
        <div>
            <h1>Countdown Timer: {formatTime()}</h1>
            {time === 0 && <p>Time is up</p>}
        </div>
    );
};

export default CountdownTimer;
","<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Cronometru cu numÄƒrÄƒtoare inversÄƒ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }

    .timer {
      font-size: 48px;
      font-weight: bold;
      margin: 0 20px;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
      width: 200px;
      margin: 20px 0;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #eee;
    }

    .button-start {
      background-color: #009933;
      color: #fff;
    }

    .button-stop {
      background-color: #ff4444;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <h1>Cronometru cu numÄƒrÄƒtoare inversÄƒ</h1>
    <p id=""timer"">00:00</p>
    <div class=""buttons"">
      <button id=""start-button"" class=""button-start"">Start</button>
      <button id=""stop-button"" class=""button-stop"">Stop</button>
    </div>
  </div>

  <script>
    const timerElement = document.getElementById(""timer"");
    const startButton = document.getElementById(""start-button"");
    const stopButton = document.getElementById(""stop-button"");

    let intervalId;

    startButton.addEventListener(""click"", () => {
      // SeteazÄƒ timpul iniÈ›ial
      let seconds = 60;

      // FuncÈ›ia de actualizare a cronometrului
      const updateTimer = () => {
        // DecrementeazÄƒ numÄƒrul de secunde
        seconds--;

        // AfiÈ™eazÄƒ timpul rÄƒmas
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        timerElement.textContent = `${minutes.toString().padStart(2, ""0"")}:${remainingSeconds.toString().padStart(2, ""0"")}`;

        // OpreÈ™te cronometrul cÃ¢nd ajunge la 0
        if (seconds === 0) {
          clearInterval(intervalId);
        }
      };

      // PorneÈ™te cronometrul
      intervalId = setInterval(updateTimer, 1000);
    });

    stopButton.addEventListener(""click"", () => {
      // OpreÈ™te cronometrul
      clearInterval(intervalId);
    });
  </script>
</body>
</html>","Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down."
source_code_045,gpt-4_01,0.1,"{'ic_id': {0: 447}, 'ica_id': {0: 4307}, 'question': {0: 'Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down.'}, 'rules': {0: ['The timer should update on the screen every second.', 'The component should handle edge cases, such as negative or zero input time.', 'Do not use external timer libraries.']}, 'examples': {0: ""Input: predefinedTime=5 (in minutes) -> Output: Timer displays each second and stops at 00:00 with a message 'Time is up'.""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 90}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 150.0}}","import React, { useState, useEffect } from 'react';

const CountdownTimer = ({ predefinedTime }) => {
    const [time, setTime] = useState(predefinedTime * 60);

    useEffect(() => {
        const interval = setInterval(() => {
            setTime(prevTime => {
                if (prevTime > 0) {
                    return prevTime - 1;
                } else {
                    clearInterval(interval);
                    return prevTime;
                }
            });
        }, 1000);

        return () => clearInterval(interval);
    }, []);

    const formatTime = () => {
        const minutes = Math.floor(time / 60).toString().padStart(2, '0');
        const seconds = (time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    return (
        <div>
            <h1>Countdown Timer: {formatTime()}</h1>
            {time === 0 && <p>Time is up</p>}
        </div>
    );
};

export default CountdownTimer;
","<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Cronometru cu numÄƒrÄƒtoare inversÄƒ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }

    .timer {
      font-size: 48px;
      font-weight: bold;
      margin: 0 20px;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
      width: 200px;
      margin: 20px 0;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #eee;
    }

    .button-start {
      background-color: #009933;
      color: #fff;
    }

    .button-stop {
      background-color: #ff4444;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <h1>Cronometru cu numÄƒrÄƒtoare inversÄƒ</h1>
    <p id=""timer"">00:00</p>
    <div class=""buttons"">
      <button id=""start-button"" class=""button-start"">Start</button>
      <button id=""stop-button"" class=""button-stop"">Stop</button>
    </div>
  </div>

  <script>
    const timerElement = document.getElementById(""timer"");
    const startButton = document.getElementById(""start-button"");
    const stopButton = document.getElementById(""stop-button"");

    let intervalId;

    startButton.addEventListener(""click"", () => {
      // SeteazÄƒ timpul iniÈ›ial
      let seconds = 60;

      // FuncÈ›ia de actualizare a cronometrului
      const updateTimer = () => {
        // DecrementeazÄƒ numÄƒrul de secunde
        seconds--;

        // AfiÈ™eazÄƒ timpul rÄƒmas
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        timerElement.textContent = `${minutes.toString().padStart(2, ""0"")}:${remainingSeconds.toString().padStart(2, ""0"")}`;

        // OpreÈ™te cronometrul cÃ¢nd ajunge la 0
        if (seconds === 0) {
          clearInterval(intervalId);
        }
      };

      // PorneÈ™te cronometrul
      intervalId = setInterval(updateTimer, 1000);
    });

    stopButton.addEventListener(""click"", () => {
      // OpreÈ™te cronometrul
      clearInterval(intervalId);
    });
  </script>
</body>
</html>","Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down."
source_code_045,gpt-4-turbo_00,0.1,"{'ic_id': {0: 447}, 'ica_id': {0: 4307}, 'question': {0: 'Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down.'}, 'rules': {0: ['The timer should update on the screen every second.', 'The component should handle edge cases, such as negative or zero input time.', 'Do not use external timer libraries.']}, 'examples': {0: ""Input: predefinedTime=5 (in minutes) -> Output: Timer displays each second and stops at 00:00 with a message 'Time is up'.""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 90}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 150.0}}","import React, { useState, useEffect } from 'react';

const CountdownTimer = ({ predefinedTime }) => {
    const [time, setTime] = useState(predefinedTime * 60);

    useEffect(() => {
        const interval = setInterval(() => {
            setTime(prevTime => {
                if (prevTime > 0) {
                    return prevTime - 1;
                } else {
                    clearInterval(interval);
                    return prevTime;
                }
            });
        }, 1000);

        return () => clearInterval(interval);
    }, []);

    const formatTime = () => {
        const minutes = Math.floor(time / 60).toString().padStart(2, '0');
        const seconds = (time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    return (
        <div>
            <h1>Countdown Timer: {formatTime()}</h1>
            {time === 0 && <p>Time is up</p>}
        </div>
    );
};

export default CountdownTimer;
","<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Cronometru cu numÄƒrÄƒtoare inversÄƒ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }

    .timer {
      font-size: 48px;
      font-weight: bold;
      margin: 0 20px;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
      width: 200px;
      margin: 20px 0;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #eee;
    }

    .button-start {
      background-color: #009933;
      color: #fff;
    }

    .button-stop {
      background-color: #ff4444;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <h1>Cronometru cu numÄƒrÄƒtoare inversÄƒ</h1>
    <p id=""timer"">00:00</p>
    <div class=""buttons"">
      <button id=""start-button"" class=""button-start"">Start</button>
      <button id=""stop-button"" class=""button-stop"">Stop</button>
    </div>
  </div>

  <script>
    const timerElement = document.getElementById(""timer"");
    const startButton = document.getElementById(""start-button"");
    const stopButton = document.getElementById(""stop-button"");

    let intervalId;

    startButton.addEventListener(""click"", () => {
      // SeteazÄƒ timpul iniÈ›ial
      let seconds = 60;

      // FuncÈ›ia de actualizare a cronometrului
      const updateTimer = () => {
        // DecrementeazÄƒ numÄƒrul de secunde
        seconds--;

        // AfiÈ™eazÄƒ timpul rÄƒmas
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        timerElement.textContent = `${minutes.toString().padStart(2, ""0"")}:${remainingSeconds.toString().padStart(2, ""0"")}`;

        // OpreÈ™te cronometrul cÃ¢nd ajunge la 0
        if (seconds === 0) {
          clearInterval(intervalId);
        }
      };

      // PorneÈ™te cronometrul
      intervalId = setInterval(updateTimer, 1000);
    });

    stopButton.addEventListener(""click"", () => {
      // OpreÈ™te cronometrul
      clearInterval(intervalId);
    });
  </script>
</body>
</html>","Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down."
source_code_045,gpt-4-turbo_01,0.1,"{'ic_id': {0: 447}, 'ica_id': {0: 4307}, 'question': {0: 'Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down.'}, 'rules': {0: ['The timer should update on the screen every second.', 'The component should handle edge cases, such as negative or zero input time.', 'Do not use external timer libraries.']}, 'examples': {0: ""Input: predefinedTime=5 (in minutes) -> Output: Timer displays each second and stops at 00:00 with a message 'Time is up'.""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 90}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 150.0}}","import React, { useState, useEffect } from 'react';

const CountdownTimer = ({ predefinedTime }) => {
    const [time, setTime] = useState(predefinedTime * 60);

    useEffect(() => {
        const interval = setInterval(() => {
            setTime(prevTime => {
                if (prevTime > 0) {
                    return prevTime - 1;
                } else {
                    clearInterval(interval);
                    return prevTime;
                }
            });
        }, 1000);

        return () => clearInterval(interval);
    }, []);

    const formatTime = () => {
        const minutes = Math.floor(time / 60).toString().padStart(2, '0');
        const seconds = (time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    return (
        <div>
            <h1>Countdown Timer: {formatTime()}</h1>
            {time === 0 && <p>Time is up</p>}
        </div>
    );
};

export default CountdownTimer;
","<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Cronometru cu numÄƒrÄƒtoare inversÄƒ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }

    .timer {
      font-size: 48px;
      font-weight: bold;
      margin: 0 20px;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
      width: 200px;
      margin: 20px 0;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #eee;
    }

    .button-start {
      background-color: #009933;
      color: #fff;
    }

    .button-stop {
      background-color: #ff4444;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <h1>Cronometru cu numÄƒrÄƒtoare inversÄƒ</h1>
    <p id=""timer"">00:00</p>
    <div class=""buttons"">
      <button id=""start-button"" class=""button-start"">Start</button>
      <button id=""stop-button"" class=""button-stop"">Stop</button>
    </div>
  </div>

  <script>
    const timerElement = document.getElementById(""timer"");
    const startButton = document.getElementById(""start-button"");
    const stopButton = document.getElementById(""stop-button"");

    let intervalId;

    startButton.addEventListener(""click"", () => {
      // SeteazÄƒ timpul iniÈ›ial
      let seconds = 60;

      // FuncÈ›ia de actualizare a cronometrului
      const updateTimer = () => {
        // DecrementeazÄƒ numÄƒrul de secunde
        seconds--;

        // AfiÈ™eazÄƒ timpul rÄƒmas
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        timerElement.textContent = `${minutes.toString().padStart(2, ""0"")}:${remainingSeconds.toString().padStart(2, ""0"")}`;

        // OpreÈ™te cronometrul cÃ¢nd ajunge la 0
        if (seconds === 0) {
          clearInterval(intervalId);
        }
      };

      // PorneÈ™te cronometrul
      intervalId = setInterval(updateTimer, 1000);
    });

    stopButton.addEventListener(""click"", () => {
      // OpreÈ™te cronometrul
      clearInterval(intervalId);
    });
  </script>
</body>
</html>","Create a countdown timer component in React that takes a predefined amount of time and displays the remaining time in minutes and seconds. The timer should start automatically and provide visual feedback each second. When the timer reaches zero, it should display a message that the time is up and stop counting down."
source_code_046,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 449}, 'ica_id': {0: 4338}, 'question': {0: ""Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately.""}, 'rules': {0: ['Use native JavaScript methods only.', 'Functions should be well-commented', 'Handle cases where the input array is empty', ""Provide a solution that doesn't mutate the original array""]}, 'examples': {0: ""Input: [{name: 'Alice', score: 10}, {name: 'Bob', score: 8}, {name: 'Charlie', score: 10}] Output: [{name: 'Alice', score: 10}, {name: 'Charlie', score: 10}, {name: 'Bob', score: 8}]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 38}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function sortPlayers(arr) {
    // Check if the input array is empty
    if (arr.length === 0) {
        return [];
    }

    // Sort the array by score descending and by name alphabetically
    const sortedArray = arr.slice().sort((a, b) => {
        if (b.score !== a.score) {
            return b.score - a.score; // Sort by score descending
        } else {
            return a.name.localeCompare(b.name); // Then sort alphabetically by name
        }
    });

    return sortedArray;
}

// Example usage
const players = [
    { name: 'Alice', score: 10 },
    { name: 'Bob', score: 8 },
    { name: 'Charlie', score: 10 }
];
console.log(sortPlayers(players));
",5/75/,"Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately."
source_code_046,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 449}, 'ica_id': {0: 4338}, 'question': {0: ""Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately.""}, 'rules': {0: ['Use native JavaScript methods only.', 'Functions should be well-commented', 'Handle cases where the input array is empty', ""Provide a solution that doesn't mutate the original array""]}, 'examples': {0: ""Input: [{name: 'Alice', score: 10}, {name: 'Bob', score: 8}, {name: 'Charlie', score: 10}] Output: [{name: 'Alice', score: 10}, {name: 'Charlie', score: 10}, {name: 'Bob', score: 8}]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 38}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function sortPlayers(arr) {
    // Check if the input array is empty
    if (arr.length === 0) {
        return [];
    }

    // Sort the array by score descending and by name alphabetically
    const sortedArray = arr.slice().sort((a, b) => {
        if (b.score !== a.score) {
            return b.score - a.score; // Sort by score descending
        } else {
            return a.name.localeCompare(b.name); // Then sort alphabetically by name
        }
    });

    return sortedArray;
}

// Example usage
const players = [
    { name: 'Alice', score: 10 },
    { name: 'Bob', score: 8 },
    { name: 'Charlie', score: 10 }
];
console.log(sortPlayers(players));
",5/75/,"Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately."
source_code_046,gpt-4_00,0.0,"{'ic_id': {0: 449}, 'ica_id': {0: 4338}, 'question': {0: ""Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately.""}, 'rules': {0: ['Use native JavaScript methods only.', 'Functions should be well-commented', 'Handle cases where the input array is empty', ""Provide a solution that doesn't mutate the original array""]}, 'examples': {0: ""Input: [{name: 'Alice', score: 10}, {name: 'Bob', score: 8}, {name: 'Charlie', score: 10}] Output: [{name: 'Alice', score: 10}, {name: 'Charlie', score: 10}, {name: 'Bob', score: 8}]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 38}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function sortPlayers(arr) {
    // Check if the input array is empty
    if (arr.length === 0) {
        return [];
    }

    // Sort the array by score descending and by name alphabetically
    const sortedArray = arr.slice().sort((a, b) => {
        if (b.score !== a.score) {
            return b.score - a.score; // Sort by score descending
        } else {
            return a.name.localeCompare(b.name); // Then sort alphabetically by name
        }
    });

    return sortedArray;
}

// Example usage
const players = [
    { name: 'Alice', score: 10 },
    { name: 'Bob', score: 8 },
    { name: 'Charlie', score: 10 }
];
console.log(sortPlayers(players));
",5/75/,"Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately."
source_code_046,gpt-4_01,0.0,"{'ic_id': {0: 449}, 'ica_id': {0: 4338}, 'question': {0: ""Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately.""}, 'rules': {0: ['Use native JavaScript methods only.', 'Functions should be well-commented', 'Handle cases where the input array is empty', ""Provide a solution that doesn't mutate the original array""]}, 'examples': {0: ""Input: [{name: 'Alice', score: 10}, {name: 'Bob', score: 8}, {name: 'Charlie', score: 10}] Output: [{name: 'Alice', score: 10}, {name: 'Charlie', score: 10}, {name: 'Bob', score: 8}]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 38}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function sortPlayers(arr) {
    // Check if the input array is empty
    if (arr.length === 0) {
        return [];
    }

    // Sort the array by score descending and by name alphabetically
    const sortedArray = arr.slice().sort((a, b) => {
        if (b.score !== a.score) {
            return b.score - a.score; // Sort by score descending
        } else {
            return a.name.localeCompare(b.name); // Then sort alphabetically by name
        }
    });

    return sortedArray;
}

// Example usage
const players = [
    { name: 'Alice', score: 10 },
    { name: 'Bob', score: 8 },
    { name: 'Charlie', score: 10 }
];
console.log(sortPlayers(players));
",5/75/,"Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately."
source_code_046,gpt-4-turbo_00,0.0,"{'ic_id': {0: 449}, 'ica_id': {0: 4338}, 'question': {0: ""Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately.""}, 'rules': {0: ['Use native JavaScript methods only.', 'Functions should be well-commented', 'Handle cases where the input array is empty', ""Provide a solution that doesn't mutate the original array""]}, 'examples': {0: ""Input: [{name: 'Alice', score: 10}, {name: 'Bob', score: 8}, {name: 'Charlie', score: 10}] Output: [{name: 'Alice', score: 10}, {name: 'Charlie', score: 10}, {name: 'Bob', score: 8}]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 38}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function sortPlayers(arr) {
    // Check if the input array is empty
    if (arr.length === 0) {
        return [];
    }

    // Sort the array by score descending and by name alphabetically
    const sortedArray = arr.slice().sort((a, b) => {
        if (b.score !== a.score) {
            return b.score - a.score; // Sort by score descending
        } else {
            return a.name.localeCompare(b.name); // Then sort alphabetically by name
        }
    });

    return sortedArray;
}

// Example usage
const players = [
    { name: 'Alice', score: 10 },
    { name: 'Bob', score: 8 },
    { name: 'Charlie', score: 10 }
];
console.log(sortPlayers(players));
",5/75/,"Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately."
source_code_046,gpt-4-turbo_01,0.0,"{'ic_id': {0: 449}, 'ica_id': {0: 4338}, 'question': {0: ""Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately.""}, 'rules': {0: ['Use native JavaScript methods only.', 'Functions should be well-commented', 'Handle cases where the input array is empty', ""Provide a solution that doesn't mutate the original array""]}, 'examples': {0: ""Input: [{name: 'Alice', score: 10}, {name: 'Bob', score: 8}, {name: 'Charlie', score: 10}] Output: [{name: 'Alice', score: 10}, {name: 'Charlie', score: 10}, {name: 'Bob', score: 8}]""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 38}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function sortPlayers(arr) {
    // Check if the input array is empty
    if (arr.length === 0) {
        return [];
    }

    // Sort the array by score descending and by name alphabetically
    const sortedArray = arr.slice().sort((a, b) => {
        if (b.score !== a.score) {
            return b.score - a.score; // Sort by score descending
        } else {
            return a.name.localeCompare(b.name); // Then sort alphabetically by name
        }
    });

    return sortedArray;
}

// Example usage
const players = [
    { name: 'Alice', score: 10 },
    { name: 'Bob', score: 8 },
    { name: 'Charlie', score: 10 }
];
console.log(sortPlayers(players));
",5/75/,"Develop a function to sort an array of objects by a specific object key in JavaScript, where the objects represent players with a 'name' and 'score' key. Your function should be able to sort the array firstly by score in descending order, and for players with the same score, alphabetically by name. Ensure your code handles edge cases appropriately."
source_code_047,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 455}, 'ica_id': {0: 4394}, 'question': {0: ""Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'.""}, 'rules': {0: [""Use the standard 'database/sql' package for database connection"", 'Include error handling for database operations']}, 'examples': {0: ""Expected output: A Go function that performs the database operations with PostgreSQL, and when executed, it creates a 'logs' table, inserts sample data, and retrieves all log entries.""}, 'programming_language': {0: 'Go'}, 'response_time': {0: 91}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","package main

import (
	""database/sql""
	""fmt""
	""log""
	""time""

	_ ""github.com/lib/pq""
)

const (
	host     = ""localhost""
	port     = 5432
	user     = ""your_username""
	password = ""your_password""
	dbname   = ""your_database""
)

func connectDB() (*sql.DB, error) {
	connStr := fmt.Sprintf(""host=%s port=%d user=%s password=%s dbname=%s sslmode=disable"", host, port, user, password, dbname)
	db, err := sql.Open(""postgres"", connStr)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func createLogsTable(db *sql.DB) error {
	createTableSQL := `
		CREATE TABLE IF NOT EXISTS logs (
			id SERIAL PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL,
			message TEXT
		)
	`
	_, err := db.Exec(createTableSQL)
	return err
}

func insertSampleData(db *sql.DB) error {
	insertDataSQL := `
		INSERT INTO logs (timestamp, message) VALUES ($1, $2), ($3, $4)
	`
	_, err := db.Exec(insertDataSQL, time.Now(), ""Sample log entry 1"", time.Now().Add(1*time.Hour), ""Sample log entry 2"")
	return err
}

func retrieveLogs(db *sql.DB) error {
	query := `
		SELECT * FROM logs
	`
	rows, err := db.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var timestamp time.Time
		var message string
		if err := rows.Scan(&id, &timestamp, &message); err != nil {
			return err
		}
		fmt.Printf(""ID: %d, Timestamp: %v, Message: %s\n"", id, timestamp, message)
	}
	return nil
}

func main() {
	db, err := connectDB()
	if err != nil {
		log.Fatalf(""Error connecting to the database: %v"", err)
	}
	defer db.Close()

	err = createLogsTable(db)
	if err != nil {
		log.Fatalf(""Error creating 'logs' table: %v"", err)
	}

	err = insertSampleData(db)
	if err != nil {
		log.Fatalf(""Error inserting sample data: %v"", err)
	}

	err = retrieveLogs(db)
	if err != nil {
		log.Fatalf(""Error retrieving logs: %v"", err)
	}
}
","package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/lib/pq""
)

func main() {
	// Connect to the database
	db, err := sql.Open(""postgres"", ""user=postgres dbname=mydatabase sslmode=disable"")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Create the logs table if it doesn't exist
	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS logs (
		id SERIAL PRIMARY KEY,
		message TEXT
	)`)
	if err != nil {
		log.Fatal(err)
	}

	// Insert sample data into the logs table
	_, err = db.Exec(""INSERT INTO logs (message) VALUES ($1), ($2), ($3)"", ""Log entry 1"", ""Log entry 2"", ""Log entry 3"")
	if err != nil {
		log.Fatal(err)
	}

	// Retrieve all log entries from the logs table
	rows, err := db.Query(""SELECT * FROM logs"")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	// Iterate over the rows and print each log entry
	fmt.Println(""Log Entries:"")
	for rows.Next() {
		var id int
		var message string
		err := rows.Scan(&id, &message)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf(""ID: %d, Message: %s\n"", id, message)
	}
	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}
}","Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'."
source_code_047,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 455}, 'ica_id': {0: 4394}, 'question': {0: ""Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'.""}, 'rules': {0: [""Use the standard 'database/sql' package for database connection"", 'Include error handling for database operations']}, 'examples': {0: ""Expected output: A Go function that performs the database operations with PostgreSQL, and when executed, it creates a 'logs' table, inserts sample data, and retrieves all log entries.""}, 'programming_language': {0: 'Go'}, 'response_time': {0: 91}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","package main

import (
	""database/sql""
	""fmt""
	""log""
	""time""

	_ ""github.com/lib/pq""
)

const (
	host     = ""localhost""
	port     = 5432
	user     = ""your_username""
	password = ""your_password""
	dbname   = ""your_database""
)

func connectDB() (*sql.DB, error) {
	connStr := fmt.Sprintf(""host=%s port=%d user=%s password=%s dbname=%s sslmode=disable"", host, port, user, password, dbname)
	db, err := sql.Open(""postgres"", connStr)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func createLogsTable(db *sql.DB) error {
	createTableSQL := `
		CREATE TABLE IF NOT EXISTS logs (
			id SERIAL PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL,
			message TEXT
		)
	`
	_, err := db.Exec(createTableSQL)
	return err
}

func insertSampleData(db *sql.DB) error {
	insertDataSQL := `
		INSERT INTO logs (timestamp, message) VALUES ($1, $2), ($3, $4)
	`
	_, err := db.Exec(insertDataSQL, time.Now(), ""Sample log entry 1"", time.Now().Add(1*time.Hour), ""Sample log entry 2"")
	return err
}

func retrieveLogs(db *sql.DB) error {
	query := `
		SELECT * FROM logs
	`
	rows, err := db.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var timestamp time.Time
		var message string
		if err := rows.Scan(&id, &timestamp, &message); err != nil {
			return err
		}
		fmt.Printf(""ID: %d, Timestamp: %v, Message: %s\n"", id, timestamp, message)
	}
	return nil
}

func main() {
	db, err := connectDB()
	if err != nil {
		log.Fatalf(""Error connecting to the database: %v"", err)
	}
	defer db.Close()

	err = createLogsTable(db)
	if err != nil {
		log.Fatalf(""Error creating 'logs' table: %v"", err)
	}

	err = insertSampleData(db)
	if err != nil {
		log.Fatalf(""Error inserting sample data: %v"", err)
	}

	err = retrieveLogs(db)
	if err != nil {
		log.Fatalf(""Error retrieving logs: %v"", err)
	}
}
","package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/lib/pq""
)

func main() {
	// Connect to the database
	db, err := sql.Open(""postgres"", ""user=postgres dbname=mydatabase sslmode=disable"")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Create the logs table if it doesn't exist
	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS logs (
		id SERIAL PRIMARY KEY,
		message TEXT
	)`)
	if err != nil {
		log.Fatal(err)
	}

	// Insert sample data into the logs table
	_, err = db.Exec(""INSERT INTO logs (message) VALUES ($1), ($2), ($3)"", ""Log entry 1"", ""Log entry 2"", ""Log entry 3"")
	if err != nil {
		log.Fatal(err)
	}

	// Retrieve all log entries from the logs table
	rows, err := db.Query(""SELECT * FROM logs"")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	// Iterate over the rows and print each log entry
	fmt.Println(""Log Entries:"")
	for rows.Next() {
		var id int
		var message string
		err := rows.Scan(&id, &message)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf(""ID: %d, Message: %s\n"", id, message)
	}
	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}
}","Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'."
source_code_047,gpt-4_00,0.7,"{'ic_id': {0: 455}, 'ica_id': {0: 4394}, 'question': {0: ""Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'.""}, 'rules': {0: [""Use the standard 'database/sql' package for database connection"", 'Include error handling for database operations']}, 'examples': {0: ""Expected output: A Go function that performs the database operations with PostgreSQL, and when executed, it creates a 'logs' table, inserts sample data, and retrieves all log entries.""}, 'programming_language': {0: 'Go'}, 'response_time': {0: 91}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","package main

import (
	""database/sql""
	""fmt""
	""log""
	""time""

	_ ""github.com/lib/pq""
)

const (
	host     = ""localhost""
	port     = 5432
	user     = ""your_username""
	password = ""your_password""
	dbname   = ""your_database""
)

func connectDB() (*sql.DB, error) {
	connStr := fmt.Sprintf(""host=%s port=%d user=%s password=%s dbname=%s sslmode=disable"", host, port, user, password, dbname)
	db, err := sql.Open(""postgres"", connStr)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func createLogsTable(db *sql.DB) error {
	createTableSQL := `
		CREATE TABLE IF NOT EXISTS logs (
			id SERIAL PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL,
			message TEXT
		)
	`
	_, err := db.Exec(createTableSQL)
	return err
}

func insertSampleData(db *sql.DB) error {
	insertDataSQL := `
		INSERT INTO logs (timestamp, message) VALUES ($1, $2), ($3, $4)
	`
	_, err := db.Exec(insertDataSQL, time.Now(), ""Sample log entry 1"", time.Now().Add(1*time.Hour), ""Sample log entry 2"")
	return err
}

func retrieveLogs(db *sql.DB) error {
	query := `
		SELECT * FROM logs
	`
	rows, err := db.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var timestamp time.Time
		var message string
		if err := rows.Scan(&id, &timestamp, &message); err != nil {
			return err
		}
		fmt.Printf(""ID: %d, Timestamp: %v, Message: %s\n"", id, timestamp, message)
	}
	return nil
}

func main() {
	db, err := connectDB()
	if err != nil {
		log.Fatalf(""Error connecting to the database: %v"", err)
	}
	defer db.Close()

	err = createLogsTable(db)
	if err != nil {
		log.Fatalf(""Error creating 'logs' table: %v"", err)
	}

	err = insertSampleData(db)
	if err != nil {
		log.Fatalf(""Error inserting sample data: %v"", err)
	}

	err = retrieveLogs(db)
	if err != nil {
		log.Fatalf(""Error retrieving logs: %v"", err)
	}
}
","package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/lib/pq""
)

func main() {
	// Connect to the database
	db, err := sql.Open(""postgres"", ""user=postgres dbname=mydatabase sslmode=disable"")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Create the logs table if it doesn't exist
	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS logs (
		id SERIAL PRIMARY KEY,
		message TEXT
	)`)
	if err != nil {
		log.Fatal(err)
	}

	// Insert sample data into the logs table
	_, err = db.Exec(""INSERT INTO logs (message) VALUES ($1), ($2), ($3)"", ""Log entry 1"", ""Log entry 2"", ""Log entry 3"")
	if err != nil {
		log.Fatal(err)
	}

	// Retrieve all log entries from the logs table
	rows, err := db.Query(""SELECT * FROM logs"")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	// Iterate over the rows and print each log entry
	fmt.Println(""Log Entries:"")
	for rows.Next() {
		var id int
		var message string
		err := rows.Scan(&id, &message)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf(""ID: %d, Message: %s\n"", id, message)
	}
	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}
}","Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'."
source_code_047,gpt-4_01,0.6,"{'ic_id': {0: 455}, 'ica_id': {0: 4394}, 'question': {0: ""Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'.""}, 'rules': {0: [""Use the standard 'database/sql' package for database connection"", 'Include error handling for database operations']}, 'examples': {0: ""Expected output: A Go function that performs the database operations with PostgreSQL, and when executed, it creates a 'logs' table, inserts sample data, and retrieves all log entries.""}, 'programming_language': {0: 'Go'}, 'response_time': {0: 91}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","package main

import (
	""database/sql""
	""fmt""
	""log""
	""time""

	_ ""github.com/lib/pq""
)

const (
	host     = ""localhost""
	port     = 5432
	user     = ""your_username""
	password = ""your_password""
	dbname   = ""your_database""
)

func connectDB() (*sql.DB, error) {
	connStr := fmt.Sprintf(""host=%s port=%d user=%s password=%s dbname=%s sslmode=disable"", host, port, user, password, dbname)
	db, err := sql.Open(""postgres"", connStr)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func createLogsTable(db *sql.DB) error {
	createTableSQL := `
		CREATE TABLE IF NOT EXISTS logs (
			id SERIAL PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL,
			message TEXT
		)
	`
	_, err := db.Exec(createTableSQL)
	return err
}

func insertSampleData(db *sql.DB) error {
	insertDataSQL := `
		INSERT INTO logs (timestamp, message) VALUES ($1, $2), ($3, $4)
	`
	_, err := db.Exec(insertDataSQL, time.Now(), ""Sample log entry 1"", time.Now().Add(1*time.Hour), ""Sample log entry 2"")
	return err
}

func retrieveLogs(db *sql.DB) error {
	query := `
		SELECT * FROM logs
	`
	rows, err := db.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var timestamp time.Time
		var message string
		if err := rows.Scan(&id, &timestamp, &message); err != nil {
			return err
		}
		fmt.Printf(""ID: %d, Timestamp: %v, Message: %s\n"", id, timestamp, message)
	}
	return nil
}

func main() {
	db, err := connectDB()
	if err != nil {
		log.Fatalf(""Error connecting to the database: %v"", err)
	}
	defer db.Close()

	err = createLogsTable(db)
	if err != nil {
		log.Fatalf(""Error creating 'logs' table: %v"", err)
	}

	err = insertSampleData(db)
	if err != nil {
		log.Fatalf(""Error inserting sample data: %v"", err)
	}

	err = retrieveLogs(db)
	if err != nil {
		log.Fatalf(""Error retrieving logs: %v"", err)
	}
}
","package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/lib/pq""
)

func main() {
	// Connect to the database
	db, err := sql.Open(""postgres"", ""user=postgres dbname=mydatabase sslmode=disable"")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Create the logs table if it doesn't exist
	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS logs (
		id SERIAL PRIMARY KEY,
		message TEXT
	)`)
	if err != nil {
		log.Fatal(err)
	}

	// Insert sample data into the logs table
	_, err = db.Exec(""INSERT INTO logs (message) VALUES ($1), ($2), ($3)"", ""Log entry 1"", ""Log entry 2"", ""Log entry 3"")
	if err != nil {
		log.Fatal(err)
	}

	// Retrieve all log entries from the logs table
	rows, err := db.Query(""SELECT * FROM logs"")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	// Iterate over the rows and print each log entry
	fmt.Println(""Log Entries:"")
	for rows.Next() {
		var id int
		var message string
		err := rows.Scan(&id, &message)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf(""ID: %d, Message: %s\n"", id, message)
	}
	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}
}","Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'."
source_code_047,gpt-4-turbo_00,0.7,"{'ic_id': {0: 455}, 'ica_id': {0: 4394}, 'question': {0: ""Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'.""}, 'rules': {0: [""Use the standard 'database/sql' package for database connection"", 'Include error handling for database operations']}, 'examples': {0: ""Expected output: A Go function that performs the database operations with PostgreSQL, and when executed, it creates a 'logs' table, inserts sample data, and retrieves all log entries.""}, 'programming_language': {0: 'Go'}, 'response_time': {0: 91}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","package main

import (
	""database/sql""
	""fmt""
	""log""
	""time""

	_ ""github.com/lib/pq""
)

const (
	host     = ""localhost""
	port     = 5432
	user     = ""your_username""
	password = ""your_password""
	dbname   = ""your_database""
)

func connectDB() (*sql.DB, error) {
	connStr := fmt.Sprintf(""host=%s port=%d user=%s password=%s dbname=%s sslmode=disable"", host, port, user, password, dbname)
	db, err := sql.Open(""postgres"", connStr)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func createLogsTable(db *sql.DB) error {
	createTableSQL := `
		CREATE TABLE IF NOT EXISTS logs (
			id SERIAL PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL,
			message TEXT
		)
	`
	_, err := db.Exec(createTableSQL)
	return err
}

func insertSampleData(db *sql.DB) error {
	insertDataSQL := `
		INSERT INTO logs (timestamp, message) VALUES ($1, $2), ($3, $4)
	`
	_, err := db.Exec(insertDataSQL, time.Now(), ""Sample log entry 1"", time.Now().Add(1*time.Hour), ""Sample log entry 2"")
	return err
}

func retrieveLogs(db *sql.DB) error {
	query := `
		SELECT * FROM logs
	`
	rows, err := db.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var timestamp time.Time
		var message string
		if err := rows.Scan(&id, &timestamp, &message); err != nil {
			return err
		}
		fmt.Printf(""ID: %d, Timestamp: %v, Message: %s\n"", id, timestamp, message)
	}
	return nil
}

func main() {
	db, err := connectDB()
	if err != nil {
		log.Fatalf(""Error connecting to the database: %v"", err)
	}
	defer db.Close()

	err = createLogsTable(db)
	if err != nil {
		log.Fatalf(""Error creating 'logs' table: %v"", err)
	}

	err = insertSampleData(db)
	if err != nil {
		log.Fatalf(""Error inserting sample data: %v"", err)
	}

	err = retrieveLogs(db)
	if err != nil {
		log.Fatalf(""Error retrieving logs: %v"", err)
	}
}
","package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/lib/pq""
)

func main() {
	// Connect to the database
	db, err := sql.Open(""postgres"", ""user=postgres dbname=mydatabase sslmode=disable"")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Create the logs table if it doesn't exist
	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS logs (
		id SERIAL PRIMARY KEY,
		message TEXT
	)`)
	if err != nil {
		log.Fatal(err)
	}

	// Insert sample data into the logs table
	_, err = db.Exec(""INSERT INTO logs (message) VALUES ($1), ($2), ($3)"", ""Log entry 1"", ""Log entry 2"", ""Log entry 3"")
	if err != nil {
		log.Fatal(err)
	}

	// Retrieve all log entries from the logs table
	rows, err := db.Query(""SELECT * FROM logs"")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	// Iterate over the rows and print each log entry
	fmt.Println(""Log Entries:"")
	for rows.Next() {
		var id int
		var message string
		err := rows.Scan(&id, &message)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf(""ID: %d, Message: %s\n"", id, message)
	}
	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}
}","Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'."
source_code_047,gpt-4-turbo_01,0.2,"{'ic_id': {0: 455}, 'ica_id': {0: 4394}, 'question': {0: ""Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'.""}, 'rules': {0: [""Use the standard 'database/sql' package for database connection"", 'Include error handling for database operations']}, 'examples': {0: ""Expected output: A Go function that performs the database operations with PostgreSQL, and when executed, it creates a 'logs' table, inserts sample data, and retrieves all log entries.""}, 'programming_language': {0: 'Go'}, 'response_time': {0: 91}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 25.0}, 'total_weight': {0: 75.0}}","package main

import (
	""database/sql""
	""fmt""
	""log""
	""time""

	_ ""github.com/lib/pq""
)

const (
	host     = ""localhost""
	port     = 5432
	user     = ""your_username""
	password = ""your_password""
	dbname   = ""your_database""
)

func connectDB() (*sql.DB, error) {
	connStr := fmt.Sprintf(""host=%s port=%d user=%s password=%s dbname=%s sslmode=disable"", host, port, user, password, dbname)
	db, err := sql.Open(""postgres"", connStr)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func createLogsTable(db *sql.DB) error {
	createTableSQL := `
		CREATE TABLE IF NOT EXISTS logs (
			id SERIAL PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL,
			message TEXT
		)
	`
	_, err := db.Exec(createTableSQL)
	return err
}

func insertSampleData(db *sql.DB) error {
	insertDataSQL := `
		INSERT INTO logs (timestamp, message) VALUES ($1, $2), ($3, $4)
	`
	_, err := db.Exec(insertDataSQL, time.Now(), ""Sample log entry 1"", time.Now().Add(1*time.Hour), ""Sample log entry 2"")
	return err
}

func retrieveLogs(db *sql.DB) error {
	query := `
		SELECT * FROM logs
	`
	rows, err := db.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var timestamp time.Time
		var message string
		if err := rows.Scan(&id, &timestamp, &message); err != nil {
			return err
		}
		fmt.Printf(""ID: %d, Timestamp: %v, Message: %s\n"", id, timestamp, message)
	}
	return nil
}

func main() {
	db, err := connectDB()
	if err != nil {
		log.Fatalf(""Error connecting to the database: %v"", err)
	}
	defer db.Close()

	err = createLogsTable(db)
	if err != nil {
		log.Fatalf(""Error creating 'logs' table: %v"", err)
	}

	err = insertSampleData(db)
	if err != nil {
		log.Fatalf(""Error inserting sample data: %v"", err)
	}

	err = retrieveLogs(db)
	if err != nil {
		log.Fatalf(""Error retrieving logs: %v"", err)
	}
}
","package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/lib/pq""
)

func main() {
	// Connect to the database
	db, err := sql.Open(""postgres"", ""user=postgres dbname=mydatabase sslmode=disable"")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Create the logs table if it doesn't exist
	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS logs (
		id SERIAL PRIMARY KEY,
		message TEXT
	)`)
	if err != nil {
		log.Fatal(err)
	}

	// Insert sample data into the logs table
	_, err = db.Exec(""INSERT INTO logs (message) VALUES ($1), ($2), ($3)"", ""Log entry 1"", ""Log entry 2"", ""Log entry 3"")
	if err != nil {
		log.Fatal(err)
	}

	// Retrieve all log entries from the logs table
	rows, err := db.Query(""SELECT * FROM logs"")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	// Iterate over the rows and print each log entry
	fmt.Println(""Log Entries:"")
	for rows.Next() {
		var id int
		var message string
		err := rows.Scan(&id, &message)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf(""ID: %d, Message: %s\n"", id, message)
	}
	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}
}","Create a Go function that connects to a PostgreSQL database, creates a table called 'logs', and inserts some data into it. The 'logs' table should have columns for 'id' (primary key), 'timestamp' (datetime of the log entry), and 'message' (text of the log entry). After inserting sample data, write a query to retrieve all entries from 'logs'."
source_code_048,gpt-3.5-turbo_00,0.3,"{'ic_id': {0: 451}, 'ica_id': {0: 4408}, 'question': {0: 'Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats.'}, 'rules': {0: ['The function should not use URL-related library functions for parsing.']}, 'examples': {0: ""Input: 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2'\\nOutput: {\\n  protocol: 'https',\\n  host: 'www.example.com',\\n  port: '8080',\\n  path: '/path/to/page',\\n  queryParams: { name: 'ferret', color: 'purple' },\\n  anchor: 'section2'\\n}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","function parseUrl(url) {
    const result = {
        queryParams: {}
    };

    // Get protocol
    const protocolIndex = url.indexOf('://');
    result.protocol = url.substring(0, protocolIndex);

    // Get host and port
    const afterProtocol = url.substring(protocolIndex + 3);
    const hostAndPort = afterProtocol.split('/')[0];
    const parts = hostAndPort.split(':');
    result.host = parts[0];
    result.port = parts[1] || '';

    // Get path
    const pathAndQuery = afterProtocol.substring(hostAndPort.length);
    const pathIndex = pathAndQuery.indexOf('/');
    result.path = pathAndQuery.substring(pathIndex);

    // Parse query parameters
    const queryIndex = pathAndQuery.indexOf('?');
    if (queryIndex !== -1) {
        const queryParams = pathAndQuery.substring(queryIndex + 1, pathIndex);
        queryParams.split('&').forEach(param => {
            const pair = param.split('=');
            result.queryParams[pair[0]] = pair[1];
        });
    }

    // Get anchor
    const anchorIndex = pathAndQuery.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = pathAndQuery.substring(anchorIndex + 1);
    }

    return result;
}

// Example
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));
","function parseUrl(url) {
    const urlRegex = /^(.*):\/\/([^:/]+)(?::(\d+))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.*))?$/;
    const matches = url.match(urlRegex);

    if (!matches) {
        throw new Error('Invalid URL format');
    }

    const [, protocol, host, port, path, queryParams, anchor] = matches;
    const queryParamObj = {};
    if (queryParams) {
        const queryParamsArr = queryParams.split('&');
        queryParamsArr.forEach(param => {
            const [key, value] = param.split('=');
            queryParamObj[key] = value || null;
        });
    }

    // Return object 
    return {
        protocol: protocol || null,
        host: host || null,
        port: port ? parseInt(port, 10) : null,
        path: path || null,
        queryParams: queryParamObj,
        anchor: anchor || null
    };
}



//another solution is but I prefer the top one

function parseURL(url) {
    const result = {};
    const protocolIndex = url.indexOf('://');
    result.protocol = url.slice(0, protocolIndex);
    const urlWithoutProtocol = url.slice(protocolIndex + 3);

    //  anchor
    const anchorIndex = urlWithoutProtocol.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = urlWithoutProtocol.slice(anchorIndex + 1);
    }

   
    const queryIndex = urlWithoutProtocol.indexOf('?');
    if (queryIndex !== -1) {
        const queryParamsString = urlWithoutProtocol.slice(queryIndex + 1, anchorIndex !== -1 ? anchorIndex : undefined);
        const queryParamsArray = queryParamsString.split('&');
        result.queryParams = {};
        queryParamsArray.forEach(param => {
            const [key, value] = param.split('=');
            result.queryParams[key] = value;
        });
    }

   
    const urlWithoutQueryParams = queryIndex !== -1 ? urlWithoutProtocol.slice(0, queryIndex) : urlWithoutProtocol;
    const [hostAndPort, path] = urlWithoutQueryParams.split('/');
    result.path = '/' + path;
    const [host, port] = hostAndPort.split(':');
    result.host = host;
    result.port = port || '';

    return result;
}


//usage
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));","Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats."
source_code_048,gpt-3.5-turbo_01,0.4,"{'ic_id': {0: 451}, 'ica_id': {0: 4408}, 'question': {0: 'Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats.'}, 'rules': {0: ['The function should not use URL-related library functions for parsing.']}, 'examples': {0: ""Input: 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2'\\nOutput: {\\n  protocol: 'https',\\n  host: 'www.example.com',\\n  port: '8080',\\n  path: '/path/to/page',\\n  queryParams: { name: 'ferret', color: 'purple' },\\n  anchor: 'section2'\\n}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","function parseUrl(url) {
    const result = {
        queryParams: {}
    };

    // Get protocol
    const protocolIndex = url.indexOf('://');
    result.protocol = url.substring(0, protocolIndex);

    // Get host and port
    const afterProtocol = url.substring(protocolIndex + 3);
    const hostAndPort = afterProtocol.split('/')[0];
    const parts = hostAndPort.split(':');
    result.host = parts[0];
    result.port = parts[1] || '';

    // Get path
    const pathAndQuery = afterProtocol.substring(hostAndPort.length);
    const pathIndex = pathAndQuery.indexOf('/');
    result.path = pathAndQuery.substring(pathIndex);

    // Parse query parameters
    const queryIndex = pathAndQuery.indexOf('?');
    if (queryIndex !== -1) {
        const queryParams = pathAndQuery.substring(queryIndex + 1, pathIndex);
        queryParams.split('&').forEach(param => {
            const pair = param.split('=');
            result.queryParams[pair[0]] = pair[1];
        });
    }

    // Get anchor
    const anchorIndex = pathAndQuery.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = pathAndQuery.substring(anchorIndex + 1);
    }

    return result;
}

// Example
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));
","function parseUrl(url) {
    const urlRegex = /^(.*):\/\/([^:/]+)(?::(\d+))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.*))?$/;
    const matches = url.match(urlRegex);

    if (!matches) {
        throw new Error('Invalid URL format');
    }

    const [, protocol, host, port, path, queryParams, anchor] = matches;
    const queryParamObj = {};
    if (queryParams) {
        const queryParamsArr = queryParams.split('&');
        queryParamsArr.forEach(param => {
            const [key, value] = param.split('=');
            queryParamObj[key] = value || null;
        });
    }

    // Return object 
    return {
        protocol: protocol || null,
        host: host || null,
        port: port ? parseInt(port, 10) : null,
        path: path || null,
        queryParams: queryParamObj,
        anchor: anchor || null
    };
}



//another solution is but I prefer the top one

function parseURL(url) {
    const result = {};
    const protocolIndex = url.indexOf('://');
    result.protocol = url.slice(0, protocolIndex);
    const urlWithoutProtocol = url.slice(protocolIndex + 3);

    //  anchor
    const anchorIndex = urlWithoutProtocol.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = urlWithoutProtocol.slice(anchorIndex + 1);
    }

   
    const queryIndex = urlWithoutProtocol.indexOf('?');
    if (queryIndex !== -1) {
        const queryParamsString = urlWithoutProtocol.slice(queryIndex + 1, anchorIndex !== -1 ? anchorIndex : undefined);
        const queryParamsArray = queryParamsString.split('&');
        result.queryParams = {};
        queryParamsArray.forEach(param => {
            const [key, value] = param.split('=');
            result.queryParams[key] = value;
        });
    }

   
    const urlWithoutQueryParams = queryIndex !== -1 ? urlWithoutProtocol.slice(0, queryIndex) : urlWithoutProtocol;
    const [hostAndPort, path] = urlWithoutQueryParams.split('/');
    result.path = '/' + path;
    const [host, port] = hostAndPort.split(':');
    result.host = host;
    result.port = port || '';

    return result;
}


//usage
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));","Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats."
source_code_048,gpt-4_00,0.4,"{'ic_id': {0: 451}, 'ica_id': {0: 4408}, 'question': {0: 'Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats.'}, 'rules': {0: ['The function should not use URL-related library functions for parsing.']}, 'examples': {0: ""Input: 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2'\\nOutput: {\\n  protocol: 'https',\\n  host: 'www.example.com',\\n  port: '8080',\\n  path: '/path/to/page',\\n  queryParams: { name: 'ferret', color: 'purple' },\\n  anchor: 'section2'\\n}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","function parseUrl(url) {
    const result = {
        queryParams: {}
    };

    // Get protocol
    const protocolIndex = url.indexOf('://');
    result.protocol = url.substring(0, protocolIndex);

    // Get host and port
    const afterProtocol = url.substring(protocolIndex + 3);
    const hostAndPort = afterProtocol.split('/')[0];
    const parts = hostAndPort.split(':');
    result.host = parts[0];
    result.port = parts[1] || '';

    // Get path
    const pathAndQuery = afterProtocol.substring(hostAndPort.length);
    const pathIndex = pathAndQuery.indexOf('/');
    result.path = pathAndQuery.substring(pathIndex);

    // Parse query parameters
    const queryIndex = pathAndQuery.indexOf('?');
    if (queryIndex !== -1) {
        const queryParams = pathAndQuery.substring(queryIndex + 1, pathIndex);
        queryParams.split('&').forEach(param => {
            const pair = param.split('=');
            result.queryParams[pair[0]] = pair[1];
        });
    }

    // Get anchor
    const anchorIndex = pathAndQuery.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = pathAndQuery.substring(anchorIndex + 1);
    }

    return result;
}

// Example
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));
","function parseUrl(url) {
    const urlRegex = /^(.*):\/\/([^:/]+)(?::(\d+))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.*))?$/;
    const matches = url.match(urlRegex);

    if (!matches) {
        throw new Error('Invalid URL format');
    }

    const [, protocol, host, port, path, queryParams, anchor] = matches;
    const queryParamObj = {};
    if (queryParams) {
        const queryParamsArr = queryParams.split('&');
        queryParamsArr.forEach(param => {
            const [key, value] = param.split('=');
            queryParamObj[key] = value || null;
        });
    }

    // Return object 
    return {
        protocol: protocol || null,
        host: host || null,
        port: port ? parseInt(port, 10) : null,
        path: path || null,
        queryParams: queryParamObj,
        anchor: anchor || null
    };
}



//another solution is but I prefer the top one

function parseURL(url) {
    const result = {};
    const protocolIndex = url.indexOf('://');
    result.protocol = url.slice(0, protocolIndex);
    const urlWithoutProtocol = url.slice(protocolIndex + 3);

    //  anchor
    const anchorIndex = urlWithoutProtocol.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = urlWithoutProtocol.slice(anchorIndex + 1);
    }

   
    const queryIndex = urlWithoutProtocol.indexOf('?');
    if (queryIndex !== -1) {
        const queryParamsString = urlWithoutProtocol.slice(queryIndex + 1, anchorIndex !== -1 ? anchorIndex : undefined);
        const queryParamsArray = queryParamsString.split('&');
        result.queryParams = {};
        queryParamsArray.forEach(param => {
            const [key, value] = param.split('=');
            result.queryParams[key] = value;
        });
    }

   
    const urlWithoutQueryParams = queryIndex !== -1 ? urlWithoutProtocol.slice(0, queryIndex) : urlWithoutProtocol;
    const [hostAndPort, path] = urlWithoutQueryParams.split('/');
    result.path = '/' + path;
    const [host, port] = hostAndPort.split(':');
    result.host = host;
    result.port = port || '';

    return result;
}


//usage
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));","Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats."
source_code_048,gpt-4_01,0.3,"{'ic_id': {0: 451}, 'ica_id': {0: 4408}, 'question': {0: 'Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats.'}, 'rules': {0: ['The function should not use URL-related library functions for parsing.']}, 'examples': {0: ""Input: 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2'\\nOutput: {\\n  protocol: 'https',\\n  host: 'www.example.com',\\n  port: '8080',\\n  path: '/path/to/page',\\n  queryParams: { name: 'ferret', color: 'purple' },\\n  anchor: 'section2'\\n}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","function parseUrl(url) {
    const result = {
        queryParams: {}
    };

    // Get protocol
    const protocolIndex = url.indexOf('://');
    result.protocol = url.substring(0, protocolIndex);

    // Get host and port
    const afterProtocol = url.substring(protocolIndex + 3);
    const hostAndPort = afterProtocol.split('/')[0];
    const parts = hostAndPort.split(':');
    result.host = parts[0];
    result.port = parts[1] || '';

    // Get path
    const pathAndQuery = afterProtocol.substring(hostAndPort.length);
    const pathIndex = pathAndQuery.indexOf('/');
    result.path = pathAndQuery.substring(pathIndex);

    // Parse query parameters
    const queryIndex = pathAndQuery.indexOf('?');
    if (queryIndex !== -1) {
        const queryParams = pathAndQuery.substring(queryIndex + 1, pathIndex);
        queryParams.split('&').forEach(param => {
            const pair = param.split('=');
            result.queryParams[pair[0]] = pair[1];
        });
    }

    // Get anchor
    const anchorIndex = pathAndQuery.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = pathAndQuery.substring(anchorIndex + 1);
    }

    return result;
}

// Example
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));
","function parseUrl(url) {
    const urlRegex = /^(.*):\/\/([^:/]+)(?::(\d+))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.*))?$/;
    const matches = url.match(urlRegex);

    if (!matches) {
        throw new Error('Invalid URL format');
    }

    const [, protocol, host, port, path, queryParams, anchor] = matches;
    const queryParamObj = {};
    if (queryParams) {
        const queryParamsArr = queryParams.split('&');
        queryParamsArr.forEach(param => {
            const [key, value] = param.split('=');
            queryParamObj[key] = value || null;
        });
    }

    // Return object 
    return {
        protocol: protocol || null,
        host: host || null,
        port: port ? parseInt(port, 10) : null,
        path: path || null,
        queryParams: queryParamObj,
        anchor: anchor || null
    };
}



//another solution is but I prefer the top one

function parseURL(url) {
    const result = {};
    const protocolIndex = url.indexOf('://');
    result.protocol = url.slice(0, protocolIndex);
    const urlWithoutProtocol = url.slice(protocolIndex + 3);

    //  anchor
    const anchorIndex = urlWithoutProtocol.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = urlWithoutProtocol.slice(anchorIndex + 1);
    }

   
    const queryIndex = urlWithoutProtocol.indexOf('?');
    if (queryIndex !== -1) {
        const queryParamsString = urlWithoutProtocol.slice(queryIndex + 1, anchorIndex !== -1 ? anchorIndex : undefined);
        const queryParamsArray = queryParamsString.split('&');
        result.queryParams = {};
        queryParamsArray.forEach(param => {
            const [key, value] = param.split('=');
            result.queryParams[key] = value;
        });
    }

   
    const urlWithoutQueryParams = queryIndex !== -1 ? urlWithoutProtocol.slice(0, queryIndex) : urlWithoutProtocol;
    const [hostAndPort, path] = urlWithoutQueryParams.split('/');
    result.path = '/' + path;
    const [host, port] = hostAndPort.split(':');
    result.host = host;
    result.port = port || '';

    return result;
}


//usage
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));","Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats."
source_code_048,gpt-4-turbo_00,0.3,"{'ic_id': {0: 451}, 'ica_id': {0: 4408}, 'question': {0: 'Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats.'}, 'rules': {0: ['The function should not use URL-related library functions for parsing.']}, 'examples': {0: ""Input: 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2'\\nOutput: {\\n  protocol: 'https',\\n  host: 'www.example.com',\\n  port: '8080',\\n  path: '/path/to/page',\\n  queryParams: { name: 'ferret', color: 'purple' },\\n  anchor: 'section2'\\n}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","function parseUrl(url) {
    const result = {
        queryParams: {}
    };

    // Get protocol
    const protocolIndex = url.indexOf('://');
    result.protocol = url.substring(0, protocolIndex);

    // Get host and port
    const afterProtocol = url.substring(protocolIndex + 3);
    const hostAndPort = afterProtocol.split('/')[0];
    const parts = hostAndPort.split(':');
    result.host = parts[0];
    result.port = parts[1] || '';

    // Get path
    const pathAndQuery = afterProtocol.substring(hostAndPort.length);
    const pathIndex = pathAndQuery.indexOf('/');
    result.path = pathAndQuery.substring(pathIndex);

    // Parse query parameters
    const queryIndex = pathAndQuery.indexOf('?');
    if (queryIndex !== -1) {
        const queryParams = pathAndQuery.substring(queryIndex + 1, pathIndex);
        queryParams.split('&').forEach(param => {
            const pair = param.split('=');
            result.queryParams[pair[0]] = pair[1];
        });
    }

    // Get anchor
    const anchorIndex = pathAndQuery.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = pathAndQuery.substring(anchorIndex + 1);
    }

    return result;
}

// Example
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));
","function parseUrl(url) {
    const urlRegex = /^(.*):\/\/([^:/]+)(?::(\d+))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.*))?$/;
    const matches = url.match(urlRegex);

    if (!matches) {
        throw new Error('Invalid URL format');
    }

    const [, protocol, host, port, path, queryParams, anchor] = matches;
    const queryParamObj = {};
    if (queryParams) {
        const queryParamsArr = queryParams.split('&');
        queryParamsArr.forEach(param => {
            const [key, value] = param.split('=');
            queryParamObj[key] = value || null;
        });
    }

    // Return object 
    return {
        protocol: protocol || null,
        host: host || null,
        port: port ? parseInt(port, 10) : null,
        path: path || null,
        queryParams: queryParamObj,
        anchor: anchor || null
    };
}



//another solution is but I prefer the top one

function parseURL(url) {
    const result = {};
    const protocolIndex = url.indexOf('://');
    result.protocol = url.slice(0, protocolIndex);
    const urlWithoutProtocol = url.slice(protocolIndex + 3);

    //  anchor
    const anchorIndex = urlWithoutProtocol.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = urlWithoutProtocol.slice(anchorIndex + 1);
    }

   
    const queryIndex = urlWithoutProtocol.indexOf('?');
    if (queryIndex !== -1) {
        const queryParamsString = urlWithoutProtocol.slice(queryIndex + 1, anchorIndex !== -1 ? anchorIndex : undefined);
        const queryParamsArray = queryParamsString.split('&');
        result.queryParams = {};
        queryParamsArray.forEach(param => {
            const [key, value] = param.split('=');
            result.queryParams[key] = value;
        });
    }

   
    const urlWithoutQueryParams = queryIndex !== -1 ? urlWithoutProtocol.slice(0, queryIndex) : urlWithoutProtocol;
    const [hostAndPort, path] = urlWithoutQueryParams.split('/');
    result.path = '/' + path;
    const [host, port] = hostAndPort.split(':');
    result.host = host;
    result.port = port || '';

    return result;
}


//usage
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));","Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats."
source_code_048,gpt-4-turbo_01,0.3,"{'ic_id': {0: 451}, 'ica_id': {0: 4408}, 'question': {0: 'Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats.'}, 'rules': {0: ['The function should not use URL-related library functions for parsing.']}, 'examples': {0: ""Input: 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2'\\nOutput: {\\n  protocol: 'https',\\n  host: 'www.example.com',\\n  port: '8080',\\n  path: '/path/to/page',\\n  queryParams: { name: 'ferret', color: 'purple' },\\n  anchor: 'section2'\\n}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 900}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","function parseUrl(url) {
    const result = {
        queryParams: {}
    };

    // Get protocol
    const protocolIndex = url.indexOf('://');
    result.protocol = url.substring(0, protocolIndex);

    // Get host and port
    const afterProtocol = url.substring(protocolIndex + 3);
    const hostAndPort = afterProtocol.split('/')[0];
    const parts = hostAndPort.split(':');
    result.host = parts[0];
    result.port = parts[1] || '';

    // Get path
    const pathAndQuery = afterProtocol.substring(hostAndPort.length);
    const pathIndex = pathAndQuery.indexOf('/');
    result.path = pathAndQuery.substring(pathIndex);

    // Parse query parameters
    const queryIndex = pathAndQuery.indexOf('?');
    if (queryIndex !== -1) {
        const queryParams = pathAndQuery.substring(queryIndex + 1, pathIndex);
        queryParams.split('&').forEach(param => {
            const pair = param.split('=');
            result.queryParams[pair[0]] = pair[1];
        });
    }

    // Get anchor
    const anchorIndex = pathAndQuery.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = pathAndQuery.substring(anchorIndex + 1);
    }

    return result;
}

// Example
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));
","function parseUrl(url) {
    const urlRegex = /^(.*):\/\/([^:/]+)(?::(\d+))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.*))?$/;
    const matches = url.match(urlRegex);

    if (!matches) {
        throw new Error('Invalid URL format');
    }

    const [, protocol, host, port, path, queryParams, anchor] = matches;
    const queryParamObj = {};
    if (queryParams) {
        const queryParamsArr = queryParams.split('&');
        queryParamsArr.forEach(param => {
            const [key, value] = param.split('=');
            queryParamObj[key] = value || null;
        });
    }

    // Return object 
    return {
        protocol: protocol || null,
        host: host || null,
        port: port ? parseInt(port, 10) : null,
        path: path || null,
        queryParams: queryParamObj,
        anchor: anchor || null
    };
}



//another solution is but I prefer the top one

function parseURL(url) {
    const result = {};
    const protocolIndex = url.indexOf('://');
    result.protocol = url.slice(0, protocolIndex);
    const urlWithoutProtocol = url.slice(protocolIndex + 3);

    //  anchor
    const anchorIndex = urlWithoutProtocol.indexOf('#');
    if (anchorIndex !== -1) {
        result.anchor = urlWithoutProtocol.slice(anchorIndex + 1);
    }

   
    const queryIndex = urlWithoutProtocol.indexOf('?');
    if (queryIndex !== -1) {
        const queryParamsString = urlWithoutProtocol.slice(queryIndex + 1, anchorIndex !== -1 ? anchorIndex : undefined);
        const queryParamsArray = queryParamsString.split('&');
        result.queryParams = {};
        queryParamsArray.forEach(param => {
            const [key, value] = param.split('=');
            result.queryParams[key] = value;
        });
    }

   
    const urlWithoutQueryParams = queryIndex !== -1 ? urlWithoutProtocol.slice(0, queryIndex) : urlWithoutProtocol;
    const [hostAndPort, path] = urlWithoutQueryParams.split('/');
    result.path = '/' + path;
    const [host, port] = hostAndPort.split(':');
    result.host = host;
    result.port = port || '';

    return result;
}


//usage
const url = 'https://www.example.com:8080/path/to/page?name=ferret&color=purple#section2';
console.log(parseUrl(url));","Write a function in JavaScript that implements a simple URL parser. The function should accept a string URL and return an object with properties: protocol, host, port (if any), path (including the leading slash), query parameters (as an object), and the anchor (hash). Make assumptions for any standard URL format and ignore authentication, userinfo, or unusual custom formats."
source_code_049,gpt-3.5-turbo_00,0.8,"{'ic_id': {0: 460}, 'ica_id': {0: 4427}, 'question': {0: 'Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).'}, 'rules': {0: ['Ignore spaces, punctuation, and capitalization']}, 'examples': {0: ""Input: 'A man, a plan, a canal: Panama' Output: true\nInput: 'race a car' Output: false""}, 'programming_language': {0: 'Java'}, 'response_time': {0: 148}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","public class PalindromeChecker {
    public static boolean isPalindrome(String str) {
        str = str.toLowerCase().replaceAll(""[^a-zA-Z0-9]"", """");
        int left = 0;
        int right = str.length() - 1;
        
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
    
    public static void main(String[] args) {
        String input1 = ""A man, a plan, a canal: Panama"";
        String input2 = ""race a car"";
        
        System.out.println(""Input: '"" + input1 + ""' Output: "" + isPalindrome(input1));
        System.out.println(""Input: '"" + input2 + ""' Output: "" + isPalindrome(input2));
    }
}
","import java.util.Scanner;
 
class palindrome {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        System.out.println(""Enter a string as an input to check whether it is palindrome or not"");
        String input= scanner.nextLine();
        //checking whether palindrome or not
        if(isPalindrome(input))
        {
            System.out.println(input+"" is a palindrome string"");
        }
        else
        {
            System.out.println(input+"" is not a palindrome string"");
        }
    }
 
    public static boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        
        while(left < right)
        {
            if(str.charAt(left) != str.charAt(right))
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    } 
}","Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization)."
source_code_049,gpt-3.5-turbo_01,0.8,"{'ic_id': {0: 460}, 'ica_id': {0: 4427}, 'question': {0: 'Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).'}, 'rules': {0: ['Ignore spaces, punctuation, and capitalization']}, 'examples': {0: ""Input: 'A man, a plan, a canal: Panama' Output: true\nInput: 'race a car' Output: false""}, 'programming_language': {0: 'Java'}, 'response_time': {0: 148}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","public class PalindromeChecker {
    public static boolean isPalindrome(String str) {
        str = str.toLowerCase().replaceAll(""[^a-zA-Z0-9]"", """");
        int left = 0;
        int right = str.length() - 1;
        
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
    
    public static void main(String[] args) {
        String input1 = ""A man, a plan, a canal: Panama"";
        String input2 = ""race a car"";
        
        System.out.println(""Input: '"" + input1 + ""' Output: "" + isPalindrome(input1));
        System.out.println(""Input: '"" + input2 + ""' Output: "" + isPalindrome(input2));
    }
}
","import java.util.Scanner;
 
class palindrome {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        System.out.println(""Enter a string as an input to check whether it is palindrome or not"");
        String input= scanner.nextLine();
        //checking whether palindrome or not
        if(isPalindrome(input))
        {
            System.out.println(input+"" is a palindrome string"");
        }
        else
        {
            System.out.println(input+"" is not a palindrome string"");
        }
    }
 
    public static boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        
        while(left < right)
        {
            if(str.charAt(left) != str.charAt(right))
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    } 
}","Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization)."
source_code_049,gpt-4_00,0.2,"{'ic_id': {0: 460}, 'ica_id': {0: 4427}, 'question': {0: 'Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).'}, 'rules': {0: ['Ignore spaces, punctuation, and capitalization']}, 'examples': {0: ""Input: 'A man, a plan, a canal: Panama' Output: true\nInput: 'race a car' Output: false""}, 'programming_language': {0: 'Java'}, 'response_time': {0: 148}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","public class PalindromeChecker {
    public static boolean isPalindrome(String str) {
        str = str.toLowerCase().replaceAll(""[^a-zA-Z0-9]"", """");
        int left = 0;
        int right = str.length() - 1;
        
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
    
    public static void main(String[] args) {
        String input1 = ""A man, a plan, a canal: Panama"";
        String input2 = ""race a car"";
        
        System.out.println(""Input: '"" + input1 + ""' Output: "" + isPalindrome(input1));
        System.out.println(""Input: '"" + input2 + ""' Output: "" + isPalindrome(input2));
    }
}
","import java.util.Scanner;
 
class palindrome {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        System.out.println(""Enter a string as an input to check whether it is palindrome or not"");
        String input= scanner.nextLine();
        //checking whether palindrome or not
        if(isPalindrome(input))
        {
            System.out.println(input+"" is a palindrome string"");
        }
        else
        {
            System.out.println(input+"" is not a palindrome string"");
        }
    }
 
    public static boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        
        while(left < right)
        {
            if(str.charAt(left) != str.charAt(right))
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    } 
}","Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization)."
source_code_049,gpt-4_01,0.2,"{'ic_id': {0: 460}, 'ica_id': {0: 4427}, 'question': {0: 'Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).'}, 'rules': {0: ['Ignore spaces, punctuation, and capitalization']}, 'examples': {0: ""Input: 'A man, a plan, a canal: Panama' Output: true\nInput: 'race a car' Output: false""}, 'programming_language': {0: 'Java'}, 'response_time': {0: 148}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","public class PalindromeChecker {
    public static boolean isPalindrome(String str) {
        str = str.toLowerCase().replaceAll(""[^a-zA-Z0-9]"", """");
        int left = 0;
        int right = str.length() - 1;
        
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
    
    public static void main(String[] args) {
        String input1 = ""A man, a plan, a canal: Panama"";
        String input2 = ""race a car"";
        
        System.out.println(""Input: '"" + input1 + ""' Output: "" + isPalindrome(input1));
        System.out.println(""Input: '"" + input2 + ""' Output: "" + isPalindrome(input2));
    }
}
","import java.util.Scanner;
 
class palindrome {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        System.out.println(""Enter a string as an input to check whether it is palindrome or not"");
        String input= scanner.nextLine();
        //checking whether palindrome or not
        if(isPalindrome(input))
        {
            System.out.println(input+"" is a palindrome string"");
        }
        else
        {
            System.out.println(input+"" is not a palindrome string"");
        }
    }
 
    public static boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        
        while(left < right)
        {
            if(str.charAt(left) != str.charAt(right))
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    } 
}","Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization)."
source_code_049,gpt-4-turbo_00,0.8,"{'ic_id': {0: 460}, 'ica_id': {0: 4427}, 'question': {0: 'Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).'}, 'rules': {0: ['Ignore spaces, punctuation, and capitalization']}, 'examples': {0: ""Input: 'A man, a plan, a canal: Panama' Output: true\nInput: 'race a car' Output: false""}, 'programming_language': {0: 'Java'}, 'response_time': {0: 148}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","public class PalindromeChecker {
    public static boolean isPalindrome(String str) {
        str = str.toLowerCase().replaceAll(""[^a-zA-Z0-9]"", """");
        int left = 0;
        int right = str.length() - 1;
        
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
    
    public static void main(String[] args) {
        String input1 = ""A man, a plan, a canal: Panama"";
        String input2 = ""race a car"";
        
        System.out.println(""Input: '"" + input1 + ""' Output: "" + isPalindrome(input1));
        System.out.println(""Input: '"" + input2 + ""' Output: "" + isPalindrome(input2));
    }
}
","import java.util.Scanner;
 
class palindrome {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        System.out.println(""Enter a string as an input to check whether it is palindrome or not"");
        String input= scanner.nextLine();
        //checking whether palindrome or not
        if(isPalindrome(input))
        {
            System.out.println(input+"" is a palindrome string"");
        }
        else
        {
            System.out.println(input+"" is not a palindrome string"");
        }
    }
 
    public static boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        
        while(left < right)
        {
            if(str.charAt(left) != str.charAt(right))
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    } 
}","Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization)."
source_code_049,gpt-4-turbo_01,0.8,"{'ic_id': {0: 460}, 'ica_id': {0: 4427}, 'question': {0: 'Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).'}, 'rules': {0: ['Ignore spaces, punctuation, and capitalization']}, 'examples': {0: ""Input: 'A man, a plan, a canal: Panama' Output: true\nInput: 'race a car' Output: false""}, 'programming_language': {0: 'Java'}, 'response_time': {0: 148}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","public class PalindromeChecker {
    public static boolean isPalindrome(String str) {
        str = str.toLowerCase().replaceAll(""[^a-zA-Z0-9]"", """");
        int left = 0;
        int right = str.length() - 1;
        
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
    
    public static void main(String[] args) {
        String input1 = ""A man, a plan, a canal: Panama"";
        String input2 = ""race a car"";
        
        System.out.println(""Input: '"" + input1 + ""' Output: "" + isPalindrome(input1));
        System.out.println(""Input: '"" + input2 + ""' Output: "" + isPalindrome(input2));
    }
}
","import java.util.Scanner;
 
class palindrome {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        System.out.println(""Enter a string as an input to check whether it is palindrome or not"");
        String input= scanner.nextLine();
        //checking whether palindrome or not
        if(isPalindrome(input))
        {
            System.out.println(input+"" is a palindrome string"");
        }
        else
        {
            System.out.println(input+"" is not a palindrome string"");
        }
    }
 
    public static boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        
        while(left < right)
        {
            if(str.charAt(left) != str.charAt(right))
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    } 
}","Construct a Java function that determines if a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization)."
source_code_050,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 461}, 'ica_id': {0: 4432}, 'question': {0: ""Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file.""}, 'rules': {0: ['Must use native WordPress functions and SQL queries.', 'The shortcode should be easy to use by inserting it into any post or page.']}, 'examples': {0: 'Input: Category ID = 3\nOutput: A styled list of the latest 10 posts from category ID 3\n\nInput: Category ID = 5\nOutput: A styled list of the latest 10 posts from category ID 5'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 146}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","// Register custom shortcode to fetch and display latest posts from a specific category
function custom_category_posts_shortcode($atts) {
    // Extract shortcode attributes
    extract(shortcode_atts(array(
        'category_id' => 0, // Default category ID is 0
    ), $atts));

    global $wpdb;

    // Query to fetch latest 10 posts from specific category using SQL
    $query = $wpdb->prepare(""
        SELECT p.post_title, p.post_excerpt, p.post_date
        FROM {$wpdb->prefix}posts AS p
        INNER JOIN {$wpdb->prefix}term_relationships AS tr ON p.ID = tr.object_id
        INNER JOIN {$wpdb->prefix}term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        WHERE p.post_type = 'post' AND p.post_status = 'publish' AND tt.term_id = %d
        ORDER BY p.post_date DESC
        LIMIT 10
    "", $category_id);

    $posts = $wpdb->get_results($query);

    // Build HTML output for the posts
    $output = '<ul class=""custom-category-posts"">';

    foreach ($posts as $post) {
        $output .= '<li>';
        $output .= '<h3>' . $post->post_title . '</h3>';
        $output .= '<p>' . $post->post_excerpt . '</p>';
        $output .= '<p>' . $post->post_date . '</p>';
        $output .= '</li>';
    }

    $output .= '</ul>';

    return $output;
}

// Register the shortcode for easy use in posts and pages
add_shortcode('custom_posts_category', 'custom_category_posts_shortcode');
","<ul>
  
<?php
// Define our WP Query Parameters
$the_query = new WP_Query( 'posts_per_page=5' ); ?>
  
<?php
// Start our WP Query
while ($the_query -> have_posts()) : $the_query -> the_post();
// Display the Post Title with Hyperlink
?>
  
<li><a href=""<?php the_permalink() ?>""><?php the_title(); ?></a></li>
  
<li><?php
// Display the Post Excerpt
the_excerpt(__('(moreâ€¦)')); ?></li>
  
<?php
// Repeat the process and reset once it hits the limit
endwhile;
wp_reset_postdata();
?>
</ul>","Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file."
source_code_050,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 461}, 'ica_id': {0: 4432}, 'question': {0: ""Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file.""}, 'rules': {0: ['Must use native WordPress functions and SQL queries.', 'The shortcode should be easy to use by inserting it into any post or page.']}, 'examples': {0: 'Input: Category ID = 3\nOutput: A styled list of the latest 10 posts from category ID 3\n\nInput: Category ID = 5\nOutput: A styled list of the latest 10 posts from category ID 5'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 146}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","// Register custom shortcode to fetch and display latest posts from a specific category
function custom_category_posts_shortcode($atts) {
    // Extract shortcode attributes
    extract(shortcode_atts(array(
        'category_id' => 0, // Default category ID is 0
    ), $atts));

    global $wpdb;

    // Query to fetch latest 10 posts from specific category using SQL
    $query = $wpdb->prepare(""
        SELECT p.post_title, p.post_excerpt, p.post_date
        FROM {$wpdb->prefix}posts AS p
        INNER JOIN {$wpdb->prefix}term_relationships AS tr ON p.ID = tr.object_id
        INNER JOIN {$wpdb->prefix}term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        WHERE p.post_type = 'post' AND p.post_status = 'publish' AND tt.term_id = %d
        ORDER BY p.post_date DESC
        LIMIT 10
    "", $category_id);

    $posts = $wpdb->get_results($query);

    // Build HTML output for the posts
    $output = '<ul class=""custom-category-posts"">';

    foreach ($posts as $post) {
        $output .= '<li>';
        $output .= '<h3>' . $post->post_title . '</h3>';
        $output .= '<p>' . $post->post_excerpt . '</p>';
        $output .= '<p>' . $post->post_date . '</p>';
        $output .= '</li>';
    }

    $output .= '</ul>';

    return $output;
}

// Register the shortcode for easy use in posts and pages
add_shortcode('custom_posts_category', 'custom_category_posts_shortcode');
","<ul>
  
<?php
// Define our WP Query Parameters
$the_query = new WP_Query( 'posts_per_page=5' ); ?>
  
<?php
// Start our WP Query
while ($the_query -> have_posts()) : $the_query -> the_post();
// Display the Post Title with Hyperlink
?>
  
<li><a href=""<?php the_permalink() ?>""><?php the_title(); ?></a></li>
  
<li><?php
// Display the Post Excerpt
the_excerpt(__('(moreâ€¦)')); ?></li>
  
<?php
// Repeat the process and reset once it hits the limit
endwhile;
wp_reset_postdata();
?>
</ul>","Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file."
source_code_050,gpt-4_00,0.1,"{'ic_id': {0: 461}, 'ica_id': {0: 4432}, 'question': {0: ""Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file.""}, 'rules': {0: ['Must use native WordPress functions and SQL queries.', 'The shortcode should be easy to use by inserting it into any post or page.']}, 'examples': {0: 'Input: Category ID = 3\nOutput: A styled list of the latest 10 posts from category ID 3\n\nInput: Category ID = 5\nOutput: A styled list of the latest 10 posts from category ID 5'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 146}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","// Register custom shortcode to fetch and display latest posts from a specific category
function custom_category_posts_shortcode($atts) {
    // Extract shortcode attributes
    extract(shortcode_atts(array(
        'category_id' => 0, // Default category ID is 0
    ), $atts));

    global $wpdb;

    // Query to fetch latest 10 posts from specific category using SQL
    $query = $wpdb->prepare(""
        SELECT p.post_title, p.post_excerpt, p.post_date
        FROM {$wpdb->prefix}posts AS p
        INNER JOIN {$wpdb->prefix}term_relationships AS tr ON p.ID = tr.object_id
        INNER JOIN {$wpdb->prefix}term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        WHERE p.post_type = 'post' AND p.post_status = 'publish' AND tt.term_id = %d
        ORDER BY p.post_date DESC
        LIMIT 10
    "", $category_id);

    $posts = $wpdb->get_results($query);

    // Build HTML output for the posts
    $output = '<ul class=""custom-category-posts"">';

    foreach ($posts as $post) {
        $output .= '<li>';
        $output .= '<h3>' . $post->post_title . '</h3>';
        $output .= '<p>' . $post->post_excerpt . '</p>';
        $output .= '<p>' . $post->post_date . '</p>';
        $output .= '</li>';
    }

    $output .= '</ul>';

    return $output;
}

// Register the shortcode for easy use in posts and pages
add_shortcode('custom_posts_category', 'custom_category_posts_shortcode');
","<ul>
  
<?php
// Define our WP Query Parameters
$the_query = new WP_Query( 'posts_per_page=5' ); ?>
  
<?php
// Start our WP Query
while ($the_query -> have_posts()) : $the_query -> the_post();
// Display the Post Title with Hyperlink
?>
  
<li><a href=""<?php the_permalink() ?>""><?php the_title(); ?></a></li>
  
<li><?php
// Display the Post Excerpt
the_excerpt(__('(moreâ€¦)')); ?></li>
  
<?php
// Repeat the process and reset once it hits the limit
endwhile;
wp_reset_postdata();
?>
</ul>","Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file."
source_code_050,gpt-4_01,0.1,"{'ic_id': {0: 461}, 'ica_id': {0: 4432}, 'question': {0: ""Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file.""}, 'rules': {0: ['Must use native WordPress functions and SQL queries.', 'The shortcode should be easy to use by inserting it into any post or page.']}, 'examples': {0: 'Input: Category ID = 3\nOutput: A styled list of the latest 10 posts from category ID 3\n\nInput: Category ID = 5\nOutput: A styled list of the latest 10 posts from category ID 5'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 146}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","// Register custom shortcode to fetch and display latest posts from a specific category
function custom_category_posts_shortcode($atts) {
    // Extract shortcode attributes
    extract(shortcode_atts(array(
        'category_id' => 0, // Default category ID is 0
    ), $atts));

    global $wpdb;

    // Query to fetch latest 10 posts from specific category using SQL
    $query = $wpdb->prepare(""
        SELECT p.post_title, p.post_excerpt, p.post_date
        FROM {$wpdb->prefix}posts AS p
        INNER JOIN {$wpdb->prefix}term_relationships AS tr ON p.ID = tr.object_id
        INNER JOIN {$wpdb->prefix}term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        WHERE p.post_type = 'post' AND p.post_status = 'publish' AND tt.term_id = %d
        ORDER BY p.post_date DESC
        LIMIT 10
    "", $category_id);

    $posts = $wpdb->get_results($query);

    // Build HTML output for the posts
    $output = '<ul class=""custom-category-posts"">';

    foreach ($posts as $post) {
        $output .= '<li>';
        $output .= '<h3>' . $post->post_title . '</h3>';
        $output .= '<p>' . $post->post_excerpt . '</p>';
        $output .= '<p>' . $post->post_date . '</p>';
        $output .= '</li>';
    }

    $output .= '</ul>';

    return $output;
}

// Register the shortcode for easy use in posts and pages
add_shortcode('custom_posts_category', 'custom_category_posts_shortcode');
","<ul>
  
<?php
// Define our WP Query Parameters
$the_query = new WP_Query( 'posts_per_page=5' ); ?>
  
<?php
// Start our WP Query
while ($the_query -> have_posts()) : $the_query -> the_post();
// Display the Post Title with Hyperlink
?>
  
<li><a href=""<?php the_permalink() ?>""><?php the_title(); ?></a></li>
  
<li><?php
// Display the Post Excerpt
the_excerpt(__('(moreâ€¦)')); ?></li>
  
<?php
// Repeat the process and reset once it hits the limit
endwhile;
wp_reset_postdata();
?>
</ul>","Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file."
source_code_050,gpt-4-turbo_00,0.1,"{'ic_id': {0: 461}, 'ica_id': {0: 4432}, 'question': {0: ""Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file.""}, 'rules': {0: ['Must use native WordPress functions and SQL queries.', 'The shortcode should be easy to use by inserting it into any post or page.']}, 'examples': {0: 'Input: Category ID = 3\nOutput: A styled list of the latest 10 posts from category ID 3\n\nInput: Category ID = 5\nOutput: A styled list of the latest 10 posts from category ID 5'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 146}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","// Register custom shortcode to fetch and display latest posts from a specific category
function custom_category_posts_shortcode($atts) {
    // Extract shortcode attributes
    extract(shortcode_atts(array(
        'category_id' => 0, // Default category ID is 0
    ), $atts));

    global $wpdb;

    // Query to fetch latest 10 posts from specific category using SQL
    $query = $wpdb->prepare(""
        SELECT p.post_title, p.post_excerpt, p.post_date
        FROM {$wpdb->prefix}posts AS p
        INNER JOIN {$wpdb->prefix}term_relationships AS tr ON p.ID = tr.object_id
        INNER JOIN {$wpdb->prefix}term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        WHERE p.post_type = 'post' AND p.post_status = 'publish' AND tt.term_id = %d
        ORDER BY p.post_date DESC
        LIMIT 10
    "", $category_id);

    $posts = $wpdb->get_results($query);

    // Build HTML output for the posts
    $output = '<ul class=""custom-category-posts"">';

    foreach ($posts as $post) {
        $output .= '<li>';
        $output .= '<h3>' . $post->post_title . '</h3>';
        $output .= '<p>' . $post->post_excerpt . '</p>';
        $output .= '<p>' . $post->post_date . '</p>';
        $output .= '</li>';
    }

    $output .= '</ul>';

    return $output;
}

// Register the shortcode for easy use in posts and pages
add_shortcode('custom_posts_category', 'custom_category_posts_shortcode');
","<ul>
  
<?php
// Define our WP Query Parameters
$the_query = new WP_Query( 'posts_per_page=5' ); ?>
  
<?php
// Start our WP Query
while ($the_query -> have_posts()) : $the_query -> the_post();
// Display the Post Title with Hyperlink
?>
  
<li><a href=""<?php the_permalink() ?>""><?php the_title(); ?></a></li>
  
<li><?php
// Display the Post Excerpt
the_excerpt(__('(moreâ€¦)')); ?></li>
  
<?php
// Repeat the process and reset once it hits the limit
endwhile;
wp_reset_postdata();
?>
</ul>","Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file."
source_code_050,gpt-4-turbo_01,0.1,"{'ic_id': {0: 461}, 'ica_id': {0: 4432}, 'question': {0: ""Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file.""}, 'rules': {0: ['Must use native WordPress functions and SQL queries.', 'The shortcode should be easy to use by inserting it into any post or page.']}, 'examples': {0: 'Input: Category ID = 3\nOutput: A styled list of the latest 10 posts from category ID 3\n\nInput: Category ID = 5\nOutput: A styled list of the latest 10 posts from category ID 5'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 146}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","// Register custom shortcode to fetch and display latest posts from a specific category
function custom_category_posts_shortcode($atts) {
    // Extract shortcode attributes
    extract(shortcode_atts(array(
        'category_id' => 0, // Default category ID is 0
    ), $atts));

    global $wpdb;

    // Query to fetch latest 10 posts from specific category using SQL
    $query = $wpdb->prepare(""
        SELECT p.post_title, p.post_excerpt, p.post_date
        FROM {$wpdb->prefix}posts AS p
        INNER JOIN {$wpdb->prefix}term_relationships AS tr ON p.ID = tr.object_id
        INNER JOIN {$wpdb->prefix}term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        WHERE p.post_type = 'post' AND p.post_status = 'publish' AND tt.term_id = %d
        ORDER BY p.post_date DESC
        LIMIT 10
    "", $category_id);

    $posts = $wpdb->get_results($query);

    // Build HTML output for the posts
    $output = '<ul class=""custom-category-posts"">';

    foreach ($posts as $post) {
        $output .= '<li>';
        $output .= '<h3>' . $post->post_title . '</h3>';
        $output .= '<p>' . $post->post_excerpt . '</p>';
        $output .= '<p>' . $post->post_date . '</p>';
        $output .= '</li>';
    }

    $output .= '</ul>';

    return $output;
}

// Register the shortcode for easy use in posts and pages
add_shortcode('custom_posts_category', 'custom_category_posts_shortcode');
","<ul>
  
<?php
// Define our WP Query Parameters
$the_query = new WP_Query( 'posts_per_page=5' ); ?>
  
<?php
// Start our WP Query
while ($the_query -> have_posts()) : $the_query -> the_post();
// Display the Post Title with Hyperlink
?>
  
<li><a href=""<?php the_permalink() ?>""><?php the_title(); ?></a></li>
  
<li><?php
// Display the Post Excerpt
the_excerpt(__('(moreâ€¦)')); ?></li>
  
<?php
// Repeat the process and reset once it hits the limit
endwhile;
wp_reset_postdata();
?>
</ul>","Create a custom WordPress shortcode that fetches and displays the latest 10 posts from a specific category using HTML and CSS for styling. The posts should be displayed as a list with the post title, excerpt, and publication date. You should use SQL to query the database for the necessary information. Implement this within a WordPress theme's functions.php file."
source_code_051,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 467}, 'ica_id': {0: 4456}, 'question': {0: 'Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code.'}, 'rules': {0: ['Use native Node.js modules only.', 'Use async techniques like Promises or async/await.']}, 'examples': {0: ""Input: ['https://example.com', 'https://google.com'] Output: {'https://example.com': 200, 'https://google.com': 200}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 15}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 225.0}}","const http = require('http');

async function checkUrlsStatus(urls) {
    const statusObj = {};

    const getStatus = async (url) => {
        return new Promise((resolve) => {
            http.get(url, (res) => {
                resolve(res.statusCode);
            }).on('error', (error) => {
                resolve(500); // Internal Server Error
            });
        });
    };

    await Promise.all(urls.map(async (url) => {
        const status = await getStatus(url);
        statusObj[url] = status;
    }));

    return statusObj;
}

// Example
const urls = ['https://example.com', 'https://google.com'];
checkUrlsStatus(urls)
    .then((result) => {
        console.log(result);
    })
    .catch((error) => {
        console.error(error);
    });

module.exports = checkUrlsStatus;
","hi hello
i dont know how to code","Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code."
source_code_051,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 467}, 'ica_id': {0: 4456}, 'question': {0: 'Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code.'}, 'rules': {0: ['Use native Node.js modules only.', 'Use async techniques like Promises or async/await.']}, 'examples': {0: ""Input: ['https://example.com', 'https://google.com'] Output: {'https://example.com': 200, 'https://google.com': 200}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 15}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 225.0}}","const http = require('http');

async function checkUrlsStatus(urls) {
    const statusObj = {};

    const getStatus = async (url) => {
        return new Promise((resolve) => {
            http.get(url, (res) => {
                resolve(res.statusCode);
            }).on('error', (error) => {
                resolve(500); // Internal Server Error
            });
        });
    };

    await Promise.all(urls.map(async (url) => {
        const status = await getStatus(url);
        statusObj[url] = status;
    }));

    return statusObj;
}

// Example
const urls = ['https://example.com', 'https://google.com'];
checkUrlsStatus(urls)
    .then((result) => {
        console.log(result);
    })
    .catch((error) => {
        console.error(error);
    });

module.exports = checkUrlsStatus;
","hi hello
i dont know how to code","Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code."
source_code_051,gpt-4_00,0.0,"{'ic_id': {0: 467}, 'ica_id': {0: 4456}, 'question': {0: 'Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code.'}, 'rules': {0: ['Use native Node.js modules only.', 'Use async techniques like Promises or async/await.']}, 'examples': {0: ""Input: ['https://example.com', 'https://google.com'] Output: {'https://example.com': 200, 'https://google.com': 200}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 15}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 225.0}}","const http = require('http');

async function checkUrlsStatus(urls) {
    const statusObj = {};

    const getStatus = async (url) => {
        return new Promise((resolve) => {
            http.get(url, (res) => {
                resolve(res.statusCode);
            }).on('error', (error) => {
                resolve(500); // Internal Server Error
            });
        });
    };

    await Promise.all(urls.map(async (url) => {
        const status = await getStatus(url);
        statusObj[url] = status;
    }));

    return statusObj;
}

// Example
const urls = ['https://example.com', 'https://google.com'];
checkUrlsStatus(urls)
    .then((result) => {
        console.log(result);
    })
    .catch((error) => {
        console.error(error);
    });

module.exports = checkUrlsStatus;
","hi hello
i dont know how to code","Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code."
source_code_051,gpt-4_01,0.0,"{'ic_id': {0: 467}, 'ica_id': {0: 4456}, 'question': {0: 'Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code.'}, 'rules': {0: ['Use native Node.js modules only.', 'Use async techniques like Promises or async/await.']}, 'examples': {0: ""Input: ['https://example.com', 'https://google.com'] Output: {'https://example.com': 200, 'https://google.com': 200}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 15}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 225.0}}","const http = require('http');

async function checkUrlsStatus(urls) {
    const statusObj = {};

    const getStatus = async (url) => {
        return new Promise((resolve) => {
            http.get(url, (res) => {
                resolve(res.statusCode);
            }).on('error', (error) => {
                resolve(500); // Internal Server Error
            });
        });
    };

    await Promise.all(urls.map(async (url) => {
        const status = await getStatus(url);
        statusObj[url] = status;
    }));

    return statusObj;
}

// Example
const urls = ['https://example.com', 'https://google.com'];
checkUrlsStatus(urls)
    .then((result) => {
        console.log(result);
    })
    .catch((error) => {
        console.error(error);
    });

module.exports = checkUrlsStatus;
","hi hello
i dont know how to code","Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code."
source_code_051,gpt-4-turbo_00,0.0,"{'ic_id': {0: 467}, 'ica_id': {0: 4456}, 'question': {0: 'Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code.'}, 'rules': {0: ['Use native Node.js modules only.', 'Use async techniques like Promises or async/await.']}, 'examples': {0: ""Input: ['https://example.com', 'https://google.com'] Output: {'https://example.com': 200, 'https://google.com': 200}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 15}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 225.0}}","const http = require('http');

async function checkUrlsStatus(urls) {
    const statusObj = {};

    const getStatus = async (url) => {
        return new Promise((resolve) => {
            http.get(url, (res) => {
                resolve(res.statusCode);
            }).on('error', (error) => {
                resolve(500); // Internal Server Error
            });
        });
    };

    await Promise.all(urls.map(async (url) => {
        const status = await getStatus(url);
        statusObj[url] = status;
    }));

    return statusObj;
}

// Example
const urls = ['https://example.com', 'https://google.com'];
checkUrlsStatus(urls)
    .then((result) => {
        console.log(result);
    })
    .catch((error) => {
        console.error(error);
    });

module.exports = checkUrlsStatus;
","hi hello
i dont know how to code","Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code."
source_code_051,gpt-4-turbo_01,0.0,"{'ic_id': {0: 467}, 'ica_id': {0: 4456}, 'question': {0: 'Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code.'}, 'rules': {0: ['Use native Node.js modules only.', 'Use async techniques like Promises or async/await.']}, 'examples': {0: ""Input: ['https://example.com', 'https://google.com'] Output: {'https://example.com': 200, 'https://google.com': 200}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 15}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 225.0}}","const http = require('http');

async function checkUrlsStatus(urls) {
    const statusObj = {};

    const getStatus = async (url) => {
        return new Promise((resolve) => {
            http.get(url, (res) => {
                resolve(res.statusCode);
            }).on('error', (error) => {
                resolve(500); // Internal Server Error
            });
        });
    };

    await Promise.all(urls.map(async (url) => {
        const status = await getStatus(url);
        statusObj[url] = status;
    }));

    return statusObj;
}

// Example
const urls = ['https://example.com', 'https://google.com'];
checkUrlsStatus(urls)
    .then((result) => {
        console.log(result);
    })
    .catch((error) => {
        console.error(error);
    });

module.exports = checkUrlsStatus;
","hi hello
i dont know how to code","Create a Node.js function that takes as input an array of URLs. In a single pass, make concurrent HTTP requests to each one of the URLs, storing the HTTP status code for each one in an object. The function should return a Promise that resolves to an object mapping each URL to its corresponding status code."
source_code_052,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 468}, 'ica_id': {0: 4466}, 'question': {0: 'Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence.'}, 'rules': {0: ['No use of third-party libraries.', 'Function must handle edge cases like empty arrays or limits too small for any words.', 'Words cannot be broken into parts and must remain whole.', 'Include a full stop at the end of the sentence']}, 'examples': {0: ""Input: words = ['hello', 'world', 'this', 'is', 'a', 'test'], maxChars = 20 Output: 'hello world this.'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 9}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function createSentence(words, maxChars) {
    if (words.length === 0 || maxChars < 1) {
        return """";
    }

    let sentence = """";
    let currentLength = 0;

    for (let i = 0; i < words.length; i++) {
        if (sentence.length + words[i].length + 1 <= maxChars) {
            sentence += words[i] + "" "";
            currentLength += words[i].length + 1;
        } else {
            break;
        }
    }

    if (sentence.length > 0) {
        sentence = sentence.trim() + ""."";
    }

    return sentence;
}

// Test the function with the example
const words = ['hello', 'world', 'this', 'is', 'a', 'test'];
const maxChars = 20;
console.log(createSentence(words, maxChars)); // Output: 'hello world this.'
","<div class=""content-box"">
	<p>Welcome to our website!</p>
</div>
<style>
	.content-box {
		margin: 20;
		background-colour: #00G;
	}
</style>","Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence."
source_code_052,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 468}, 'ica_id': {0: 4466}, 'question': {0: 'Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence.'}, 'rules': {0: ['No use of third-party libraries.', 'Function must handle edge cases like empty arrays or limits too small for any words.', 'Words cannot be broken into parts and must remain whole.', 'Include a full stop at the end of the sentence']}, 'examples': {0: ""Input: words = ['hello', 'world', 'this', 'is', 'a', 'test'], maxChars = 20 Output: 'hello world this.'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 9}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function createSentence(words, maxChars) {
    if (words.length === 0 || maxChars < 1) {
        return """";
    }

    let sentence = """";
    let currentLength = 0;

    for (let i = 0; i < words.length; i++) {
        if (sentence.length + words[i].length + 1 <= maxChars) {
            sentence += words[i] + "" "";
            currentLength += words[i].length + 1;
        } else {
            break;
        }
    }

    if (sentence.length > 0) {
        sentence = sentence.trim() + ""."";
    }

    return sentence;
}

// Test the function with the example
const words = ['hello', 'world', 'this', 'is', 'a', 'test'];
const maxChars = 20;
console.log(createSentence(words, maxChars)); // Output: 'hello world this.'
","<div class=""content-box"">
	<p>Welcome to our website!</p>
</div>
<style>
	.content-box {
		margin: 20;
		background-colour: #00G;
	}
</style>","Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence."
source_code_052,gpt-4_00,0.1,"{'ic_id': {0: 468}, 'ica_id': {0: 4466}, 'question': {0: 'Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence.'}, 'rules': {0: ['No use of third-party libraries.', 'Function must handle edge cases like empty arrays or limits too small for any words.', 'Words cannot be broken into parts and must remain whole.', 'Include a full stop at the end of the sentence']}, 'examples': {0: ""Input: words = ['hello', 'world', 'this', 'is', 'a', 'test'], maxChars = 20 Output: 'hello world this.'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 9}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function createSentence(words, maxChars) {
    if (words.length === 0 || maxChars < 1) {
        return """";
    }

    let sentence = """";
    let currentLength = 0;

    for (let i = 0; i < words.length; i++) {
        if (sentence.length + words[i].length + 1 <= maxChars) {
            sentence += words[i] + "" "";
            currentLength += words[i].length + 1;
        } else {
            break;
        }
    }

    if (sentence.length > 0) {
        sentence = sentence.trim() + ""."";
    }

    return sentence;
}

// Test the function with the example
const words = ['hello', 'world', 'this', 'is', 'a', 'test'];
const maxChars = 20;
console.log(createSentence(words, maxChars)); // Output: 'hello world this.'
","<div class=""content-box"">
	<p>Welcome to our website!</p>
</div>
<style>
	.content-box {
		margin: 20;
		background-colour: #00G;
	}
</style>","Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence."
source_code_052,gpt-4_01,0.1,"{'ic_id': {0: 468}, 'ica_id': {0: 4466}, 'question': {0: 'Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence.'}, 'rules': {0: ['No use of third-party libraries.', 'Function must handle edge cases like empty arrays or limits too small for any words.', 'Words cannot be broken into parts and must remain whole.', 'Include a full stop at the end of the sentence']}, 'examples': {0: ""Input: words = ['hello', 'world', 'this', 'is', 'a', 'test'], maxChars = 20 Output: 'hello world this.'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 9}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function createSentence(words, maxChars) {
    if (words.length === 0 || maxChars < 1) {
        return """";
    }

    let sentence = """";
    let currentLength = 0;

    for (let i = 0; i < words.length; i++) {
        if (sentence.length + words[i].length + 1 <= maxChars) {
            sentence += words[i] + "" "";
            currentLength += words[i].length + 1;
        } else {
            break;
        }
    }

    if (sentence.length > 0) {
        sentence = sentence.trim() + ""."";
    }

    return sentence;
}

// Test the function with the example
const words = ['hello', 'world', 'this', 'is', 'a', 'test'];
const maxChars = 20;
console.log(createSentence(words, maxChars)); // Output: 'hello world this.'
","<div class=""content-box"">
	<p>Welcome to our website!</p>
</div>
<style>
	.content-box {
		margin: 20;
		background-colour: #00G;
	}
</style>","Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence."
source_code_052,gpt-4-turbo_00,0.1,"{'ic_id': {0: 468}, 'ica_id': {0: 4466}, 'question': {0: 'Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence.'}, 'rules': {0: ['No use of third-party libraries.', 'Function must handle edge cases like empty arrays or limits too small for any words.', 'Words cannot be broken into parts and must remain whole.', 'Include a full stop at the end of the sentence']}, 'examples': {0: ""Input: words = ['hello', 'world', 'this', 'is', 'a', 'test'], maxChars = 20 Output: 'hello world this.'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 9}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function createSentence(words, maxChars) {
    if (words.length === 0 || maxChars < 1) {
        return """";
    }

    let sentence = """";
    let currentLength = 0;

    for (let i = 0; i < words.length; i++) {
        if (sentence.length + words[i].length + 1 <= maxChars) {
            sentence += words[i] + "" "";
            currentLength += words[i].length + 1;
        } else {
            break;
        }
    }

    if (sentence.length > 0) {
        sentence = sentence.trim() + ""."";
    }

    return sentence;
}

// Test the function with the example
const words = ['hello', 'world', 'this', 'is', 'a', 'test'];
const maxChars = 20;
console.log(createSentence(words, maxChars)); // Output: 'hello world this.'
","<div class=""content-box"">
	<p>Welcome to our website!</p>
</div>
<style>
	.content-box {
		margin: 20;
		background-colour: #00G;
	}
</style>","Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence."
source_code_052,gpt-4-turbo_01,0.1,"{'ic_id': {0: 468}, 'ica_id': {0: 4466}, 'question': {0: 'Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence.'}, 'rules': {0: ['No use of third-party libraries.', 'Function must handle edge cases like empty arrays or limits too small for any words.', 'Words cannot be broken into parts and must remain whole.', 'Include a full stop at the end of the sentence']}, 'examples': {0: ""Input: words = ['hello', 'world', 'this', 'is', 'a', 'test'], maxChars = 20 Output: 'hello world this.'""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 9}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function createSentence(words, maxChars) {
    if (words.length === 0 || maxChars < 1) {
        return """";
    }

    let sentence = """";
    let currentLength = 0;

    for (let i = 0; i < words.length; i++) {
        if (sentence.length + words[i].length + 1 <= maxChars) {
            sentence += words[i] + "" "";
            currentLength += words[i].length + 1;
        } else {
            break;
        }
    }

    if (sentence.length > 0) {
        sentence = sentence.trim() + ""."";
    }

    return sentence;
}

// Test the function with the example
const words = ['hello', 'world', 'this', 'is', 'a', 'test'];
const maxChars = 20;
console.log(createSentence(words, maxChars)); // Output: 'hello world this.'
","<div class=""content-box"">
	<p>Welcome to our website!</p>
</div>
<style>
	.content-box {
		margin: 20;
		background-colour: #00G;
	}
</style>","Write a JavaScript function that takes an array of words and a maximum character limit as arguments, and returns a string of a single sentence that includes as many of the words as possible without surpassing the maximum character limit. Words cannot be chopped off and must be separated by spaces, with a full stop at the end of the sentence."
source_code_053,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 473}, 'ica_id': {0: 4489}, 'question': {0: 'Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.'}, 'rules': {0: ['Do not directly manipulate the DOM, use state and props for updates', 'Ensure the table updates correctly for any change']}, 'examples': {0: 'Input: Add row -> Output: Table with an extra row\nInput: Remove 2nd column -> Output: Table without the 2nd column'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 321}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import React, { useState } from 'react';

const DynamicTable = () => {
  const [tableData, setTableData] = useState([
    ['', ''],
    ['', '']
  ]);

  const handleAddRow = () => {
    const updatedTableData = [...tableData, Array(tableData[0].length).fill('')];
    setTableData(updatedTableData);
  };

  const handleAddColumn = () => {
    const updatedTableData = tableData.map(row => [...row, '']);
    setTableData(updatedTableData);
  };

  const handleRemoveRow = (index) => {
    const updatedTableData = tableData.filter((row, i) => i !== index);
    setTableData(updatedTableData);
  };

  const handleRemoveColumn = (index) => {
    const updatedTableData = tableData.map(row => row.filter((cell, i) => i !== index));
    setTableData(updatedTableData);
  };

  const handleCellChange = (rowIndex, colIndex, value) => {
    const updatedTableData = tableData.map((row, i) =>
      i === rowIndex ? row.map((cell, j) => (j === colIndex ? value : cell)) : row
    );
    setTableData(updatedTableData);
  };

  return (
    <div>
      <table>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, colIndex) => (
                <td key={colIndex}>
                  <input
                    type=""text""
                    value={cell}
                    onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}
                  />
                </td>
              ))}
              <td>
                <button onClick={() => handleRemoveRow(rowIndex)}>Remove Row</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>
              <button onClick={handleAddRow}>Add Row</button>
            </td>
            <td>
              <button onClick={handleAddColumn}>Add Column</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default DynamicTable;
","import React, { useState } from 'react';

function TableComponent() {
  const [columns, setColumns] = useState(['Column 1', 'Column 2', 'Column 3']);
  const [rows, setRows] = useState([
    ['Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3']
  ]);

  const addRow = () => {
    const newRow = ['New Cell 1', 'New Cell 2', 'New Cell 3']; // Assuming 3 cells per row
    setRows([...rows, newRow]);
  };

  const removeSecondColumn = () => {
    setColumns(columns.filter((_, index) => index !== 1)); // Remove 2nd column
    setRows(rows.map(row => row.filter((_, index) => index !== 1)));
  };

  return (
    <div>
      <table>
        <thead>
          <tr>
            {columns.map((column, index) => <th key={index}>{column}</th>)}
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={addRow}>Add Row</button>
      <button onClick={removeSecondColumn}>Remove 2nd Column</button>
    </div>
  );
}

export default TableComponent;

for table update
function TableComponent({ data }) {
  // Assuming data is an array of objects with { id, name, value }
  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item) => (
          <tr key={item.id}> {/* Unique key */}
            <td>{item.name}</td>
            <td>{item.value}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}",Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.
source_code_053,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 473}, 'ica_id': {0: 4489}, 'question': {0: 'Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.'}, 'rules': {0: ['Do not directly manipulate the DOM, use state and props for updates', 'Ensure the table updates correctly for any change']}, 'examples': {0: 'Input: Add row -> Output: Table with an extra row\nInput: Remove 2nd column -> Output: Table without the 2nd column'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 321}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import React, { useState } from 'react';

const DynamicTable = () => {
  const [tableData, setTableData] = useState([
    ['', ''],
    ['', '']
  ]);

  const handleAddRow = () => {
    const updatedTableData = [...tableData, Array(tableData[0].length).fill('')];
    setTableData(updatedTableData);
  };

  const handleAddColumn = () => {
    const updatedTableData = tableData.map(row => [...row, '']);
    setTableData(updatedTableData);
  };

  const handleRemoveRow = (index) => {
    const updatedTableData = tableData.filter((row, i) => i !== index);
    setTableData(updatedTableData);
  };

  const handleRemoveColumn = (index) => {
    const updatedTableData = tableData.map(row => row.filter((cell, i) => i !== index));
    setTableData(updatedTableData);
  };

  const handleCellChange = (rowIndex, colIndex, value) => {
    const updatedTableData = tableData.map((row, i) =>
      i === rowIndex ? row.map((cell, j) => (j === colIndex ? value : cell)) : row
    );
    setTableData(updatedTableData);
  };

  return (
    <div>
      <table>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, colIndex) => (
                <td key={colIndex}>
                  <input
                    type=""text""
                    value={cell}
                    onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}
                  />
                </td>
              ))}
              <td>
                <button onClick={() => handleRemoveRow(rowIndex)}>Remove Row</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>
              <button onClick={handleAddRow}>Add Row</button>
            </td>
            <td>
              <button onClick={handleAddColumn}>Add Column</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default DynamicTable;
","import React, { useState } from 'react';

function TableComponent() {
  const [columns, setColumns] = useState(['Column 1', 'Column 2', 'Column 3']);
  const [rows, setRows] = useState([
    ['Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3']
  ]);

  const addRow = () => {
    const newRow = ['New Cell 1', 'New Cell 2', 'New Cell 3']; // Assuming 3 cells per row
    setRows([...rows, newRow]);
  };

  const removeSecondColumn = () => {
    setColumns(columns.filter((_, index) => index !== 1)); // Remove 2nd column
    setRows(rows.map(row => row.filter((_, index) => index !== 1)));
  };

  return (
    <div>
      <table>
        <thead>
          <tr>
            {columns.map((column, index) => <th key={index}>{column}</th>)}
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={addRow}>Add Row</button>
      <button onClick={removeSecondColumn}>Remove 2nd Column</button>
    </div>
  );
}

export default TableComponent;

for table update
function TableComponent({ data }) {
  // Assuming data is an array of objects with { id, name, value }
  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item) => (
          <tr key={item.id}> {/* Unique key */}
            <td>{item.name}</td>
            <td>{item.value}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}",Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.
source_code_053,gpt-4_00,0.2,"{'ic_id': {0: 473}, 'ica_id': {0: 4489}, 'question': {0: 'Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.'}, 'rules': {0: ['Do not directly manipulate the DOM, use state and props for updates', 'Ensure the table updates correctly for any change']}, 'examples': {0: 'Input: Add row -> Output: Table with an extra row\nInput: Remove 2nd column -> Output: Table without the 2nd column'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 321}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import React, { useState } from 'react';

const DynamicTable = () => {
  const [tableData, setTableData] = useState([
    ['', ''],
    ['', '']
  ]);

  const handleAddRow = () => {
    const updatedTableData = [...tableData, Array(tableData[0].length).fill('')];
    setTableData(updatedTableData);
  };

  const handleAddColumn = () => {
    const updatedTableData = tableData.map(row => [...row, '']);
    setTableData(updatedTableData);
  };

  const handleRemoveRow = (index) => {
    const updatedTableData = tableData.filter((row, i) => i !== index);
    setTableData(updatedTableData);
  };

  const handleRemoveColumn = (index) => {
    const updatedTableData = tableData.map(row => row.filter((cell, i) => i !== index));
    setTableData(updatedTableData);
  };

  const handleCellChange = (rowIndex, colIndex, value) => {
    const updatedTableData = tableData.map((row, i) =>
      i === rowIndex ? row.map((cell, j) => (j === colIndex ? value : cell)) : row
    );
    setTableData(updatedTableData);
  };

  return (
    <div>
      <table>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, colIndex) => (
                <td key={colIndex}>
                  <input
                    type=""text""
                    value={cell}
                    onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}
                  />
                </td>
              ))}
              <td>
                <button onClick={() => handleRemoveRow(rowIndex)}>Remove Row</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>
              <button onClick={handleAddRow}>Add Row</button>
            </td>
            <td>
              <button onClick={handleAddColumn}>Add Column</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default DynamicTable;
","import React, { useState } from 'react';

function TableComponent() {
  const [columns, setColumns] = useState(['Column 1', 'Column 2', 'Column 3']);
  const [rows, setRows] = useState([
    ['Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3']
  ]);

  const addRow = () => {
    const newRow = ['New Cell 1', 'New Cell 2', 'New Cell 3']; // Assuming 3 cells per row
    setRows([...rows, newRow]);
  };

  const removeSecondColumn = () => {
    setColumns(columns.filter((_, index) => index !== 1)); // Remove 2nd column
    setRows(rows.map(row => row.filter((_, index) => index !== 1)));
  };

  return (
    <div>
      <table>
        <thead>
          <tr>
            {columns.map((column, index) => <th key={index}>{column}</th>)}
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={addRow}>Add Row</button>
      <button onClick={removeSecondColumn}>Remove 2nd Column</button>
    </div>
  );
}

export default TableComponent;

for table update
function TableComponent({ data }) {
  // Assuming data is an array of objects with { id, name, value }
  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item) => (
          <tr key={item.id}> {/* Unique key */}
            <td>{item.name}</td>
            <td>{item.value}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}",Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.
source_code_053,gpt-4_01,0.2,"{'ic_id': {0: 473}, 'ica_id': {0: 4489}, 'question': {0: 'Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.'}, 'rules': {0: ['Do not directly manipulate the DOM, use state and props for updates', 'Ensure the table updates correctly for any change']}, 'examples': {0: 'Input: Add row -> Output: Table with an extra row\nInput: Remove 2nd column -> Output: Table without the 2nd column'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 321}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import React, { useState } from 'react';

const DynamicTable = () => {
  const [tableData, setTableData] = useState([
    ['', ''],
    ['', '']
  ]);

  const handleAddRow = () => {
    const updatedTableData = [...tableData, Array(tableData[0].length).fill('')];
    setTableData(updatedTableData);
  };

  const handleAddColumn = () => {
    const updatedTableData = tableData.map(row => [...row, '']);
    setTableData(updatedTableData);
  };

  const handleRemoveRow = (index) => {
    const updatedTableData = tableData.filter((row, i) => i !== index);
    setTableData(updatedTableData);
  };

  const handleRemoveColumn = (index) => {
    const updatedTableData = tableData.map(row => row.filter((cell, i) => i !== index));
    setTableData(updatedTableData);
  };

  const handleCellChange = (rowIndex, colIndex, value) => {
    const updatedTableData = tableData.map((row, i) =>
      i === rowIndex ? row.map((cell, j) => (j === colIndex ? value : cell)) : row
    );
    setTableData(updatedTableData);
  };

  return (
    <div>
      <table>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, colIndex) => (
                <td key={colIndex}>
                  <input
                    type=""text""
                    value={cell}
                    onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}
                  />
                </td>
              ))}
              <td>
                <button onClick={() => handleRemoveRow(rowIndex)}>Remove Row</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>
              <button onClick={handleAddRow}>Add Row</button>
            </td>
            <td>
              <button onClick={handleAddColumn}>Add Column</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default DynamicTable;
","import React, { useState } from 'react';

function TableComponent() {
  const [columns, setColumns] = useState(['Column 1', 'Column 2', 'Column 3']);
  const [rows, setRows] = useState([
    ['Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3']
  ]);

  const addRow = () => {
    const newRow = ['New Cell 1', 'New Cell 2', 'New Cell 3']; // Assuming 3 cells per row
    setRows([...rows, newRow]);
  };

  const removeSecondColumn = () => {
    setColumns(columns.filter((_, index) => index !== 1)); // Remove 2nd column
    setRows(rows.map(row => row.filter((_, index) => index !== 1)));
  };

  return (
    <div>
      <table>
        <thead>
          <tr>
            {columns.map((column, index) => <th key={index}>{column}</th>)}
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={addRow}>Add Row</button>
      <button onClick={removeSecondColumn}>Remove 2nd Column</button>
    </div>
  );
}

export default TableComponent;

for table update
function TableComponent({ data }) {
  // Assuming data is an array of objects with { id, name, value }
  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item) => (
          <tr key={item.id}> {/* Unique key */}
            <td>{item.name}</td>
            <td>{item.value}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}",Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.
source_code_053,gpt-4-turbo_00,0.2,"{'ic_id': {0: 473}, 'ica_id': {0: 4489}, 'question': {0: 'Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.'}, 'rules': {0: ['Do not directly manipulate the DOM, use state and props for updates', 'Ensure the table updates correctly for any change']}, 'examples': {0: 'Input: Add row -> Output: Table with an extra row\nInput: Remove 2nd column -> Output: Table without the 2nd column'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 321}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import React, { useState } from 'react';

const DynamicTable = () => {
  const [tableData, setTableData] = useState([
    ['', ''],
    ['', '']
  ]);

  const handleAddRow = () => {
    const updatedTableData = [...tableData, Array(tableData[0].length).fill('')];
    setTableData(updatedTableData);
  };

  const handleAddColumn = () => {
    const updatedTableData = tableData.map(row => [...row, '']);
    setTableData(updatedTableData);
  };

  const handleRemoveRow = (index) => {
    const updatedTableData = tableData.filter((row, i) => i !== index);
    setTableData(updatedTableData);
  };

  const handleRemoveColumn = (index) => {
    const updatedTableData = tableData.map(row => row.filter((cell, i) => i !== index));
    setTableData(updatedTableData);
  };

  const handleCellChange = (rowIndex, colIndex, value) => {
    const updatedTableData = tableData.map((row, i) =>
      i === rowIndex ? row.map((cell, j) => (j === colIndex ? value : cell)) : row
    );
    setTableData(updatedTableData);
  };

  return (
    <div>
      <table>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, colIndex) => (
                <td key={colIndex}>
                  <input
                    type=""text""
                    value={cell}
                    onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}
                  />
                </td>
              ))}
              <td>
                <button onClick={() => handleRemoveRow(rowIndex)}>Remove Row</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>
              <button onClick={handleAddRow}>Add Row</button>
            </td>
            <td>
              <button onClick={handleAddColumn}>Add Column</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default DynamicTable;
","import React, { useState } from 'react';

function TableComponent() {
  const [columns, setColumns] = useState(['Column 1', 'Column 2', 'Column 3']);
  const [rows, setRows] = useState([
    ['Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3']
  ]);

  const addRow = () => {
    const newRow = ['New Cell 1', 'New Cell 2', 'New Cell 3']; // Assuming 3 cells per row
    setRows([...rows, newRow]);
  };

  const removeSecondColumn = () => {
    setColumns(columns.filter((_, index) => index !== 1)); // Remove 2nd column
    setRows(rows.map(row => row.filter((_, index) => index !== 1)));
  };

  return (
    <div>
      <table>
        <thead>
          <tr>
            {columns.map((column, index) => <th key={index}>{column}</th>)}
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={addRow}>Add Row</button>
      <button onClick={removeSecondColumn}>Remove 2nd Column</button>
    </div>
  );
}

export default TableComponent;

for table update
function TableComponent({ data }) {
  // Assuming data is an array of objects with { id, name, value }
  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item) => (
          <tr key={item.id}> {/* Unique key */}
            <td>{item.name}</td>
            <td>{item.value}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}",Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.
source_code_053,gpt-4-turbo_01,0.2,"{'ic_id': {0: 473}, 'ica_id': {0: 4489}, 'question': {0: 'Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.'}, 'rules': {0: ['Do not directly manipulate the DOM, use state and props for updates', 'Ensure the table updates correctly for any change']}, 'examples': {0: 'Input: Add row -> Output: Table with an extra row\nInput: Remove 2nd column -> Output: Table without the 2nd column'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 321}, 'score': {0: 2}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 75.0}}","import React, { useState } from 'react';

const DynamicTable = () => {
  const [tableData, setTableData] = useState([
    ['', ''],
    ['', '']
  ]);

  const handleAddRow = () => {
    const updatedTableData = [...tableData, Array(tableData[0].length).fill('')];
    setTableData(updatedTableData);
  };

  const handleAddColumn = () => {
    const updatedTableData = tableData.map(row => [...row, '']);
    setTableData(updatedTableData);
  };

  const handleRemoveRow = (index) => {
    const updatedTableData = tableData.filter((row, i) => i !== index);
    setTableData(updatedTableData);
  };

  const handleRemoveColumn = (index) => {
    const updatedTableData = tableData.map(row => row.filter((cell, i) => i !== index));
    setTableData(updatedTableData);
  };

  const handleCellChange = (rowIndex, colIndex, value) => {
    const updatedTableData = tableData.map((row, i) =>
      i === rowIndex ? row.map((cell, j) => (j === colIndex ? value : cell)) : row
    );
    setTableData(updatedTableData);
  };

  return (
    <div>
      <table>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, colIndex) => (
                <td key={colIndex}>
                  <input
                    type=""text""
                    value={cell}
                    onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}
                  />
                </td>
              ))}
              <td>
                <button onClick={() => handleRemoveRow(rowIndex)}>Remove Row</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>
              <button onClick={handleAddRow}>Add Row</button>
            </td>
            <td>
              <button onClick={handleAddColumn}>Add Column</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default DynamicTable;
","import React, { useState } from 'react';

function TableComponent() {
  const [columns, setColumns] = useState(['Column 1', 'Column 2', 'Column 3']);
  const [rows, setRows] = useState([
    ['Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3']
  ]);

  const addRow = () => {
    const newRow = ['New Cell 1', 'New Cell 2', 'New Cell 3']; // Assuming 3 cells per row
    setRows([...rows, newRow]);
  };

  const removeSecondColumn = () => {
    setColumns(columns.filter((_, index) => index !== 1)); // Remove 2nd column
    setRows(rows.map(row => row.filter((_, index) => index !== 1)));
  };

  return (
    <div>
      <table>
        <thead>
          <tr>
            {columns.map((column, index) => <th key={index}>{column}</th>)}
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={addRow}>Add Row</button>
      <button onClick={removeSecondColumn}>Remove 2nd Column</button>
    </div>
  );
}

export default TableComponent;

for table update
function TableComponent({ data }) {
  // Assuming data is an array of objects with { id, name, value }
  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item) => (
          <tr key={item.id}> {/* Unique key */}
            <td>{item.name}</td>
            <td>{item.value}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}",Build a React component that allows users to create a dynamic table. Users should be able to add any number of rows and columns to the table and fill each cell with text. The component must also support removing specific rows or columns as needed. Ensure that the state management is handled properly and any changes to the table are reflected immediately on the user interface.
source_code_054,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 476}, 'ica_id': {0: 4508}, 'question': {0: 'Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission.'}, 'rules': {0: [""Utilize Flutter's StreamBuilder for real-time updates."", 'Properly structure the Firebase Realtime Database for storing messages.', 'Handle sorting of messages by timestamp within the app.', 'Proper error handling must be implemented for data retrieval and submission.']}, 'examples': {0: ""Input: User adds a new message 'Hello World' from the Flutter app. Expected Output: The message list in the app updates in real-time and the new message 'Hello World' appears ordered by timestamp. Additionally, Firebase Realtime Database reflects this new entry.""}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 193}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real-Time Messages'),
        ),
        body: MessagesList(databaseRef: databaseRef),
        floatingActionButton: AddMessageButton(databaseRef: databaseRef),
      ),
    );
  }
}

class MessagesList extends StatelessWidget {
  final DatabaseReference databaseRef;

  MessagesList({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder(
      stream: databaseRef.orderByChild('timestamp').onValue,
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        List<Message> messages = [];
        snapshot.data!.snapshot.value.forEach((key, value) {
          messages.add(Message.fromMap(value));
        });
        messages.sort((a, b) => a.timestamp.compareTo(b.timestamp));

        return ListView.builder(
          itemCount: messages.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(messages[index].text),
            );
          },
        );
      },
    );
  }
}

class AddMessageButton extends StatelessWidget {
  final DatabaseReference databaseRef;

  AddMessageButton({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () {
        databaseRef.push().set({
          'text': 'New Message',
          'timestamp': DateTime.now().millisecondsSinceEpoch
        });
      },
      child: Icon(Icons.add),
    );
  }
}

class Message {
  final String text;
  final int timestamp;

  Message({required this.text, required this.timestamp});

  factory Message.fromMap(Map<dynamic, dynamic> map) {
    return Message(
      text: map['text'],
      timestamp: map['timestamp'],
    );
  }
}
","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Realtime Database Demo',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatelessWidget {
  final DatabaseReference _databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Messages')),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder(
              stream: _databaseRef.orderByChild('timestamp').onValue,
              builder: (context, snapshot) {
                if (snapshot.hasError || snapshot.connectionState == ConnectionState.waiting)
                  return Center(child: CircularProgressIndicator());
                List messages = snapshot.data.snapshot.value?.values?.toList() ?? [];
                messages.sort((a, b) => b['timestamp'].compareTo(a['timestamp']));
                return ListView.builder(
                  itemCount: messages.length,
                  itemBuilder: (context, index) => ListTile(
                    title: Text(messages[index]['text']),
                    subtitle: Text(messages[index]['timestamp']),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(hintText: 'Enter message'),
                    onSubmitted: (text) => _addMessage(text),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send),
                  onPressed: () => _addMessage(text),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _addMessage(String text) {
    if (text.trim().isEmpty) return;
    _databaseRef.push().set({'text': text, 'timestamp': DateTime.now().toUtc().toString()});
  }
}","Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission."
source_code_054,gpt-3.5-turbo_01,0.3,"{'ic_id': {0: 476}, 'ica_id': {0: 4508}, 'question': {0: 'Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission.'}, 'rules': {0: [""Utilize Flutter's StreamBuilder for real-time updates."", 'Properly structure the Firebase Realtime Database for storing messages.', 'Handle sorting of messages by timestamp within the app.', 'Proper error handling must be implemented for data retrieval and submission.']}, 'examples': {0: ""Input: User adds a new message 'Hello World' from the Flutter app. Expected Output: The message list in the app updates in real-time and the new message 'Hello World' appears ordered by timestamp. Additionally, Firebase Realtime Database reflects this new entry.""}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 193}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real-Time Messages'),
        ),
        body: MessagesList(databaseRef: databaseRef),
        floatingActionButton: AddMessageButton(databaseRef: databaseRef),
      ),
    );
  }
}

class MessagesList extends StatelessWidget {
  final DatabaseReference databaseRef;

  MessagesList({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder(
      stream: databaseRef.orderByChild('timestamp').onValue,
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        List<Message> messages = [];
        snapshot.data!.snapshot.value.forEach((key, value) {
          messages.add(Message.fromMap(value));
        });
        messages.sort((a, b) => a.timestamp.compareTo(b.timestamp));

        return ListView.builder(
          itemCount: messages.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(messages[index].text),
            );
          },
        );
      },
    );
  }
}

class AddMessageButton extends StatelessWidget {
  final DatabaseReference databaseRef;

  AddMessageButton({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () {
        databaseRef.push().set({
          'text': 'New Message',
          'timestamp': DateTime.now().millisecondsSinceEpoch
        });
      },
      child: Icon(Icons.add),
    );
  }
}

class Message {
  final String text;
  final int timestamp;

  Message({required this.text, required this.timestamp});

  factory Message.fromMap(Map<dynamic, dynamic> map) {
    return Message(
      text: map['text'],
      timestamp: map['timestamp'],
    );
  }
}
","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Realtime Database Demo',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatelessWidget {
  final DatabaseReference _databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Messages')),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder(
              stream: _databaseRef.orderByChild('timestamp').onValue,
              builder: (context, snapshot) {
                if (snapshot.hasError || snapshot.connectionState == ConnectionState.waiting)
                  return Center(child: CircularProgressIndicator());
                List messages = snapshot.data.snapshot.value?.values?.toList() ?? [];
                messages.sort((a, b) => b['timestamp'].compareTo(a['timestamp']));
                return ListView.builder(
                  itemCount: messages.length,
                  itemBuilder: (context, index) => ListTile(
                    title: Text(messages[index]['text']),
                    subtitle: Text(messages[index]['timestamp']),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(hintText: 'Enter message'),
                    onSubmitted: (text) => _addMessage(text),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send),
                  onPressed: () => _addMessage(text),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _addMessage(String text) {
    if (text.trim().isEmpty) return;
    _databaseRef.push().set({'text': text, 'timestamp': DateTime.now().toUtc().toString()});
  }
}","Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission."
source_code_054,gpt-4_00,0.3,"{'ic_id': {0: 476}, 'ica_id': {0: 4508}, 'question': {0: 'Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission.'}, 'rules': {0: [""Utilize Flutter's StreamBuilder for real-time updates."", 'Properly structure the Firebase Realtime Database for storing messages.', 'Handle sorting of messages by timestamp within the app.', 'Proper error handling must be implemented for data retrieval and submission.']}, 'examples': {0: ""Input: User adds a new message 'Hello World' from the Flutter app. Expected Output: The message list in the app updates in real-time and the new message 'Hello World' appears ordered by timestamp. Additionally, Firebase Realtime Database reflects this new entry.""}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 193}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real-Time Messages'),
        ),
        body: MessagesList(databaseRef: databaseRef),
        floatingActionButton: AddMessageButton(databaseRef: databaseRef),
      ),
    );
  }
}

class MessagesList extends StatelessWidget {
  final DatabaseReference databaseRef;

  MessagesList({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder(
      stream: databaseRef.orderByChild('timestamp').onValue,
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        List<Message> messages = [];
        snapshot.data!.snapshot.value.forEach((key, value) {
          messages.add(Message.fromMap(value));
        });
        messages.sort((a, b) => a.timestamp.compareTo(b.timestamp));

        return ListView.builder(
          itemCount: messages.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(messages[index].text),
            );
          },
        );
      },
    );
  }
}

class AddMessageButton extends StatelessWidget {
  final DatabaseReference databaseRef;

  AddMessageButton({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () {
        databaseRef.push().set({
          'text': 'New Message',
          'timestamp': DateTime.now().millisecondsSinceEpoch
        });
      },
      child: Icon(Icons.add),
    );
  }
}

class Message {
  final String text;
  final int timestamp;

  Message({required this.text, required this.timestamp});

  factory Message.fromMap(Map<dynamic, dynamic> map) {
    return Message(
      text: map['text'],
      timestamp: map['timestamp'],
    );
  }
}
","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Realtime Database Demo',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatelessWidget {
  final DatabaseReference _databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Messages')),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder(
              stream: _databaseRef.orderByChild('timestamp').onValue,
              builder: (context, snapshot) {
                if (snapshot.hasError || snapshot.connectionState == ConnectionState.waiting)
                  return Center(child: CircularProgressIndicator());
                List messages = snapshot.data.snapshot.value?.values?.toList() ?? [];
                messages.sort((a, b) => b['timestamp'].compareTo(a['timestamp']));
                return ListView.builder(
                  itemCount: messages.length,
                  itemBuilder: (context, index) => ListTile(
                    title: Text(messages[index]['text']),
                    subtitle: Text(messages[index]['timestamp']),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(hintText: 'Enter message'),
                    onSubmitted: (text) => _addMessage(text),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send),
                  onPressed: () => _addMessage(text),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _addMessage(String text) {
    if (text.trim().isEmpty) return;
    _databaseRef.push().set({'text': text, 'timestamp': DateTime.now().toUtc().toString()});
  }
}","Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission."
source_code_054,gpt-4_01,0.2,"{'ic_id': {0: 476}, 'ica_id': {0: 4508}, 'question': {0: 'Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission.'}, 'rules': {0: [""Utilize Flutter's StreamBuilder for real-time updates."", 'Properly structure the Firebase Realtime Database for storing messages.', 'Handle sorting of messages by timestamp within the app.', 'Proper error handling must be implemented for data retrieval and submission.']}, 'examples': {0: ""Input: User adds a new message 'Hello World' from the Flutter app. Expected Output: The message list in the app updates in real-time and the new message 'Hello World' appears ordered by timestamp. Additionally, Firebase Realtime Database reflects this new entry.""}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 193}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real-Time Messages'),
        ),
        body: MessagesList(databaseRef: databaseRef),
        floatingActionButton: AddMessageButton(databaseRef: databaseRef),
      ),
    );
  }
}

class MessagesList extends StatelessWidget {
  final DatabaseReference databaseRef;

  MessagesList({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder(
      stream: databaseRef.orderByChild('timestamp').onValue,
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        List<Message> messages = [];
        snapshot.data!.snapshot.value.forEach((key, value) {
          messages.add(Message.fromMap(value));
        });
        messages.sort((a, b) => a.timestamp.compareTo(b.timestamp));

        return ListView.builder(
          itemCount: messages.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(messages[index].text),
            );
          },
        );
      },
    );
  }
}

class AddMessageButton extends StatelessWidget {
  final DatabaseReference databaseRef;

  AddMessageButton({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () {
        databaseRef.push().set({
          'text': 'New Message',
          'timestamp': DateTime.now().millisecondsSinceEpoch
        });
      },
      child: Icon(Icons.add),
    );
  }
}

class Message {
  final String text;
  final int timestamp;

  Message({required this.text, required this.timestamp});

  factory Message.fromMap(Map<dynamic, dynamic> map) {
    return Message(
      text: map['text'],
      timestamp: map['timestamp'],
    );
  }
}
","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Realtime Database Demo',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatelessWidget {
  final DatabaseReference _databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Messages')),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder(
              stream: _databaseRef.orderByChild('timestamp').onValue,
              builder: (context, snapshot) {
                if (snapshot.hasError || snapshot.connectionState == ConnectionState.waiting)
                  return Center(child: CircularProgressIndicator());
                List messages = snapshot.data.snapshot.value?.values?.toList() ?? [];
                messages.sort((a, b) => b['timestamp'].compareTo(a['timestamp']));
                return ListView.builder(
                  itemCount: messages.length,
                  itemBuilder: (context, index) => ListTile(
                    title: Text(messages[index]['text']),
                    subtitle: Text(messages[index]['timestamp']),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(hintText: 'Enter message'),
                    onSubmitted: (text) => _addMessage(text),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send),
                  onPressed: () => _addMessage(text),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _addMessage(String text) {
    if (text.trim().isEmpty) return;
    _databaseRef.push().set({'text': text, 'timestamp': DateTime.now().toUtc().toString()});
  }
}","Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission."
source_code_054,gpt-4-turbo_00,0.2,"{'ic_id': {0: 476}, 'ica_id': {0: 4508}, 'question': {0: 'Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission.'}, 'rules': {0: [""Utilize Flutter's StreamBuilder for real-time updates."", 'Properly structure the Firebase Realtime Database for storing messages.', 'Handle sorting of messages by timestamp within the app.', 'Proper error handling must be implemented for data retrieval and submission.']}, 'examples': {0: ""Input: User adds a new message 'Hello World' from the Flutter app. Expected Output: The message list in the app updates in real-time and the new message 'Hello World' appears ordered by timestamp. Additionally, Firebase Realtime Database reflects this new entry.""}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 193}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real-Time Messages'),
        ),
        body: MessagesList(databaseRef: databaseRef),
        floatingActionButton: AddMessageButton(databaseRef: databaseRef),
      ),
    );
  }
}

class MessagesList extends StatelessWidget {
  final DatabaseReference databaseRef;

  MessagesList({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder(
      stream: databaseRef.orderByChild('timestamp').onValue,
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        List<Message> messages = [];
        snapshot.data!.snapshot.value.forEach((key, value) {
          messages.add(Message.fromMap(value));
        });
        messages.sort((a, b) => a.timestamp.compareTo(b.timestamp));

        return ListView.builder(
          itemCount: messages.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(messages[index].text),
            );
          },
        );
      },
    );
  }
}

class AddMessageButton extends StatelessWidget {
  final DatabaseReference databaseRef;

  AddMessageButton({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () {
        databaseRef.push().set({
          'text': 'New Message',
          'timestamp': DateTime.now().millisecondsSinceEpoch
        });
      },
      child: Icon(Icons.add),
    );
  }
}

class Message {
  final String text;
  final int timestamp;

  Message({required this.text, required this.timestamp});

  factory Message.fromMap(Map<dynamic, dynamic> map) {
    return Message(
      text: map['text'],
      timestamp: map['timestamp'],
    );
  }
}
","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Realtime Database Demo',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatelessWidget {
  final DatabaseReference _databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Messages')),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder(
              stream: _databaseRef.orderByChild('timestamp').onValue,
              builder: (context, snapshot) {
                if (snapshot.hasError || snapshot.connectionState == ConnectionState.waiting)
                  return Center(child: CircularProgressIndicator());
                List messages = snapshot.data.snapshot.value?.values?.toList() ?? [];
                messages.sort((a, b) => b['timestamp'].compareTo(a['timestamp']));
                return ListView.builder(
                  itemCount: messages.length,
                  itemBuilder: (context, index) => ListTile(
                    title: Text(messages[index]['text']),
                    subtitle: Text(messages[index]['timestamp']),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(hintText: 'Enter message'),
                    onSubmitted: (text) => _addMessage(text),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send),
                  onPressed: () => _addMessage(text),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _addMessage(String text) {
    if (text.trim().isEmpty) return;
    _databaseRef.push().set({'text': text, 'timestamp': DateTime.now().toUtc().toString()});
  }
}","Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission."
source_code_054,gpt-4-turbo_01,0.2,"{'ic_id': {0: 476}, 'ica_id': {0: 4508}, 'question': {0: 'Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission.'}, 'rules': {0: [""Utilize Flutter's StreamBuilder for real-time updates."", 'Properly structure the Firebase Realtime Database for storing messages.', 'Handle sorting of messages by timestamp within the app.', 'Proper error handling must be implemented for data retrieval and submission.']}, 'examples': {0: ""Input: User adds a new message 'Hello World' from the Flutter app. Expected Output: The message list in the app updates in real-time and the new message 'Hello World' appears ordered by timestamp. Additionally, Firebase Realtime Database reflects this new entry.""}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 193}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real-Time Messages'),
        ),
        body: MessagesList(databaseRef: databaseRef),
        floatingActionButton: AddMessageButton(databaseRef: databaseRef),
      ),
    );
  }
}

class MessagesList extends StatelessWidget {
  final DatabaseReference databaseRef;

  MessagesList({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder(
      stream: databaseRef.orderByChild('timestamp').onValue,
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        List<Message> messages = [];
        snapshot.data!.snapshot.value.forEach((key, value) {
          messages.add(Message.fromMap(value));
        });
        messages.sort((a, b) => a.timestamp.compareTo(b.timestamp));

        return ListView.builder(
          itemCount: messages.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(messages[index].text),
            );
          },
        );
      },
    );
  }
}

class AddMessageButton extends StatelessWidget {
  final DatabaseReference databaseRef;

  AddMessageButton({required this.databaseRef});

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () {
        databaseRef.push().set({
          'text': 'New Message',
          'timestamp': DateTime.now().millisecondsSinceEpoch
        });
      },
      child: Icon(Icons.add),
    );
  }
}

class Message {
  final String text;
  final int timestamp;

  Message({required this.text, required this.timestamp});

  factory Message.fromMap(Map<dynamic, dynamic> map) {
    return Message(
      text: map['text'],
      timestamp: map['timestamp'],
    );
  }
}
","import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Realtime Database Demo',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatelessWidget {
  final DatabaseReference _databaseRef = FirebaseDatabase.instance.reference().child('messages');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Messages')),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder(
              stream: _databaseRef.orderByChild('timestamp').onValue,
              builder: (context, snapshot) {
                if (snapshot.hasError || snapshot.connectionState == ConnectionState.waiting)
                  return Center(child: CircularProgressIndicator());
                List messages = snapshot.data.snapshot.value?.values?.toList() ?? [];
                messages.sort((a, b) => b['timestamp'].compareTo(a['timestamp']));
                return ListView.builder(
                  itemCount: messages.length,
                  itemBuilder: (context, index) => ListTile(
                    title: Text(messages[index]['text']),
                    subtitle: Text(messages[index]['timestamp']),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(hintText: 'Enter message'),
                    onSubmitted: (text) => _addMessage(text),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send),
                  onPressed: () => _addMessage(text),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _addMessage(String text) {
    if (text.trim().isEmpty) return;
    _databaseRef.push().set({'text': text, 'timestamp': DateTime.now().toUtc().toString()});
  }
}","Create a Flutter app widget that displays a real-time list of messages retrieved from the Firebase Realtime Database. The widget should automatically update when new messages are added to the database. Additionally, implement a feature to add new messages to the database directly from the widget. Ensure the messages are sorted by timestamp and handle any potential errors during data retrieval or submission."
source_code_055,gpt-3.5-turbo_00,0.0,"{'ic_id': {0: 477}, 'ica_id': {0: 4513}, 'question': {0: 'Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used.'}, 'rules': {0: ['No use of third-party libraries.', 'Follow the standard bubble sort algorithm.']}, 'examples': {0: 'Input: [34, 17, 23, 67, 45] Output: [17, 23, 34, 45, 67]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 355}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

const input = [34, 17, 23, 67, 45];
const output = bubbleSort(input);
console.log(output);
",g,"Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used."
source_code_055,gpt-3.5-turbo_01,0.0,"{'ic_id': {0: 477}, 'ica_id': {0: 4513}, 'question': {0: 'Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used.'}, 'rules': {0: ['No use of third-party libraries.', 'Follow the standard bubble sort algorithm.']}, 'examples': {0: 'Input: [34, 17, 23, 67, 45] Output: [17, 23, 34, 45, 67]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 355}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

const input = [34, 17, 23, 67, 45];
const output = bubbleSort(input);
console.log(output);
",g,"Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used."
source_code_055,gpt-4_00,0.0,"{'ic_id': {0: 477}, 'ica_id': {0: 4513}, 'question': {0: 'Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used.'}, 'rules': {0: ['No use of third-party libraries.', 'Follow the standard bubble sort algorithm.']}, 'examples': {0: 'Input: [34, 17, 23, 67, 45] Output: [17, 23, 34, 45, 67]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 355}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

const input = [34, 17, 23, 67, 45];
const output = bubbleSort(input);
console.log(output);
",g,"Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used."
source_code_055,gpt-4_01,0.0,"{'ic_id': {0: 477}, 'ica_id': {0: 4513}, 'question': {0: 'Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used.'}, 'rules': {0: ['No use of third-party libraries.', 'Follow the standard bubble sort algorithm.']}, 'examples': {0: 'Input: [34, 17, 23, 67, 45] Output: [17, 23, 34, 45, 67]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 355}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

const input = [34, 17, 23, 67, 45];
const output = bubbleSort(input);
console.log(output);
",g,"Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used."
source_code_055,gpt-4-turbo_00,0.0,"{'ic_id': {0: 477}, 'ica_id': {0: 4513}, 'question': {0: 'Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used.'}, 'rules': {0: ['No use of third-party libraries.', 'Follow the standard bubble sort algorithm.']}, 'examples': {0: 'Input: [34, 17, 23, 67, 45] Output: [17, 23, 34, 45, 67]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 355}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

const input = [34, 17, 23, 67, 45];
const output = bubbleSort(input);
console.log(output);
",g,"Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used."
source_code_055,gpt-4-turbo_01,0.0,"{'ic_id': {0: 477}, 'ica_id': {0: 4513}, 'question': {0: 'Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used.'}, 'rules': {0: ['No use of third-party libraries.', 'Follow the standard bubble sort algorithm.']}, 'examples': {0: 'Input: [34, 17, 23, 67, 45] Output: [17, 23, 34, 45, 67]'}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 355}, 'score': {0: 0}, 'score_range': {0: 3}, 'weight': {0: 0.0}, 'total_weight': {0: 75.0}}","function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

const input = [34, 17, 23, 67, 45];
const output = bubbleSort(input);
console.log(output);
",g,"Given an unordered array of integers, write a JavaScript function that will sort the array using the bubble sort algorithm. Make sure no libraries are used."
source_code_056,gpt-3.5-turbo_00,0.2,"{'ic_id': {0: 479}, 'ica_id': {0: 4524}, 'question': {0: ""Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.""}, 'rules': {0: ['Must use Flutter for UI and Cloud Firestore for data storage', 'Keep track of cache timing using DateTime', 'Perform efficient cache invalidation only when required']}, 'examples': {0: 'Input: Cached data fetched at 10:00 AM, New fetch attempt at 10:25 AM -> Output: Use cached data\nInput: Cached data fetched at 10:00 AM, New fetch attempt at 10:35 AM -> Output: Fetch new data from Firestore and update cache'}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 104}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class MessageCache extends ChangeNotifier {
  List<Message> _cachedMessages = [];
  DateTime _lastFetchTime;

  Future<void> fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) >= Duration(minutes: 30)) {
      QuerySnapshot snapshot = await FirebaseFirestore.instance.collection('messages').get();
      _cachedMessages = snapshot.docs.map((doc) => Message.fromFirestore(doc)).toList();
      _lastFetchTime = DateTime.now();
      notifyListeners();
    }
  }

  List<Message> get cachedMessages => List.unmodifiable(_cachedMessages);
}

class Message {
  final String id;
  final String content;

  Message({this.id, this.content});

  factory Message.fromFirestore(DocumentSnapshot doc) {
    return Message(
      id: doc.id,
      content: doc.data()['content'],
    );
  }
}

// Example usage:
void main() {
  MessageCache messageCache = MessageCache();

  // Simulate new fetch attempt at 10:25 AM
  _updateCacheIfNeeded(messageCache);

  // Simulate new fetch attempt at 10:35 AM
  _updateCacheIfNeeded(messageCache);
}

void _updateCacheIfNeeded(MessageCache cache) async {
  await cache.fetchMessages();
  print('Cached messages: ${cache.cachedMessages}');
}

","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Cache Invalidation',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatefulWidget {
  @override
  _MessageScreenState createState() => _MessageScreenState();
}

class _MessageScreenState extends State<MessageScreen> {
  List<String> _messages = [];
  DateTime _lastFetchTime;

  @override
  void initState() {
    super.initState();
    _fetchMessages();
  }

  Future<void> _fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) > Duration(minutes: 30)) {
      // Fetch new data from Firestore if cache is expired or not yet initialized
      final snapshot = await FirebaseFirestore.instance.collection('messages').get();
      setState(() {
        _messages = snapshot.docs.map((doc) => doc['message']).toList();
        _lastFetchTime = DateTime.now();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Messages'),
      ),
      body: Center(
        child: _messages.isEmpty
            ? CircularProgressIndicator() // Show loading indicator if messages are being fetched
            : ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (context, index) => ListTile(
                  title: Text(_messages[index]),
                ),
              ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _fetchMessages,
        tooltip: 'Refresh',
        child: Icon(Icons.refresh),
      ),
    );
  }
}",Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.
source_code_056,gpt-3.5-turbo_01,0.2,"{'ic_id': {0: 479}, 'ica_id': {0: 4524}, 'question': {0: ""Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.""}, 'rules': {0: ['Must use Flutter for UI and Cloud Firestore for data storage', 'Keep track of cache timing using DateTime', 'Perform efficient cache invalidation only when required']}, 'examples': {0: 'Input: Cached data fetched at 10:00 AM, New fetch attempt at 10:25 AM -> Output: Use cached data\nInput: Cached data fetched at 10:00 AM, New fetch attempt at 10:35 AM -> Output: Fetch new data from Firestore and update cache'}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 104}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class MessageCache extends ChangeNotifier {
  List<Message> _cachedMessages = [];
  DateTime _lastFetchTime;

  Future<void> fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) >= Duration(minutes: 30)) {
      QuerySnapshot snapshot = await FirebaseFirestore.instance.collection('messages').get();
      _cachedMessages = snapshot.docs.map((doc) => Message.fromFirestore(doc)).toList();
      _lastFetchTime = DateTime.now();
      notifyListeners();
    }
  }

  List<Message> get cachedMessages => List.unmodifiable(_cachedMessages);
}

class Message {
  final String id;
  final String content;

  Message({this.id, this.content});

  factory Message.fromFirestore(DocumentSnapshot doc) {
    return Message(
      id: doc.id,
      content: doc.data()['content'],
    );
  }
}

// Example usage:
void main() {
  MessageCache messageCache = MessageCache();

  // Simulate new fetch attempt at 10:25 AM
  _updateCacheIfNeeded(messageCache);

  // Simulate new fetch attempt at 10:35 AM
  _updateCacheIfNeeded(messageCache);
}

void _updateCacheIfNeeded(MessageCache cache) async {
  await cache.fetchMessages();
  print('Cached messages: ${cache.cachedMessages}');
}

","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Cache Invalidation',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatefulWidget {
  @override
  _MessageScreenState createState() => _MessageScreenState();
}

class _MessageScreenState extends State<MessageScreen> {
  List<String> _messages = [];
  DateTime _lastFetchTime;

  @override
  void initState() {
    super.initState();
    _fetchMessages();
  }

  Future<void> _fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) > Duration(minutes: 30)) {
      // Fetch new data from Firestore if cache is expired or not yet initialized
      final snapshot = await FirebaseFirestore.instance.collection('messages').get();
      setState(() {
        _messages = snapshot.docs.map((doc) => doc['message']).toList();
        _lastFetchTime = DateTime.now();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Messages'),
      ),
      body: Center(
        child: _messages.isEmpty
            ? CircularProgressIndicator() // Show loading indicator if messages are being fetched
            : ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (context, index) => ListTile(
                  title: Text(_messages[index]),
                ),
              ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _fetchMessages,
        tooltip: 'Refresh',
        child: Icon(Icons.refresh),
      ),
    );
  }
}",Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.
source_code_056,gpt-4_00,0.2,"{'ic_id': {0: 479}, 'ica_id': {0: 4524}, 'question': {0: ""Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.""}, 'rules': {0: ['Must use Flutter for UI and Cloud Firestore for data storage', 'Keep track of cache timing using DateTime', 'Perform efficient cache invalidation only when required']}, 'examples': {0: 'Input: Cached data fetched at 10:00 AM, New fetch attempt at 10:25 AM -> Output: Use cached data\nInput: Cached data fetched at 10:00 AM, New fetch attempt at 10:35 AM -> Output: Fetch new data from Firestore and update cache'}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 104}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class MessageCache extends ChangeNotifier {
  List<Message> _cachedMessages = [];
  DateTime _lastFetchTime;

  Future<void> fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) >= Duration(minutes: 30)) {
      QuerySnapshot snapshot = await FirebaseFirestore.instance.collection('messages').get();
      _cachedMessages = snapshot.docs.map((doc) => Message.fromFirestore(doc)).toList();
      _lastFetchTime = DateTime.now();
      notifyListeners();
    }
  }

  List<Message> get cachedMessages => List.unmodifiable(_cachedMessages);
}

class Message {
  final String id;
  final String content;

  Message({this.id, this.content});

  factory Message.fromFirestore(DocumentSnapshot doc) {
    return Message(
      id: doc.id,
      content: doc.data()['content'],
    );
  }
}

// Example usage:
void main() {
  MessageCache messageCache = MessageCache();

  // Simulate new fetch attempt at 10:25 AM
  _updateCacheIfNeeded(messageCache);

  // Simulate new fetch attempt at 10:35 AM
  _updateCacheIfNeeded(messageCache);
}

void _updateCacheIfNeeded(MessageCache cache) async {
  await cache.fetchMessages();
  print('Cached messages: ${cache.cachedMessages}');
}

","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Cache Invalidation',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatefulWidget {
  @override
  _MessageScreenState createState() => _MessageScreenState();
}

class _MessageScreenState extends State<MessageScreen> {
  List<String> _messages = [];
  DateTime _lastFetchTime;

  @override
  void initState() {
    super.initState();
    _fetchMessages();
  }

  Future<void> _fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) > Duration(minutes: 30)) {
      // Fetch new data from Firestore if cache is expired or not yet initialized
      final snapshot = await FirebaseFirestore.instance.collection('messages').get();
      setState(() {
        _messages = snapshot.docs.map((doc) => doc['message']).toList();
        _lastFetchTime = DateTime.now();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Messages'),
      ),
      body: Center(
        child: _messages.isEmpty
            ? CircularProgressIndicator() // Show loading indicator if messages are being fetched
            : ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (context, index) => ListTile(
                  title: Text(_messages[index]),
                ),
              ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _fetchMessages,
        tooltip: 'Refresh',
        child: Icon(Icons.refresh),
      ),
    );
  }
}",Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.
source_code_056,gpt-4_01,0.2,"{'ic_id': {0: 479}, 'ica_id': {0: 4524}, 'question': {0: ""Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.""}, 'rules': {0: ['Must use Flutter for UI and Cloud Firestore for data storage', 'Keep track of cache timing using DateTime', 'Perform efficient cache invalidation only when required']}, 'examples': {0: 'Input: Cached data fetched at 10:00 AM, New fetch attempt at 10:25 AM -> Output: Use cached data\nInput: Cached data fetched at 10:00 AM, New fetch attempt at 10:35 AM -> Output: Fetch new data from Firestore and update cache'}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 104}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class MessageCache extends ChangeNotifier {
  List<Message> _cachedMessages = [];
  DateTime _lastFetchTime;

  Future<void> fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) >= Duration(minutes: 30)) {
      QuerySnapshot snapshot = await FirebaseFirestore.instance.collection('messages').get();
      _cachedMessages = snapshot.docs.map((doc) => Message.fromFirestore(doc)).toList();
      _lastFetchTime = DateTime.now();
      notifyListeners();
    }
  }

  List<Message> get cachedMessages => List.unmodifiable(_cachedMessages);
}

class Message {
  final String id;
  final String content;

  Message({this.id, this.content});

  factory Message.fromFirestore(DocumentSnapshot doc) {
    return Message(
      id: doc.id,
      content: doc.data()['content'],
    );
  }
}

// Example usage:
void main() {
  MessageCache messageCache = MessageCache();

  // Simulate new fetch attempt at 10:25 AM
  _updateCacheIfNeeded(messageCache);

  // Simulate new fetch attempt at 10:35 AM
  _updateCacheIfNeeded(messageCache);
}

void _updateCacheIfNeeded(MessageCache cache) async {
  await cache.fetchMessages();
  print('Cached messages: ${cache.cachedMessages}');
}

","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Cache Invalidation',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatefulWidget {
  @override
  _MessageScreenState createState() => _MessageScreenState();
}

class _MessageScreenState extends State<MessageScreen> {
  List<String> _messages = [];
  DateTime _lastFetchTime;

  @override
  void initState() {
    super.initState();
    _fetchMessages();
  }

  Future<void> _fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) > Duration(minutes: 30)) {
      // Fetch new data from Firestore if cache is expired or not yet initialized
      final snapshot = await FirebaseFirestore.instance.collection('messages').get();
      setState(() {
        _messages = snapshot.docs.map((doc) => doc['message']).toList();
        _lastFetchTime = DateTime.now();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Messages'),
      ),
      body: Center(
        child: _messages.isEmpty
            ? CircularProgressIndicator() // Show loading indicator if messages are being fetched
            : ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (context, index) => ListTile(
                  title: Text(_messages[index]),
                ),
              ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _fetchMessages,
        tooltip: 'Refresh',
        child: Icon(Icons.refresh),
      ),
    );
  }
}",Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.
source_code_056,gpt-4-turbo_00,0.2,"{'ic_id': {0: 479}, 'ica_id': {0: 4524}, 'question': {0: ""Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.""}, 'rules': {0: ['Must use Flutter for UI and Cloud Firestore for data storage', 'Keep track of cache timing using DateTime', 'Perform efficient cache invalidation only when required']}, 'examples': {0: 'Input: Cached data fetched at 10:00 AM, New fetch attempt at 10:25 AM -> Output: Use cached data\nInput: Cached data fetched at 10:00 AM, New fetch attempt at 10:35 AM -> Output: Fetch new data from Firestore and update cache'}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 104}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class MessageCache extends ChangeNotifier {
  List<Message> _cachedMessages = [];
  DateTime _lastFetchTime;

  Future<void> fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) >= Duration(minutes: 30)) {
      QuerySnapshot snapshot = await FirebaseFirestore.instance.collection('messages').get();
      _cachedMessages = snapshot.docs.map((doc) => Message.fromFirestore(doc)).toList();
      _lastFetchTime = DateTime.now();
      notifyListeners();
    }
  }

  List<Message> get cachedMessages => List.unmodifiable(_cachedMessages);
}

class Message {
  final String id;
  final String content;

  Message({this.id, this.content});

  factory Message.fromFirestore(DocumentSnapshot doc) {
    return Message(
      id: doc.id,
      content: doc.data()['content'],
    );
  }
}

// Example usage:
void main() {
  MessageCache messageCache = MessageCache();

  // Simulate new fetch attempt at 10:25 AM
  _updateCacheIfNeeded(messageCache);

  // Simulate new fetch attempt at 10:35 AM
  _updateCacheIfNeeded(messageCache);
}

void _updateCacheIfNeeded(MessageCache cache) async {
  await cache.fetchMessages();
  print('Cached messages: ${cache.cachedMessages}');
}

","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Cache Invalidation',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatefulWidget {
  @override
  _MessageScreenState createState() => _MessageScreenState();
}

class _MessageScreenState extends State<MessageScreen> {
  List<String> _messages = [];
  DateTime _lastFetchTime;

  @override
  void initState() {
    super.initState();
    _fetchMessages();
  }

  Future<void> _fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) > Duration(minutes: 30)) {
      // Fetch new data from Firestore if cache is expired or not yet initialized
      final snapshot = await FirebaseFirestore.instance.collection('messages').get();
      setState(() {
        _messages = snapshot.docs.map((doc) => doc['message']).toList();
        _lastFetchTime = DateTime.now();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Messages'),
      ),
      body: Center(
        child: _messages.isEmpty
            ? CircularProgressIndicator() // Show loading indicator if messages are being fetched
            : ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (context, index) => ListTile(
                  title: Text(_messages[index]),
                ),
              ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _fetchMessages,
        tooltip: 'Refresh',
        child: Icon(Icons.refresh),
      ),
    );
  }
}",Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.
source_code_056,gpt-4-turbo_01,0.2,"{'ic_id': {0: 479}, 'ica_id': {0: 4524}, 'question': {0: ""Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.""}, 'rules': {0: ['Must use Flutter for UI and Cloud Firestore for data storage', 'Keep track of cache timing using DateTime', 'Perform efficient cache invalidation only when required']}, 'examples': {0: 'Input: Cached data fetched at 10:00 AM, New fetch attempt at 10:25 AM -> Output: Use cached data\nInput: Cached data fetched at 10:00 AM, New fetch attempt at 10:35 AM -> Output: Fetch new data from Firestore and update cache'}, 'programming_language': {0: 'Dart'}, 'response_time': {0: 104}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class MessageCache extends ChangeNotifier {
  List<Message> _cachedMessages = [];
  DateTime _lastFetchTime;

  Future<void> fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) >= Duration(minutes: 30)) {
      QuerySnapshot snapshot = await FirebaseFirestore.instance.collection('messages').get();
      _cachedMessages = snapshot.docs.map((doc) => Message.fromFirestore(doc)).toList();
      _lastFetchTime = DateTime.now();
      notifyListeners();
    }
  }

  List<Message> get cachedMessages => List.unmodifiable(_cachedMessages);
}

class Message {
  final String id;
  final String content;

  Message({this.id, this.content});

  factory Message.fromFirestore(DocumentSnapshot doc) {
    return Message(
      id: doc.id,
      content: doc.data()['content'],
    );
  }
}

// Example usage:
void main() {
  MessageCache messageCache = MessageCache();

  // Simulate new fetch attempt at 10:25 AM
  _updateCacheIfNeeded(messageCache);

  // Simulate new fetch attempt at 10:35 AM
  _updateCacheIfNeeded(messageCache);
}

void _updateCacheIfNeeded(MessageCache cache) async {
  await cache.fetchMessages();
  print('Cached messages: ${cache.cachedMessages}');
}

","import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Cache Invalidation',
      home: MessageScreen(),
    );
  }
}

class MessageScreen extends StatefulWidget {
  @override
  _MessageScreenState createState() => _MessageScreenState();
}

class _MessageScreenState extends State<MessageScreen> {
  List<String> _messages = [];
  DateTime _lastFetchTime;

  @override
  void initState() {
    super.initState();
    _fetchMessages();
  }

  Future<void> _fetchMessages() async {
    if (_lastFetchTime == null || DateTime.now().difference(_lastFetchTime) > Duration(minutes: 30)) {
      // Fetch new data from Firestore if cache is expired or not yet initialized
      final snapshot = await FirebaseFirestore.instance.collection('messages').get();
      setState(() {
        _messages = snapshot.docs.map((doc) => doc['message']).toList();
        _lastFetchTime = DateTime.now();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Messages'),
      ),
      body: Center(
        child: _messages.isEmpty
            ? CircularProgressIndicator() // Show loading indicator if messages are being fetched
            : ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (context, index) => ListTile(
                  title: Text(_messages[index]),
                ),
              ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _fetchMessages,
        tooltip: 'Refresh',
        child: Icon(Icons.refresh),
      ),
    );
  }
}",Implement a timestamp-based cache invalidation mechanism in a Flutter application. Assume you have a Flutter app that retrieves a list of messages from Cloud Firestore. Write a function that caches the messages and refreshes the cache only if 30 minutes have passed since the last fetch. Make sure to handle the cache state properly using Flutter's state management.
source_code_057,gpt-3.5-turbo_00,0.1,"{'ic_id': {0: 481}, 'ica_id': {0: 4526}, 'question': {0: 'Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result.'}, 'rules': {0: [""Use the random module from Python's standard library."", 'Do not use any external libraries.']}, 'examples': {0: 'Input: n = 1000\nOutput: {1: ~167, 2: ~167, 3: ~167, 4: ~167, 5: ~167, 6: ~167}'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 967}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import random

def roll_die():
    return random.randint(1, 6)

def simulate_rolls(n):
    results = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    
    for _ in range(n):
        roll_result = roll_die()
        results[roll_result] += 1
        
    return results

n = 1000
simulation_result = simulate_rolls(n)
print(simulation_result)
","import random

def rolling():
  rand_num = random.choice([1,2,3,4,5,6])
  return rand_num

def prob(int(n)):
  occurrence = dict()
  for i in len(n):
    num = rolling()
    if num == 1:
      count_1 = count_1 + 1
    else if num == 2:
      count_2 = count_2 + 1 
    else if num == 3:
      count_3 = count_3 + 1
    else if num == 4:
      count_4 = count_4 + 1
    else if num == 5:
      count_5 = count_5 + 1
    else if num == 6:
      count_6 = count_6 + 1

    occurrence[""count_1""] = count_1
    occurrence[""count_2""] = count_2
    occurrence[""count_3""] = count_3
    occurrence[""count_4""] = count_4
    occurrence[""count_5""] = count_5
    occurrence[""count_6""] = count_6
    
    return occurrence","Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result."
source_code_057,gpt-3.5-turbo_01,0.1,"{'ic_id': {0: 481}, 'ica_id': {0: 4526}, 'question': {0: 'Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result.'}, 'rules': {0: [""Use the random module from Python's standard library."", 'Do not use any external libraries.']}, 'examples': {0: 'Input: n = 1000\nOutput: {1: ~167, 2: ~167, 3: ~167, 4: ~167, 5: ~167, 6: ~167}'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 967}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import random

def roll_die():
    return random.randint(1, 6)

def simulate_rolls(n):
    results = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    
    for _ in range(n):
        roll_result = roll_die()
        results[roll_result] += 1
        
    return results

n = 1000
simulation_result = simulate_rolls(n)
print(simulation_result)
","import random

def rolling():
  rand_num = random.choice([1,2,3,4,5,6])
  return rand_num

def prob(int(n)):
  occurrence = dict()
  for i in len(n):
    num = rolling()
    if num == 1:
      count_1 = count_1 + 1
    else if num == 2:
      count_2 = count_2 + 1 
    else if num == 3:
      count_3 = count_3 + 1
    else if num == 4:
      count_4 = count_4 + 1
    else if num == 5:
      count_5 = count_5 + 1
    else if num == 6:
      count_6 = count_6 + 1

    occurrence[""count_1""] = count_1
    occurrence[""count_2""] = count_2
    occurrence[""count_3""] = count_3
    occurrence[""count_4""] = count_4
    occurrence[""count_5""] = count_5
    occurrence[""count_6""] = count_6
    
    return occurrence","Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result."
source_code_057,gpt-4_00,0.1,"{'ic_id': {0: 481}, 'ica_id': {0: 4526}, 'question': {0: 'Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result.'}, 'rules': {0: [""Use the random module from Python's standard library."", 'Do not use any external libraries.']}, 'examples': {0: 'Input: n = 1000\nOutput: {1: ~167, 2: ~167, 3: ~167, 4: ~167, 5: ~167, 6: ~167}'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 967}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import random

def roll_die():
    return random.randint(1, 6)

def simulate_rolls(n):
    results = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    
    for _ in range(n):
        roll_result = roll_die()
        results[roll_result] += 1
        
    return results

n = 1000
simulation_result = simulate_rolls(n)
print(simulation_result)
","import random

def rolling():
  rand_num = random.choice([1,2,3,4,5,6])
  return rand_num

def prob(int(n)):
  occurrence = dict()
  for i in len(n):
    num = rolling()
    if num == 1:
      count_1 = count_1 + 1
    else if num == 2:
      count_2 = count_2 + 1 
    else if num == 3:
      count_3 = count_3 + 1
    else if num == 4:
      count_4 = count_4 + 1
    else if num == 5:
      count_5 = count_5 + 1
    else if num == 6:
      count_6 = count_6 + 1

    occurrence[""count_1""] = count_1
    occurrence[""count_2""] = count_2
    occurrence[""count_3""] = count_3
    occurrence[""count_4""] = count_4
    occurrence[""count_5""] = count_5
    occurrence[""count_6""] = count_6
    
    return occurrence","Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result."
source_code_057,gpt-4_01,0.1,"{'ic_id': {0: 481}, 'ica_id': {0: 4526}, 'question': {0: 'Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result.'}, 'rules': {0: [""Use the random module from Python's standard library."", 'Do not use any external libraries.']}, 'examples': {0: 'Input: n = 1000\nOutput: {1: ~167, 2: ~167, 3: ~167, 4: ~167, 5: ~167, 6: ~167}'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 967}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import random

def roll_die():
    return random.randint(1, 6)

def simulate_rolls(n):
    results = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    
    for _ in range(n):
        roll_result = roll_die()
        results[roll_result] += 1
        
    return results

n = 1000
simulation_result = simulate_rolls(n)
print(simulation_result)
","import random

def rolling():
  rand_num = random.choice([1,2,3,4,5,6])
  return rand_num

def prob(int(n)):
  occurrence = dict()
  for i in len(n):
    num = rolling()
    if num == 1:
      count_1 = count_1 + 1
    else if num == 2:
      count_2 = count_2 + 1 
    else if num == 3:
      count_3 = count_3 + 1
    else if num == 4:
      count_4 = count_4 + 1
    else if num == 5:
      count_5 = count_5 + 1
    else if num == 6:
      count_6 = count_6 + 1

    occurrence[""count_1""] = count_1
    occurrence[""count_2""] = count_2
    occurrence[""count_3""] = count_3
    occurrence[""count_4""] = count_4
    occurrence[""count_5""] = count_5
    occurrence[""count_6""] = count_6
    
    return occurrence","Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result."
source_code_057,gpt-4-turbo_00,0.1,"{'ic_id': {0: 481}, 'ica_id': {0: 4526}, 'question': {0: 'Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result.'}, 'rules': {0: [""Use the random module from Python's standard library."", 'Do not use any external libraries.']}, 'examples': {0: 'Input: n = 1000\nOutput: {1: ~167, 2: ~167, 3: ~167, 4: ~167, 5: ~167, 6: ~167}'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 967}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import random

def roll_die():
    return random.randint(1, 6)

def simulate_rolls(n):
    results = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    
    for _ in range(n):
        roll_result = roll_die()
        results[roll_result] += 1
        
    return results

n = 1000
simulation_result = simulate_rolls(n)
print(simulation_result)
","import random

def rolling():
  rand_num = random.choice([1,2,3,4,5,6])
  return rand_num

def prob(int(n)):
  occurrence = dict()
  for i in len(n):
    num = rolling()
    if num == 1:
      count_1 = count_1 + 1
    else if num == 2:
      count_2 = count_2 + 1 
    else if num == 3:
      count_3 = count_3 + 1
    else if num == 4:
      count_4 = count_4 + 1
    else if num == 5:
      count_5 = count_5 + 1
    else if num == 6:
      count_6 = count_6 + 1

    occurrence[""count_1""] = count_1
    occurrence[""count_2""] = count_2
    occurrence[""count_3""] = count_3
    occurrence[""count_4""] = count_4
    occurrence[""count_5""] = count_5
    occurrence[""count_6""] = count_6
    
    return occurrence","Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result."
source_code_057,gpt-4-turbo_01,0.1,"{'ic_id': {0: 481}, 'ica_id': {0: 4526}, 'question': {0: 'Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result.'}, 'rules': {0: [""Use the random module from Python's standard library."", 'Do not use any external libraries.']}, 'examples': {0: 'Input: n = 1000\nOutput: {1: ~167, 2: ~167, 3: ~167, 4: ~167, 5: ~167, 6: ~167}'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 967}, 'score': {0: 1}, 'score_range': {0: 3}, 'weight': {0: 50.0}, 'total_weight': {0: 150.0}}","import random

def roll_die():
    return random.randint(1, 6)

def simulate_rolls(n):
    results = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    
    for _ in range(n):
        roll_result = roll_die()
        results[roll_result] += 1
        
    return results

n = 1000
simulation_result = simulate_rolls(n)
print(simulation_result)
","import random

def rolling():
  rand_num = random.choice([1,2,3,4,5,6])
  return rand_num

def prob(int(n)):
  occurrence = dict()
  for i in len(n):
    num = rolling()
    if num == 1:
      count_1 = count_1 + 1
    else if num == 2:
      count_2 = count_2 + 1 
    else if num == 3:
      count_3 = count_3 + 1
    else if num == 4:
      count_4 = count_4 + 1
    else if num == 5:
      count_5 = count_5 + 1
    else if num == 6:
      count_6 = count_6 + 1

    occurrence[""count_1""] = count_1
    occurrence[""count_2""] = count_2
    occurrence[""count_3""] = count_3
    occurrence[""count_4""] = count_4
    occurrence[""count_5""] = count_5
    occurrence[""count_6""] = count_6
    
    return occurrence","Design and implement a function in Python that simulates rolling a six-sided die. The function should use a pseudo-random number generator and ensure that each number from 1 to 6 has an approximately equal probability of appearing over a large number of rolls. Additionally, write a secondary function that takes a number n as input and simulates rolling the die n times, returning a dictionary that counts the occurrences of each result."
source_code_058,gpt-3.5-turbo_00,0.9,"{'ic_id': {0: 487}, 'ica_id': {0: 4537}, 'question': {0: 'Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target.'}, 'rules': {0: ['Must return an array of integers', 'If there are multiple solutions, you may return any one of them', 'If no solution, return an empty array']}, 'examples': {0: 'Input: array = [2, 7, 11, 15], target = 9, Output: [0, 1]'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 76}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import java.util.HashMap;

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(nums[i], i);
        }

        return new int[]{};
    }
}

// Example
int[] array = new int[]{2, 7, 11, 15};
int target = 9;
Solution solution = new Solution();
int[] result = solution.twoSum(array, target);
","import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public static int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> numIndices = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numIndices.containsKey(complement)) {
                return new int[] { numIndices.get(complement), i };
            }
            numIndices.put(nums[i], i);
        }
        return new int[] {}; // return an empty array if no solution
    }
    
    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] indices = findTwoSum(nums, target);
        if (indices.length == 2) {
            System.out.println(""Output: ["" + indices[0] + "", "" + indices[1] + ""]"");
        } else {
            System.out.println(""No solution found."");
        }
    }
}","Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target."
source_code_058,gpt-3.5-turbo_01,0.9,"{'ic_id': {0: 487}, 'ica_id': {0: 4537}, 'question': {0: 'Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target.'}, 'rules': {0: ['Must return an array of integers', 'If there are multiple solutions, you may return any one of them', 'If no solution, return an empty array']}, 'examples': {0: 'Input: array = [2, 7, 11, 15], target = 9, Output: [0, 1]'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 76}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import java.util.HashMap;

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(nums[i], i);
        }

        return new int[]{};
    }
}

// Example
int[] array = new int[]{2, 7, 11, 15};
int target = 9;
Solution solution = new Solution();
int[] result = solution.twoSum(array, target);
","import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public static int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> numIndices = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numIndices.containsKey(complement)) {
                return new int[] { numIndices.get(complement), i };
            }
            numIndices.put(nums[i], i);
        }
        return new int[] {}; // return an empty array if no solution
    }
    
    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] indices = findTwoSum(nums, target);
        if (indices.length == 2) {
            System.out.println(""Output: ["" + indices[0] + "", "" + indices[1] + ""]"");
        } else {
            System.out.println(""No solution found."");
        }
    }
}","Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target."
source_code_058,gpt-4_00,0.9,"{'ic_id': {0: 487}, 'ica_id': {0: 4537}, 'question': {0: 'Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target.'}, 'rules': {0: ['Must return an array of integers', 'If there are multiple solutions, you may return any one of them', 'If no solution, return an empty array']}, 'examples': {0: 'Input: array = [2, 7, 11, 15], target = 9, Output: [0, 1]'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 76}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import java.util.HashMap;

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(nums[i], i);
        }

        return new int[]{};
    }
}

// Example
int[] array = new int[]{2, 7, 11, 15};
int target = 9;
Solution solution = new Solution();
int[] result = solution.twoSum(array, target);
","import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public static int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> numIndices = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numIndices.containsKey(complement)) {
                return new int[] { numIndices.get(complement), i };
            }
            numIndices.put(nums[i], i);
        }
        return new int[] {}; // return an empty array if no solution
    }
    
    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] indices = findTwoSum(nums, target);
        if (indices.length == 2) {
            System.out.println(""Output: ["" + indices[0] + "", "" + indices[1] + ""]"");
        } else {
            System.out.println(""No solution found."");
        }
    }
}","Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target."
source_code_058,gpt-4_01,0.9,"{'ic_id': {0: 487}, 'ica_id': {0: 4537}, 'question': {0: 'Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target.'}, 'rules': {0: ['Must return an array of integers', 'If there are multiple solutions, you may return any one of them', 'If no solution, return an empty array']}, 'examples': {0: 'Input: array = [2, 7, 11, 15], target = 9, Output: [0, 1]'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 76}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import java.util.HashMap;

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(nums[i], i);
        }

        return new int[]{};
    }
}

// Example
int[] array = new int[]{2, 7, 11, 15};
int target = 9;
Solution solution = new Solution();
int[] result = solution.twoSum(array, target);
","import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public static int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> numIndices = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numIndices.containsKey(complement)) {
                return new int[] { numIndices.get(complement), i };
            }
            numIndices.put(nums[i], i);
        }
        return new int[] {}; // return an empty array if no solution
    }
    
    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] indices = findTwoSum(nums, target);
        if (indices.length == 2) {
            System.out.println(""Output: ["" + indices[0] + "", "" + indices[1] + ""]"");
        } else {
            System.out.println(""No solution found."");
        }
    }
}","Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target."
source_code_058,gpt-4-turbo_00,0.9,"{'ic_id': {0: 487}, 'ica_id': {0: 4537}, 'question': {0: 'Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target.'}, 'rules': {0: ['Must return an array of integers', 'If there are multiple solutions, you may return any one of them', 'If no solution, return an empty array']}, 'examples': {0: 'Input: array = [2, 7, 11, 15], target = 9, Output: [0, 1]'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 76}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import java.util.HashMap;

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(nums[i], i);
        }

        return new int[]{};
    }
}

// Example
int[] array = new int[]{2, 7, 11, 15};
int target = 9;
Solution solution = new Solution();
int[] result = solution.twoSum(array, target);
","import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public static int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> numIndices = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numIndices.containsKey(complement)) {
                return new int[] { numIndices.get(complement), i };
            }
            numIndices.put(nums[i], i);
        }
        return new int[] {}; // return an empty array if no solution
    }
    
    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] indices = findTwoSum(nums, target);
        if (indices.length == 2) {
            System.out.println(""Output: ["" + indices[0] + "", "" + indices[1] + ""]"");
        } else {
            System.out.println(""No solution found."");
        }
    }
}","Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target."
source_code_058,gpt-4-turbo_01,0.9,"{'ic_id': {0: 487}, 'ica_id': {0: 4537}, 'question': {0: 'Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target.'}, 'rules': {0: ['Must return an array of integers', 'If there are multiple solutions, you may return any one of them', 'If no solution, return an empty array']}, 'examples': {0: 'Input: array = [2, 7, 11, 15], target = 9, Output: [0, 1]'}, 'programming_language': {0: 'Java'}, 'response_time': {0: 76}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","import java.util.HashMap;

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(nums[i], i);
        }

        return new int[]{};
    }
}

// Example
int[] array = new int[]{2, 7, 11, 15};
int target = 9;
Solution solution = new Solution();
int[] result = solution.twoSum(array, target);
","import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public static int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> numIndices = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numIndices.containsKey(complement)) {
                return new int[] { numIndices.get(complement), i };
            }
            numIndices.put(nums[i], i);
        }
        return new int[] {}; // return an empty array if no solution
    }
    
    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] indices = findTwoSum(nums, target);
        if (indices.length == 2) {
            System.out.println(""Output: ["" + indices[0] + "", "" + indices[1] + ""]"");
        } else {
            System.out.println(""No solution found."");
        }
    }
}","Write a Java function that takes an array of integers and an integer target value, and returns the indices of the two numbers such that they add up to the target."
source_code_059,gpt-3.5-turbo_00,0.4,"{'ic_id': {0: 484}, 'ica_id': {0: 4573}, 'question': {0: 'Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys.'}, 'rules': {0: ['Function must handle multiple levels of nesting', 'No use of third-party libraries']}, 'examples': {0: ""Input: { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } } Output: {'a': 1, 'b.d.e': 2}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 408}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","function compressObject(obj, parentKey = '', result = {}) {
    for (let key in obj) {
        if (obj[key] !== null && typeof obj[key] === 'object') {
            compressObject(obj[key], parentKey + key + '.', result);
        } else if (obj[key] !== null) {
            result[parentKey + key] = obj[key];
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);
","function compressObject(obj, parentKey = '', result = {}) 
{
    for (let key in obj) 
    {
        if (obj.hasOwnProperty(key)) 
        {
            const nestedKey = parentKey ? `${parentKey}.${key}` : key;
            if (obj[key] == null) 
            {
                
                continue;
            }
            else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) 
            {
               
                compressObject(obj[key], nestedKey, result);
            }
            else 
            {               
                result[nestedKey] = obj[key];
            }
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);","Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys."
source_code_059,gpt-3.5-turbo_01,0.4,"{'ic_id': {0: 484}, 'ica_id': {0: 4573}, 'question': {0: 'Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys.'}, 'rules': {0: ['Function must handle multiple levels of nesting', 'No use of third-party libraries']}, 'examples': {0: ""Input: { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } } Output: {'a': 1, 'b.d.e': 2}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 408}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","function compressObject(obj, parentKey = '', result = {}) {
    for (let key in obj) {
        if (obj[key] !== null && typeof obj[key] === 'object') {
            compressObject(obj[key], parentKey + key + '.', result);
        } else if (obj[key] !== null) {
            result[parentKey + key] = obj[key];
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);
","function compressObject(obj, parentKey = '', result = {}) 
{
    for (let key in obj) 
    {
        if (obj.hasOwnProperty(key)) 
        {
            const nestedKey = parentKey ? `${parentKey}.${key}` : key;
            if (obj[key] == null) 
            {
                
                continue;
            }
            else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) 
            {
               
                compressObject(obj[key], nestedKey, result);
            }
            else 
            {               
                result[nestedKey] = obj[key];
            }
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);","Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys."
source_code_059,gpt-4_00,0.4,"{'ic_id': {0: 484}, 'ica_id': {0: 4573}, 'question': {0: 'Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys.'}, 'rules': {0: ['Function must handle multiple levels of nesting', 'No use of third-party libraries']}, 'examples': {0: ""Input: { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } } Output: {'a': 1, 'b.d.e': 2}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 408}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","function compressObject(obj, parentKey = '', result = {}) {
    for (let key in obj) {
        if (obj[key] !== null && typeof obj[key] === 'object') {
            compressObject(obj[key], parentKey + key + '.', result);
        } else if (obj[key] !== null) {
            result[parentKey + key] = obj[key];
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);
","function compressObject(obj, parentKey = '', result = {}) 
{
    for (let key in obj) 
    {
        if (obj.hasOwnProperty(key)) 
        {
            const nestedKey = parentKey ? `${parentKey}.${key}` : key;
            if (obj[key] == null) 
            {
                
                continue;
            }
            else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) 
            {
               
                compressObject(obj[key], nestedKey, result);
            }
            else 
            {               
                result[nestedKey] = obj[key];
            }
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);","Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys."
source_code_059,gpt-4_01,0.5,"{'ic_id': {0: 484}, 'ica_id': {0: 4573}, 'question': {0: 'Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys.'}, 'rules': {0: ['Function must handle multiple levels of nesting', 'No use of third-party libraries']}, 'examples': {0: ""Input: { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } } Output: {'a': 1, 'b.d.e': 2}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 408}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","function compressObject(obj, parentKey = '', result = {}) {
    for (let key in obj) {
        if (obj[key] !== null && typeof obj[key] === 'object') {
            compressObject(obj[key], parentKey + key + '.', result);
        } else if (obj[key] !== null) {
            result[parentKey + key] = obj[key];
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);
","function compressObject(obj, parentKey = '', result = {}) 
{
    for (let key in obj) 
    {
        if (obj.hasOwnProperty(key)) 
        {
            const nestedKey = parentKey ? `${parentKey}.${key}` : key;
            if (obj[key] == null) 
            {
                
                continue;
            }
            else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) 
            {
               
                compressObject(obj[key], nestedKey, result);
            }
            else 
            {               
                result[nestedKey] = obj[key];
            }
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);","Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys."
source_code_059,gpt-4-turbo_00,0.3,"{'ic_id': {0: 484}, 'ica_id': {0: 4573}, 'question': {0: 'Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys.'}, 'rules': {0: ['Function must handle multiple levels of nesting', 'No use of third-party libraries']}, 'examples': {0: ""Input: { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } } Output: {'a': 1, 'b.d.e': 2}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 408}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","function compressObject(obj, parentKey = '', result = {}) {
    for (let key in obj) {
        if (obj[key] !== null && typeof obj[key] === 'object') {
            compressObject(obj[key], parentKey + key + '.', result);
        } else if (obj[key] !== null) {
            result[parentKey + key] = obj[key];
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);
","function compressObject(obj, parentKey = '', result = {}) 
{
    for (let key in obj) 
    {
        if (obj.hasOwnProperty(key)) 
        {
            const nestedKey = parentKey ? `${parentKey}.${key}` : key;
            if (obj[key] == null) 
            {
                
                continue;
            }
            else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) 
            {
               
                compressObject(obj[key], nestedKey, result);
            }
            else 
            {               
                result[nestedKey] = obj[key];
            }
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);","Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys."
source_code_059,gpt-4-turbo_01,0.5,"{'ic_id': {0: 484}, 'ica_id': {0: 4573}, 'question': {0: 'Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys.'}, 'rules': {0: ['Function must handle multiple levels of nesting', 'No use of third-party libraries']}, 'examples': {0: ""Input: { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } } Output: {'a': 1, 'b.d.e': 2}""}, 'programming_language': {0: 'JavaScript'}, 'response_time': {0: 408}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 225.0}, 'total_weight': {0: 225.0}}","function compressObject(obj, parentKey = '', result = {}) {
    for (let key in obj) {
        if (obj[key] !== null && typeof obj[key] === 'object') {
            compressObject(obj[key], parentKey + key + '.', result);
        } else if (obj[key] !== null) {
            result[parentKey + key] = obj[key];
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);
","function compressObject(obj, parentKey = '', result = {}) 
{
    for (let key in obj) 
    {
        if (obj.hasOwnProperty(key)) 
        {
            const nestedKey = parentKey ? `${parentKey}.${key}` : key;
            if (obj[key] == null) 
            {
                
                continue;
            }
            else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) 
            {
               
                compressObject(obj[key], nestedKey, result);
            }
            else 
            {               
                result[nestedKey] = obj[key];
            }
        }
    }
    return result;
}

const input = { a: 1, b: { c: null, d: { e: 2 } }, f: { g: null } };
const output = compressObject(input);
console.log(output);","Design a function that compresses a nested object with possible multiple levels of nesting, removing all null values, and flattening the result to a single level object with dot-notated keys."
source_code_060,gpt-3.5-turbo_00,0.6,"{'ic_id': {0: 490}, 'ica_id': {0: 4620}, 'question': {0: 'Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times.'}, 'rules': {0: ['Do not use any library functions intended for interval manipulation.', 'Ensure the output list is sorted.']}, 'examples': {0: 'Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]\n\nInput: [[1,4],[4,5]] Output: [[1,5]]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1472}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])
    merged_intervals = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= merged_intervals[-1][1]:
            merged_intervals[-1][1] = max(interval[1], merged_intervals[-1][1])
        else:
            merged_intervals.append(interval)

    return merged_intervals

# Example usage
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
intervals2 = [[1,4],[4,5]]

print(merge_intervals(intervals1))  # Output: [[1,6],[8,10],[15,18]]
print(merge_intervals(intervals2))  # Output: [[1,5]]
","def merge_intervals(intervals):
  if not intervals:
    return []

  intervals.sort(key =lambda x: x[0])
  merged = [intervals[0]]
  for i in range(1, len(intervals)):
    current_interval = intervals[i]
    last_merged = merged[-1]
    if current_interval[0] <= last_merged[1]:
      last_merged[1] = max(last_merged[1], current_interval[1])
    else:
      merged.append(current_interval)
  return merged


#testing the function with provided test cases/examples 
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals1))
intervals2 = [[1,4],[4,5]]
print(merge_intervals(intervals2))","Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times."
source_code_060,gpt-3.5-turbo_01,0.6,"{'ic_id': {0: 490}, 'ica_id': {0: 4620}, 'question': {0: 'Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times.'}, 'rules': {0: ['Do not use any library functions intended for interval manipulation.', 'Ensure the output list is sorted.']}, 'examples': {0: 'Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]\n\nInput: [[1,4],[4,5]] Output: [[1,5]]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1472}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])
    merged_intervals = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= merged_intervals[-1][1]:
            merged_intervals[-1][1] = max(interval[1], merged_intervals[-1][1])
        else:
            merged_intervals.append(interval)

    return merged_intervals

# Example usage
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
intervals2 = [[1,4],[4,5]]

print(merge_intervals(intervals1))  # Output: [[1,6],[8,10],[15,18]]
print(merge_intervals(intervals2))  # Output: [[1,5]]
","def merge_intervals(intervals):
  if not intervals:
    return []

  intervals.sort(key =lambda x: x[0])
  merged = [intervals[0]]
  for i in range(1, len(intervals)):
    current_interval = intervals[i]
    last_merged = merged[-1]
    if current_interval[0] <= last_merged[1]:
      last_merged[1] = max(last_merged[1], current_interval[1])
    else:
      merged.append(current_interval)
  return merged


#testing the function with provided test cases/examples 
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals1))
intervals2 = [[1,4],[4,5]]
print(merge_intervals(intervals2))","Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times."
source_code_060,gpt-4_00,0.4,"{'ic_id': {0: 490}, 'ica_id': {0: 4620}, 'question': {0: 'Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times.'}, 'rules': {0: ['Do not use any library functions intended for interval manipulation.', 'Ensure the output list is sorted.']}, 'examples': {0: 'Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]\n\nInput: [[1,4],[4,5]] Output: [[1,5]]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1472}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])
    merged_intervals = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= merged_intervals[-1][1]:
            merged_intervals[-1][1] = max(interval[1], merged_intervals[-1][1])
        else:
            merged_intervals.append(interval)

    return merged_intervals

# Example usage
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
intervals2 = [[1,4],[4,5]]

print(merge_intervals(intervals1))  # Output: [[1,6],[8,10],[15,18]]
print(merge_intervals(intervals2))  # Output: [[1,5]]
","def merge_intervals(intervals):
  if not intervals:
    return []

  intervals.sort(key =lambda x: x[0])
  merged = [intervals[0]]
  for i in range(1, len(intervals)):
    current_interval = intervals[i]
    last_merged = merged[-1]
    if current_interval[0] <= last_merged[1]:
      last_merged[1] = max(last_merged[1], current_interval[1])
    else:
      merged.append(current_interval)
  return merged


#testing the function with provided test cases/examples 
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals1))
intervals2 = [[1,4],[4,5]]
print(merge_intervals(intervals2))","Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times."
source_code_060,gpt-4_01,0.4,"{'ic_id': {0: 490}, 'ica_id': {0: 4620}, 'question': {0: 'Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times.'}, 'rules': {0: ['Do not use any library functions intended for interval manipulation.', 'Ensure the output list is sorted.']}, 'examples': {0: 'Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]\n\nInput: [[1,4],[4,5]] Output: [[1,5]]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1472}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])
    merged_intervals = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= merged_intervals[-1][1]:
            merged_intervals[-1][1] = max(interval[1], merged_intervals[-1][1])
        else:
            merged_intervals.append(interval)

    return merged_intervals

# Example usage
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
intervals2 = [[1,4],[4,5]]

print(merge_intervals(intervals1))  # Output: [[1,6],[8,10],[15,18]]
print(merge_intervals(intervals2))  # Output: [[1,5]]
","def merge_intervals(intervals):
  if not intervals:
    return []

  intervals.sort(key =lambda x: x[0])
  merged = [intervals[0]]
  for i in range(1, len(intervals)):
    current_interval = intervals[i]
    last_merged = merged[-1]
    if current_interval[0] <= last_merged[1]:
      last_merged[1] = max(last_merged[1], current_interval[1])
    else:
      merged.append(current_interval)
  return merged


#testing the function with provided test cases/examples 
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals1))
intervals2 = [[1,4],[4,5]]
print(merge_intervals(intervals2))","Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times."
source_code_060,gpt-4-turbo_00,0.4,"{'ic_id': {0: 490}, 'ica_id': {0: 4620}, 'question': {0: 'Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times.'}, 'rules': {0: ['Do not use any library functions intended for interval manipulation.', 'Ensure the output list is sorted.']}, 'examples': {0: 'Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]\n\nInput: [[1,4],[4,5]] Output: [[1,5]]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1472}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])
    merged_intervals = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= merged_intervals[-1][1]:
            merged_intervals[-1][1] = max(interval[1], merged_intervals[-1][1])
        else:
            merged_intervals.append(interval)

    return merged_intervals

# Example usage
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
intervals2 = [[1,4],[4,5]]

print(merge_intervals(intervals1))  # Output: [[1,6],[8,10],[15,18]]
print(merge_intervals(intervals2))  # Output: [[1,5]]
","def merge_intervals(intervals):
  if not intervals:
    return []

  intervals.sort(key =lambda x: x[0])
  merged = [intervals[0]]
  for i in range(1, len(intervals)):
    current_interval = intervals[i]
    last_merged = merged[-1]
    if current_interval[0] <= last_merged[1]:
      last_merged[1] = max(last_merged[1], current_interval[1])
    else:
      merged.append(current_interval)
  return merged


#testing the function with provided test cases/examples 
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals1))
intervals2 = [[1,4],[4,5]]
print(merge_intervals(intervals2))","Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times."
source_code_060,gpt-4-turbo_01,0.4,"{'ic_id': {0: 490}, 'ica_id': {0: 4620}, 'question': {0: 'Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times.'}, 'rules': {0: ['Do not use any library functions intended for interval manipulation.', 'Ensure the output list is sorted.']}, 'examples': {0: 'Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]\n\nInput: [[1,4],[4,5]] Output: [[1,5]]'}, 'programming_language': {0: 'Python'}, 'response_time': {0: 1472}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 150.0}, 'total_weight': {0: 150.0}}","def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])
    merged_intervals = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= merged_intervals[-1][1]:
            merged_intervals[-1][1] = max(interval[1], merged_intervals[-1][1])
        else:
            merged_intervals.append(interval)

    return merged_intervals

# Example usage
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
intervals2 = [[1,4],[4,5]]

print(merge_intervals(intervals1))  # Output: [[1,6],[8,10],[15,18]]
print(merge_intervals(intervals2))  # Output: [[1,5]]
","def merge_intervals(intervals):
  if not intervals:
    return []

  intervals.sort(key =lambda x: x[0])
  merged = [intervals[0]]
  for i in range(1, len(intervals)):
    current_interval = intervals[i]
    last_merged = merged[-1]
    if current_interval[0] <= last_merged[1]:
      last_merged[1] = max(last_merged[1], current_interval[1])
    else:
      merged.append(current_interval)
  return merged


#testing the function with provided test cases/examples 
intervals1 = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals1))
intervals2 = [[1,4],[4,5]]
print(merge_intervals(intervals2))","Create a Python function to merge a set of intervals. If any intervals overlap, merge them into a single interval. The function returns the merged list of intervals sorted by their start times."
source_code_061,gpt-3.5-turbo_00,0.8,"{'ic_id': {0: 494}, 'ica_id': {0: 4654}, 'question': {0: 'Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list.'}, 'rules': {0: ['Only use core Python features.', 'Function should return a tuple (longest_word, length).']}, 'examples': {0: ""Input: ['hello', 'world', 'python', 'programming'] Output: ('programming', 11)\\nInput: ['short', 'longer', 'longest', 'size'] Output: ('longest', 7)""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 407}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","def find_longest_word(words):
    max_length = 0
    longest_word = ''

    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word

    return longest_word, max_length

# Test cases
print(find_longest_word(['hello', 'world', 'python', 'programming']))  # Output: ('programming', 11)
print(find_longest_word(['short', 'longer', 'longest', 'size']))  # Output: ('longest', 7)
","input_list = [""appel"", ""kroket"", ""kaassouflÃ©"", ""schoen"", ""auto""]
def longest_word(input_list):
	longest_word = """"
	word_count = 0
	for word in input_list:
		if len(word) > word_count:
			longest_word = word
			word_count = len(word)
	return (longest_word, word_count)
longest_word(input_list)","Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list."
source_code_061,gpt-3.5-turbo_01,0.8,"{'ic_id': {0: 494}, 'ica_id': {0: 4654}, 'question': {0: 'Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list.'}, 'rules': {0: ['Only use core Python features.', 'Function should return a tuple (longest_word, length).']}, 'examples': {0: ""Input: ['hello', 'world', 'python', 'programming'] Output: ('programming', 11)\\nInput: ['short', 'longer', 'longest', 'size'] Output: ('longest', 7)""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 407}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","def find_longest_word(words):
    max_length = 0
    longest_word = ''

    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word

    return longest_word, max_length

# Test cases
print(find_longest_word(['hello', 'world', 'python', 'programming']))  # Output: ('programming', 11)
print(find_longest_word(['short', 'longer', 'longest', 'size']))  # Output: ('longest', 7)
","input_list = [""appel"", ""kroket"", ""kaassouflÃ©"", ""schoen"", ""auto""]
def longest_word(input_list):
	longest_word = """"
	word_count = 0
	for word in input_list:
		if len(word) > word_count:
			longest_word = word
			word_count = len(word)
	return (longest_word, word_count)
longest_word(input_list)","Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list."
source_code_061,gpt-4_00,0.8,"{'ic_id': {0: 494}, 'ica_id': {0: 4654}, 'question': {0: 'Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list.'}, 'rules': {0: ['Only use core Python features.', 'Function should return a tuple (longest_word, length).']}, 'examples': {0: ""Input: ['hello', 'world', 'python', 'programming'] Output: ('programming', 11)\\nInput: ['short', 'longer', 'longest', 'size'] Output: ('longest', 7)""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 407}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","def find_longest_word(words):
    max_length = 0
    longest_word = ''

    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word

    return longest_word, max_length

# Test cases
print(find_longest_word(['hello', 'world', 'python', 'programming']))  # Output: ('programming', 11)
print(find_longest_word(['short', 'longer', 'longest', 'size']))  # Output: ('longest', 7)
","input_list = [""appel"", ""kroket"", ""kaassouflÃ©"", ""schoen"", ""auto""]
def longest_word(input_list):
	longest_word = """"
	word_count = 0
	for word in input_list:
		if len(word) > word_count:
			longest_word = word
			word_count = len(word)
	return (longest_word, word_count)
longest_word(input_list)","Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list."
source_code_061,gpt-4_01,0.7,"{'ic_id': {0: 494}, 'ica_id': {0: 4654}, 'question': {0: 'Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list.'}, 'rules': {0: ['Only use core Python features.', 'Function should return a tuple (longest_word, length).']}, 'examples': {0: ""Input: ['hello', 'world', 'python', 'programming'] Output: ('programming', 11)\\nInput: ['short', 'longer', 'longest', 'size'] Output: ('longest', 7)""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 407}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","def find_longest_word(words):
    max_length = 0
    longest_word = ''

    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word

    return longest_word, max_length

# Test cases
print(find_longest_word(['hello', 'world', 'python', 'programming']))  # Output: ('programming', 11)
print(find_longest_word(['short', 'longer', 'longest', 'size']))  # Output: ('longest', 7)
","input_list = [""appel"", ""kroket"", ""kaassouflÃ©"", ""schoen"", ""auto""]
def longest_word(input_list):
	longest_word = """"
	word_count = 0
	for word in input_list:
		if len(word) > word_count:
			longest_word = word
			word_count = len(word)
	return (longest_word, word_count)
longest_word(input_list)","Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list."
source_code_061,gpt-4-turbo_00,0.8,"{'ic_id': {0: 494}, 'ica_id': {0: 4654}, 'question': {0: 'Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list.'}, 'rules': {0: ['Only use core Python features.', 'Function should return a tuple (longest_word, length).']}, 'examples': {0: ""Input: ['hello', 'world', 'python', 'programming'] Output: ('programming', 11)\\nInput: ['short', 'longer', 'longest', 'size'] Output: ('longest', 7)""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 407}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","def find_longest_word(words):
    max_length = 0
    longest_word = ''

    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word

    return longest_word, max_length

# Test cases
print(find_longest_word(['hello', 'world', 'python', 'programming']))  # Output: ('programming', 11)
print(find_longest_word(['short', 'longer', 'longest', 'size']))  # Output: ('longest', 7)
","input_list = [""appel"", ""kroket"", ""kaassouflÃ©"", ""schoen"", ""auto""]
def longest_word(input_list):
	longest_word = """"
	word_count = 0
	for word in input_list:
		if len(word) > word_count:
			longest_word = word
			word_count = len(word)
	return (longest_word, word_count)
longest_word(input_list)","Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list."
source_code_061,gpt-4-turbo_01,0.8,"{'ic_id': {0: 494}, 'ica_id': {0: 4654}, 'question': {0: 'Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list.'}, 'rules': {0: ['Only use core Python features.', 'Function should return a tuple (longest_word, length).']}, 'examples': {0: ""Input: ['hello', 'world', 'python', 'programming'] Output: ('programming', 11)\\nInput: ['short', 'longer', 'longest', 'size'] Output: ('longest', 7)""}, 'programming_language': {0: 'Python'}, 'response_time': {0: 407}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","def find_longest_word(words):
    max_length = 0
    longest_word = ''

    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word

    return longest_word, max_length

# Test cases
print(find_longest_word(['hello', 'world', 'python', 'programming']))  # Output: ('programming', 11)
print(find_longest_word(['short', 'longer', 'longest', 'size']))  # Output: ('longest', 7)
","input_list = [""appel"", ""kroket"", ""kaassouflÃ©"", ""schoen"", ""auto""]
def longest_word(input_list):
	longest_word = """"
	word_count = 0
	for word in input_list:
		if len(word) > word_count:
			longest_word = word
			word_count = len(word)
	return (longest_word, word_count)
longest_word(input_list)","Write a Python function that takes a list of words and returns the longest word and its length. If there are multiple words with the same maximum length, return the one that appears first in the list."
source_code_062,gpt-3.5-turbo_00,0.3,"{'ic_id': {0: 518}, 'ica_id': {0: 4799}, 'question': {0: 'Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently.'}, 'rules': {0: ['Handle large strings efficiently', 'Count should be case-insensitive', 'Punctuation should not be part of the word']}, 'examples': {0: 'Input: ""The quick brown fox jumps over the lazy dog. The dog was lazy!""\nOutput: [(""the"", 3), (""lazy"", 2), (""dog"", 2)]'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 127}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","<?php

function countTopWords($inputString) {
    // Convert the input string to lowercase and remove punctuation
    $cleanString = preg_replace(""/[\W_]+/"", "" "", strtolower($inputString));

    // Split the string into an array of words
    $words = explode("" "", $cleanString);

    // Count the frequency of each word
    $wordCount = array_count_values($words);

    // Sort the words by frequency in descending order
    arsort($wordCount);

    // Get the top three most common words
    $topWords = array_slice($wordCount, 0, 3);

    // Format the output as an array of tuples
    $output = [];
    foreach ($topWords as $word => $count) {
        $output[] = [$word, $count];
    }

    return $output;
}

// Test the function with the example input
$inputString = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
$output = countTopWords($inputString);
print_r($output);

?>
","<?php
function getTopThreeWords($text) {
// Remove punctuation and convert to lowercase
$words = str_word_count(strtolower(preg_replace('/[^\p{L}\p{N}\s]/u', ' ', $text)), 1);

// Count the frequency of each word
$wordFrequency = array_count_values($words);

// Sort the words by frequency in descending order
arsort($wordFrequency);

// Get the top three words
$topThreeWords = array_slice($wordFrequency, 0, 3, true);

// Format the output
$output = [];
foreach ($topThreeWords as $word => $count) {
$output[] = ""('$word', $count)"";
}

return '[' . implode(', ', $output) . ']';
}

// Example usage:
$inputText = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
echo getTopThreeWords($inputText);
?>","Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently."
source_code_062,gpt-3.5-turbo_01,0.3,"{'ic_id': {0: 518}, 'ica_id': {0: 4799}, 'question': {0: 'Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently.'}, 'rules': {0: ['Handle large strings efficiently', 'Count should be case-insensitive', 'Punctuation should not be part of the word']}, 'examples': {0: 'Input: ""The quick brown fox jumps over the lazy dog. The dog was lazy!""\nOutput: [(""the"", 3), (""lazy"", 2), (""dog"", 2)]'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 127}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","<?php

function countTopWords($inputString) {
    // Convert the input string to lowercase and remove punctuation
    $cleanString = preg_replace(""/[\W_]+/"", "" "", strtolower($inputString));

    // Split the string into an array of words
    $words = explode("" "", $cleanString);

    // Count the frequency of each word
    $wordCount = array_count_values($words);

    // Sort the words by frequency in descending order
    arsort($wordCount);

    // Get the top three most common words
    $topWords = array_slice($wordCount, 0, 3);

    // Format the output as an array of tuples
    $output = [];
    foreach ($topWords as $word => $count) {
        $output[] = [$word, $count];
    }

    return $output;
}

// Test the function with the example input
$inputString = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
$output = countTopWords($inputString);
print_r($output);

?>
","<?php
function getTopThreeWords($text) {
// Remove punctuation and convert to lowercase
$words = str_word_count(strtolower(preg_replace('/[^\p{L}\p{N}\s]/u', ' ', $text)), 1);

// Count the frequency of each word
$wordFrequency = array_count_values($words);

// Sort the words by frequency in descending order
arsort($wordFrequency);

// Get the top three words
$topThreeWords = array_slice($wordFrequency, 0, 3, true);

// Format the output
$output = [];
foreach ($topThreeWords as $word => $count) {
$output[] = ""('$word', $count)"";
}

return '[' . implode(', ', $output) . ']';
}

// Example usage:
$inputText = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
echo getTopThreeWords($inputText);
?>","Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently."
source_code_062,gpt-4_00,0.3,"{'ic_id': {0: 518}, 'ica_id': {0: 4799}, 'question': {0: 'Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently.'}, 'rules': {0: ['Handle large strings efficiently', 'Count should be case-insensitive', 'Punctuation should not be part of the word']}, 'examples': {0: 'Input: ""The quick brown fox jumps over the lazy dog. The dog was lazy!""\nOutput: [(""the"", 3), (""lazy"", 2), (""dog"", 2)]'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 127}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","<?php

function countTopWords($inputString) {
    // Convert the input string to lowercase and remove punctuation
    $cleanString = preg_replace(""/[\W_]+/"", "" "", strtolower($inputString));

    // Split the string into an array of words
    $words = explode("" "", $cleanString);

    // Count the frequency of each word
    $wordCount = array_count_values($words);

    // Sort the words by frequency in descending order
    arsort($wordCount);

    // Get the top three most common words
    $topWords = array_slice($wordCount, 0, 3);

    // Format the output as an array of tuples
    $output = [];
    foreach ($topWords as $word => $count) {
        $output[] = [$word, $count];
    }

    return $output;
}

// Test the function with the example input
$inputString = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
$output = countTopWords($inputString);
print_r($output);

?>
","<?php
function getTopThreeWords($text) {
// Remove punctuation and convert to lowercase
$words = str_word_count(strtolower(preg_replace('/[^\p{L}\p{N}\s]/u', ' ', $text)), 1);

// Count the frequency of each word
$wordFrequency = array_count_values($words);

// Sort the words by frequency in descending order
arsort($wordFrequency);

// Get the top three words
$topThreeWords = array_slice($wordFrequency, 0, 3, true);

// Format the output
$output = [];
foreach ($topThreeWords as $word => $count) {
$output[] = ""('$word', $count)"";
}

return '[' . implode(', ', $output) . ']';
}

// Example usage:
$inputText = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
echo getTopThreeWords($inputText);
?>","Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently."
source_code_062,gpt-4_01,0.3,"{'ic_id': {0: 518}, 'ica_id': {0: 4799}, 'question': {0: 'Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently.'}, 'rules': {0: ['Handle large strings efficiently', 'Count should be case-insensitive', 'Punctuation should not be part of the word']}, 'examples': {0: 'Input: ""The quick brown fox jumps over the lazy dog. The dog was lazy!""\nOutput: [(""the"", 3), (""lazy"", 2), (""dog"", 2)]'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 127}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","<?php

function countTopWords($inputString) {
    // Convert the input string to lowercase and remove punctuation
    $cleanString = preg_replace(""/[\W_]+/"", "" "", strtolower($inputString));

    // Split the string into an array of words
    $words = explode("" "", $cleanString);

    // Count the frequency of each word
    $wordCount = array_count_values($words);

    // Sort the words by frequency in descending order
    arsort($wordCount);

    // Get the top three most common words
    $topWords = array_slice($wordCount, 0, 3);

    // Format the output as an array of tuples
    $output = [];
    foreach ($topWords as $word => $count) {
        $output[] = [$word, $count];
    }

    return $output;
}

// Test the function with the example input
$inputString = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
$output = countTopWords($inputString);
print_r($output);

?>
","<?php
function getTopThreeWords($text) {
// Remove punctuation and convert to lowercase
$words = str_word_count(strtolower(preg_replace('/[^\p{L}\p{N}\s]/u', ' ', $text)), 1);

// Count the frequency of each word
$wordFrequency = array_count_values($words);

// Sort the words by frequency in descending order
arsort($wordFrequency);

// Get the top three words
$topThreeWords = array_slice($wordFrequency, 0, 3, true);

// Format the output
$output = [];
foreach ($topThreeWords as $word => $count) {
$output[] = ""('$word', $count)"";
}

return '[' . implode(', ', $output) . ']';
}

// Example usage:
$inputText = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
echo getTopThreeWords($inputText);
?>","Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently."
source_code_062,gpt-4-turbo_00,0.3,"{'ic_id': {0: 518}, 'ica_id': {0: 4799}, 'question': {0: 'Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently.'}, 'rules': {0: ['Handle large strings efficiently', 'Count should be case-insensitive', 'Punctuation should not be part of the word']}, 'examples': {0: 'Input: ""The quick brown fox jumps over the lazy dog. The dog was lazy!""\nOutput: [(""the"", 3), (""lazy"", 2), (""dog"", 2)]'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 127}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","<?php

function countTopWords($inputString) {
    // Convert the input string to lowercase and remove punctuation
    $cleanString = preg_replace(""/[\W_]+/"", "" "", strtolower($inputString));

    // Split the string into an array of words
    $words = explode("" "", $cleanString);

    // Count the frequency of each word
    $wordCount = array_count_values($words);

    // Sort the words by frequency in descending order
    arsort($wordCount);

    // Get the top three most common words
    $topWords = array_slice($wordCount, 0, 3);

    // Format the output as an array of tuples
    $output = [];
    foreach ($topWords as $word => $count) {
        $output[] = [$word, $count];
    }

    return $output;
}

// Test the function with the example input
$inputString = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
$output = countTopWords($inputString);
print_r($output);

?>
","<?php
function getTopThreeWords($text) {
// Remove punctuation and convert to lowercase
$words = str_word_count(strtolower(preg_replace('/[^\p{L}\p{N}\s]/u', ' ', $text)), 1);

// Count the frequency of each word
$wordFrequency = array_count_values($words);

// Sort the words by frequency in descending order
arsort($wordFrequency);

// Get the top three words
$topThreeWords = array_slice($wordFrequency, 0, 3, true);

// Format the output
$output = [];
foreach ($topThreeWords as $word => $count) {
$output[] = ""('$word', $count)"";
}

return '[' . implode(', ', $output) . ']';
}

// Example usage:
$inputText = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
echo getTopThreeWords($inputText);
?>","Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently."
source_code_062,gpt-4-turbo_01,0.3,"{'ic_id': {0: 518}, 'ica_id': {0: 4799}, 'question': {0: 'Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently.'}, 'rules': {0: ['Handle large strings efficiently', 'Count should be case-insensitive', 'Punctuation should not be part of the word']}, 'examples': {0: 'Input: ""The quick brown fox jumps over the lazy dog. The dog was lazy!""\nOutput: [(""the"", 3), (""lazy"", 2), (""dog"", 2)]'}, 'programming_language': {0: 'PHP'}, 'response_time': {0: 127}, 'score': {0: 3}, 'score_range': {0: 3}, 'weight': {0: 75.0}, 'total_weight': {0: 75.0}}","<?php

function countTopWords($inputString) {
    // Convert the input string to lowercase and remove punctuation
    $cleanString = preg_replace(""/[\W_]+/"", "" "", strtolower($inputString));

    // Split the string into an array of words
    $words = explode("" "", $cleanString);

    // Count the frequency of each word
    $wordCount = array_count_values($words);

    // Sort the words by frequency in descending order
    arsort($wordCount);

    // Get the top three most common words
    $topWords = array_slice($wordCount, 0, 3);

    // Format the output as an array of tuples
    $output = [];
    foreach ($topWords as $word => $count) {
        $output[] = [$word, $count];
    }

    return $output;
}

// Test the function with the example input
$inputString = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
$output = countTopWords($inputString);
print_r($output);

?>
","<?php
function getTopThreeWords($text) {
// Remove punctuation and convert to lowercase
$words = str_word_count(strtolower(preg_replace('/[^\p{L}\p{N}\s]/u', ' ', $text)), 1);

// Count the frequency of each word
$wordFrequency = array_count_values($words);

// Sort the words by frequency in descending order
arsort($wordFrequency);

// Get the top three words
$topThreeWords = array_slice($wordFrequency, 0, 3, true);

// Format the output
$output = [];
foreach ($topThreeWords as $word => $count) {
$output[] = ""('$word', $count)"";
}

return '[' . implode(', ', $output) . ']';
}

// Example usage:
$inputText = ""The quick brown fox jumps over the lazy dog. The dog was lazy!"";
echo getTopThreeWords($inputText);
?>","Create a PHP script that will accept a string as input, and return the top three most common words used within the string, along with their frequency counts. Assume the string is a plain text with words separated by spaces and punctuation should not be considered part of the word. Ensure that the count is case-insensitive and that the script can handle large strings efficiently."
